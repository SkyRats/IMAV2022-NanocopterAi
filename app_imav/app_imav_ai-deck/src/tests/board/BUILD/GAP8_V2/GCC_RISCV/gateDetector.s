
/home/sky/IMAV2022-NanocopterAi/app_imav/app_imav_ai-deck/src/tests/board/BUILD/GAP8_V2/GCC_RISCV/gateDetector:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 000003e0  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00001038  1b0003e8  1b0003e8  000013e8  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000a944  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   0000004c  1c00a9e4  1c00a9e4  0000d9e4  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c00aa30  1c00aa30  0000da30  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS
 10 .got          00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c00aa3c  1c00aa3c  00010020  2**0  CONTENTS
 14 .rodata       0000091c  1c00aa3c  1c00aa3c  0000da3c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         00000d34  1c00b358  1c00b358  0000e358  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          0000034c  1c00c08c  1c00c08c  0000f08c  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c00c3d8  00010004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000004  1000001c  1c00c3f0  0001001c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000020  10000020  00010020  2**0  CONTENTS
 20 .debug_frame  0000670c  00000000  00000000  00010020  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   000991db  00000000  00000000  0001672c  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000ee74  00000000  00000000  000af907  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0002b62a  00000000  00000000  000be77b  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00001718  00000000  00000000  000e9da8  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00005bc8  00000000  00000000  000eb4c0  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00029fea  00000000  00000000  000f1088  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    0000be6e  00000000  00000000  0011b072  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  00126ee0  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  00126efa  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b0003e8 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c00a9e4 l    d  .init_array	00000000 .init_array
1c00aa30 l    d  .fini_array	00000000 .fini_array
1c00aa3c l    d  .init	00000000 .init
1c00aa3c l    d  .fini	00000000 .fini
1c00aa3c l    d  .preinit_array	00000000 .preinit_array
1c00aa3c l    d  .boot	00000000 .boot
1c00aa3c l    d  .got	00000000 .got
1c00aa3c l    d  .shbss	00000000 .shbss
1c00aa3c l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c00aa3c l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c00aa3c l    d  .rodata	00000000 .rodata
1c00b358 l    d  .data	00000000 .data
1c00c08c l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000020 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c006242 l     F .text	0000001c __rt_event_enqueue
1c00625e l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c00627e l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 udma-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c0090e4 l     F .text	0000002e __rt_hyper_init
1c00c36c l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c00c370 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c006062 l     F .text	0000007c __rt_fc_cluster_lock_req
1b000bf0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c00922e l     F .text	0000000e __rt_io_end_of_flush
1c00923c l     F .text	00000050 __rt_io_uart_wait_req
1c00928c l     F .text	00000042 __rt_do_putc_host
1c0092ce l     F .text	0000005a __rt_io_start
1c009328 l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c009348 l     F .text	00000070 __rt_io_lock
1c0093b8 l     F .text	00000034 __rt_putc_host_cluster_req
1c0093ec l     F .text	00000070 __rt_io_unlock
1c00945c l     F .text	000000da __rt_io_uart_flush.constprop.11
1c009536 l     F .text	00000092 __rt_io_uart_wait_pending
1c0095c8 l     F .text	00000028 __rt_io_stop
1c009700 l     F .text	000000ac tfp_putc.isra.9
1c00c2b8 l     O .bss	00000080 __rt_io_event
1b000c0c l     O .stack	00000010 __rt_io_fc_lock
1c00c00c l     O .data	00000080 __rt_putc_host_buffer
1c00c380 l     O .bss	00000004 __rt_io_event_current
1c00c384 l     O .bss	00000004 __rt_io_pending_flush
1c00c388 l     O .bss	00000004 __rt_putc_host_buffer_index
1c00c38c l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 frame_streamer.c
00000000 l    df *ABS*	00000000 jpeg_encoder.c
1c00037c l     F .text	000000be AppendBits
00000000 l    df *ABS*	00000000 cluster.c
1c0009dc l     F .text	00000158 exec_quantization
1c000b34 l     F .text	0000019c check_fetch_block
1c000cd0 l     F .text	000000b0 __jpeg_encoder_init_constants
1c000d80 l     F .text	00000262 AppendBytes_cl
1c000fe2 l     F .text	000006a0 exec_check_bitstream
1c00173c l     F .text	000001c6 __jpeg_encoder_process_pe_entry
1c001902 l     F .text	00000204 __jpeg_encoder_process_cl_entry
00000000 l    df *ABS*	00000000 dct.c
00000000 l    df *ABS*	00000000 sched.o
1c001eb0 l       .text	00000000 __rt_handle_special_event
1c001eaa l       .text	00000000 __rt_no_first
1c001eac l       .text	00000000 __rt_common
1c001eae l       .text	00000000 enqueue_end
1c001f10 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c001f4c l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c001f36 l       .text	00000000 __rt_cluster_pool_update_end
1c001f1e l       .text	00000000 __rt_cluster_pool_update_loop
1c001f26 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c001f2e l       .text	00000000 __rt_cluster_pool_update_no_current
1c001f6a l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c001fe4 l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c0020d4 l       .text	00000000 __rt_udma_no_copy
1c00209c l       .text	00000000 repeat_transfer
1c0020ec l       .text	00000000 handle_special_end
1c002048 l       .text	00000000 resume_after_special_end
1c002086 l       .text	00000000 checkTask
1c00205c l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c002082 l       .text	00000000 transfer_resume
1c00207a l       .text	00000000 hyper
1c00207a l       .text	00000000 fc_tcdm
1c00207a l       .text	00000000 dual
1c00209c l       .text	00000000 dmaCmd
1c0020c4 l       .text	00000000 not_last
1c002134 l       .text	00000000 i2c_step1
1c002150 l       .text	00000000 i2c_step2
1c0020f6 l       .text	00000000 spim_step3
1c002112 l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c0021a4 l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c0021aa l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c0021c4 l       .text	00000000 __rt_soc_evt_no_udma_channel
1c002232 l       .text	00000000 rtc_event_handler
1c0021f0 l       .text	00000000 __rt_soc_evt_pwm
1c002204 l       .text	00000000 __rt_soc_evt_store
1c002218 l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 udma-v2_asm.o
1c002268 l       .text	00000000 __rt_udma_handle_pending
00000000 l    df *ABS*	00000000 spim-v2_asm.o
1c0022bc l       .text	00000000 __rt_spim_no_repeat
1c0022d2 l       .text	00000000 __rt_spim_handle_waiting
00000000 l    df *ABS*	00000000 gpio.o
1c002380 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 test.c
1c0029ee l     F .text	0000007a streamer_handler
1c002ac6 l     F .text	000000a2 cam_handler
1c002a68 l     F .text	0000005e led_handle
1c00c090 l     O .bss	00000020 buffer_inv
1c00c0b0 l     O .bss	0000000c camera
1c00c0bc l     O .bss	0000000c gpio_device
1c00c0c8 l     O .bss	00000080 led_task
1c00c148 l     O .bss	00000080 task1
1c00c1c8 l     O .bss	0000000c wifi
1c00b574 l     O .data	00000004 task
1c00b578 l     O .data	00000004 originalImage
1c00c348 l     O .bss	00000004 imgBuff0
1c00c34c l     O .bss	00000004 imgBuff0_gateDetection
1c00c350 l     O .bss	00000004 led_val
1c00c354 l     O .bss	00000004 stream1_done
1c00c358 l     O .bss	00000004 streamer1
00000000 l    df *ABS*	00000000 GateDetect.c
1c002ef6 l     F .text	0000000e pi_cl_team_barrier
00000000 l    df *ABS*	00000000 filter.c
00000000 l    df *ABS*	00000000 convolution.c
1c0039ce l     F .text	0000000e pi_cl_team_barrier
00000000 l    df *ABS*	00000000 threshold.c
00000000 l    df *ABS*	00000000 regionGrowing.c
00000000 l    df *ABS*	00000000 morphological_operators.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 stack.c
00000000 l    df *ABS*	00000000 findGate.c
00000000 l    df *ABS*	00000000 histogram.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 himax.c
1c005350 l     F .text	00000020 __himax_reg_write
1c005370 l     F .text	0000003c __himax_init_regs
1c0053ac l     F .text	0000002a __himax_set_qqvga
1c005454 l     F .text	00000022 __himax_standby
1c005476 l     F .text	00000024 __himax_close
1c00549a l     F .text	00000070 __himax_reset
1c005734 l     F .text	000000a6 __himax_control
1c00b428 l     O .data	0000001c himax_api
1c00afe4 l     O .rodata	0000011c __himax_reg_init
00000000 l    df *ABS*	00000000 transport.c
1c005806 l     F .text	00000032 pi_task_wait_on.isra.3
1c00b570 l     O .data	00000004 connection.13465
00000000 l    df *ABS*	00000000 nina_w10.c
1c0058b8 l     F .text	00000018 __nina_w10_append_string
1c0058da l     F .text	00000070 __nina_w10_get_response.constprop.6
1c00594a l     F .text	0000002a __nina_w10_setup_resume
1c005974 l     F .text	00000076 __nina_w10_send_command
1c005a66 l     F .text	00000088 __nina_w10_send_packet_resume
1c005c9a l     F .text	0000008e __nina_w10_send_packet_end
1c00b444 l     O .data	00000014 nina_w10_api
00000000 l    df *ABS*	00000000 semihost.c
1c005d34 l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c005d4e l     F .text	0000003c __bsp_init_pads
1c00c360 l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c005dba l     F .text	00000026 cluster_start
1c00a9e8 l     O .init_array	00000004 ctor_list
1c00aa34 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c00696e l     F .text	00000018 __rt_time_poweroff
1c006986 l     F .text	00000018 __rt_time_poweron
1c00c364 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c006e2c l     F .text	0000002c SetFllMultDivFactors
1c006e58 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00bcf0 l     O .data	00000007 SystemStateToSCUFastSeq
1c00bd08 l     O .data	00000003 ToHWDCDC_Pos
1c00bd18 l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c007278 l     F .text	00000062 __rt_init_cluster_data
1c0072da l     F .text	00000064 __rt_cluster_init
1c00733e l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c007624 l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c00c1d4 l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c00c368 l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 cpi-v1.c
1c0079d4 l     F .text	00000014 __rt_cpi_init
1c00c200 l     O .bss	00000020 __rt_cpi
00000000 l    df *ABS*	00000000 i2c-v2.c
1c0079e8 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c007a0e l     F .text	00000032 pi_task_wait_on.isra.3
1c007d44 l     F .text	00000058 __rt_i2c_init
1c00bd1c l     O .data	00000088 __rt_i2c
00000000 l    df *ABS*	00000000 spim-v2.c
1c007d9c l     F .text	0000002c pos_spim_enqueue_to_pending_7
1c007dc8 l     F .text	00000044 pos_spim_apply_conf
1c007e0c l     F .text	0000003a __rt_spi_get_div.isra.1
1c007e46 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00886a l     F .text	00000022 pos_spim_send_handle_misaligned
1c00888c l     F .text	00000034 pos_spim_send_handle_misaligned_2d
1c008aa0 l     F .text	00000058 pos_spim_receive_handle_misaligned
1c008af8 l     F .text	0000006a pos_spim_receive_handle_misaligned_2d
1c008d74 l     F .text	0000005a __rt_spim_init
1c00bda4 l     O .data	00000218 __rt_spim
1c00bfbc l     O .data	00000030 pos_spim_l2
00000000 l    df *ABS*	00000000 gpio-v2.c
1c00c220 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 i2s-v1.c
1c009112 l     F .text	00000034 __rt_i2s_resume
1c009146 l     F .text	0000002a __rt_i2s_setfreq_after
1c009170 l     F .text	0000002c __rt_i2s_setfreq_before
1c00c374 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 i2c-v2.c
1c00bfec l     O .data	00000020 __rt_i2c
00000000 l    df *ABS*	00000000 spim-v2.c
1c00c378 l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c009938 l     F .text	00000092 _to_x
1c0099ca l     F .text	00000020 _rlrshift
1c0099ea l     F .text	00000044 _ldiv5
1c009a2e l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c00a53e l     F .text	00000024 __rt_uart_setup.isra.5
1c00a562 l     F .text	00000022 __rt_uart_setfreq_after
1c00a584 l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c00a5c6 l     F .text	0000002c __rt_uart_setfreq_before
1c00a5f2 l     F .text	00000042 __rt_uart_cluster_req
1c00a634 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00c338 l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c00a8f2 l       .text	00000000 __rt_slave_start
1c00a848 l       .text	00000000 __rt_master_event
1c00a85c l       .text	00000000 __rt_master_loop
1c00a84c l       .text	00000000 __rt_push_event_to_fc_retry
1c00a8e4 l       .text	00000000 __rt_push_event_to_fc_wait
1c00a8d6 l       .text	00000000 __rt_master_sleep
1c00a864 l       .text	00000000 __rt_master_loop_update_next
1c00a8b8 l       .text	00000000 __rt_no_stack_check
1c00a8c4 l       .text	00000000 __rt_master_no_slave_barrier
1c00a8d4 l       .text	00000000 __rt_master_loop_no_slave
1c00a910 l       .text	00000000 __rt_fork_return
1c00a914 l       .text	00000000 __rt_wait_for_dispatch
1c00a92a l       .text	00000000 __rt_other_entry
1c00a924 l       .text	00000000 __rt_fork_entry
1c00a952 l       .text	00000000 __rt_no_stack_check_end
1c00a9c4 l       .text	00000000 __rt_dma_2d_done
1c00a982 l       .text	00000000 __rt_dma_2d_redo
1c00a98a l       .text	00000000 __rt_dma_2d_not_last
1c00a9ac l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 jpeg_constants.c
1c000838 g     F .text	0000004a jpeg_encoder_process
1c0082a6 g     F .text	00000158 pi_spi_send_async
1c0090c0 g     F .text	00000018 __rt_udma_channel_init
1c0053ee g     F .text	0000005c __himax_reg_get
1c006a3c g     F .text	00000002 pi_time_wait_us
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
000003a0 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c006950 g     F .text	0000000e pi_l2_malloc
1c0050f2 g     F .text	00000250 adaptiveHistogramTechnique
1c0061d4 g     F .text	00000038 __rt_fc_cluster_lock
1c006fee g     F .text	000000a4 InitOneFll
1c00695e g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c00c3ac g     O .bss	00000004 __rt_cluster_tasks
1c00639e g     F .text	00000020 __rt_bridge_send_notif
1c00062c g     F .text	0000000a gray_to_y
1c006500 g     F .text	00000074 rt_event_alloc
00000388 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c0065d4 g     F .text	00000064 __rt_event_execute
1c006010 g     F .text	00000052 __rt_irq_init
1c0066b0 g     F .text	00000048 rt_user_alloc
00000360 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c00746e g     F .text	000000d8 pi_cluster_open
1c00990c g     F .text	0000002c printf
ffffffff g       *ABS*	00000000 pulp__L2
1c006856 g     F .text	00000070 __rt_allocs_init
1c00c390 g     O .bss	00000004 __rt_alloc_l1
1c007468 g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c008bd8 g     F .text	0000007e pi_spi_copy_2d_async
1c0078ec g     F .text	0000006a pi_cpi_open
1c005f72 g     F .text	0000004c rt_irq_set_handler
1c005d28 g     F .text	0000000c pi_nina_w10_conf_init
00000364 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
00000358 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c00715c g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c0067a6 g     F .text	0000002e rt_free
1c001682 g     F .text	000000ba process_du_cluster
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c002308 g       .text	00000000 __rt_spim_handle_rx_copy
1c006dee g     F .text	0000003e __rt_freq_init
1c005de0 g     F .text	00000166 __rt_init
00000001 g       *ABS*	00000000 __FC
1c008ebe g     F .text	00000032 pi_gpio_pin_write
1c00725c g     F .text	00000012 __rt_fll_init
1c00544a g     F .text	0000000a __himax_capture_async
1c003f6c g     F .text	0000004c rangeThresholdImage
1c008e54 g     F .text	00000006 pi_gpio_conf_init
1b001420 g       .stack	00000000 __fc_tcdm_end
1c0008d8 g     F .text	0000000e jpeg_encoder_conf_init
1c00648c g     F .text	00000034 __rt_bridge_init
1c00404a g     F .text	000001b2 edgesLabelAndCheckNeighbour
1c001dd2 g       .text	00000000 __rt_i2c_step1
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
1c0049d6 g     F .text	00000082 createStack
1c00229a g       .text	00000000 __pi_spim_handle_copy
0000037c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c0068c6 g     F .text	00000032 rt_alloc_cluster
1c0091f8 g     F .text	00000012 __rt_i2c_init
1c002f04 g     F .text	00000728 clusterMain
1c00a9e4 g       .text	00000000 _etext
1c004cb6 g     F .text	0000000e isStackEmpty
1c004cc4 g     F .text	00000234 findGate
0000035c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c00588a g     F .text	0000002e pi_transport_send
1c00b358 g       .data	00000000 sdata
1c007c18 g     F .text	00000118 pi_i2c_open
1c001bb8 g     F .text	00000026 __jpeg_encoder_stop_cl
00000001 g       *ABS*	00000000 __rt_nb_cluster
000003e0 g     O .data_tiny_fc	00000004 __rtc_handler
1c006744 g     F .text	0000002e rt_alloc
1c004940 g     F .text	00000096 pDequeue
1c00a518 g     F .text	00000026 __rt_uart_cluster_req_done
1c005f46 g     F .text	00000028 __rt_deinit
1b000c08 g     O .stack	00000001 camera_isAwaked
1c001e8c g       .text	00000000 __rt_event_enqueue
1c001e14 g       .text	00000000 __rt_i2c_handle_rx_copy
1c006a18 g     F .text	00000024 rt_time_wait_us
1c009616 g     F .text	00000036 memcpy
1c00236a g       .text	00000000 __rt_gpio_handler
1c001fc4 g       .text	00000000 __rt_illegal_instr
1c00682c g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c003fb8 g     F .text	00000092 thresholdAndFindMeans
1c0068f8 g     F .text	00000034 rt_free_cluster
1c004692 g     F .text	00000186 cl_maskDilation
1c009060 g     F .text	0000000c __rt_padframe_init
1c00aa3c g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c005844 g     F .text	00000012 pi_transport_connect
1c005da2 g     F .text	0000000e bsp_himax_open
1c0097ac g     F .text	0000002c puts
1c007a40 g     F .text	000000d4 pi_i2c_write_async
1c00b488  w    O .data	00000018 __rt_padframe_profiles
1c004a58 g     F .text	0000007c destroyStack
00000380 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
00000394 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c00658e g     F .text	00000022 rt_event_get_blocking
1c00c090 g       .bss	00000000 _bss_start
1c00c08c g       .data	00000000 edata
1c006808 g     F .text	00000024 __rt_alloc_init_l1
1c00b568  w    O .data	00000004 __rt_iodev_uart_baudrate
1c001ef2 g       .text	00000000 __rt_remote_enqueue_event
1c00bcf8 g     O .data	00000010 PMUState
1c00b358 g       .data	00000000 _sdata
10000020 g       .l1cluster_g	00000000 __l1_end
1c008e5a g     F .text	00000064 pi_gpio_open
1c00362c g     F .text	000001ce masterFindGate
1c004818 g     F .text	0000005e createPQueue
1c00906c g     F .text	00000054 __rt_udma_copy_enqueue
1c006bbc g     F .text	00000134 rt_periph_copy
1c0096c4 g     F .text	0000003c __rt_putc_uart
1b0003e8 g     O .stack	00000800 __rt_fc_stack
1c004fa6 g     F .text	0000014c smoothHistogram
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c00082a g     F .text	0000000e jpeg_encoder_process_async
1c007b38 g     F .text	000000bc pi_i2c_read_async
1c001eba g       .text	00000000 __rt_bridge_enqueue_event
1c009a62 g     F .text	00000ab6 _prf
1c00231a g       .text	00000000 __pos_spim_receive_handle_temp_buffer
1c0008c8 g     F .text	0000000e jpeg_encoder_stop
10000020 g       .l1cluster_g	00000000 _libgomp_start
1c001bde g     F .text	000001e8 Dct8x8
1c0026c0 g     F .text	0000032e .hidden __umoddi3
1c005838 g     F .text	0000000c pi_transport_open
1c006aca g     F .text	000000f2 __rt_timer_handler
1c00799e g     F .text	00000036 pi_cpi_capture_async
1c00c394 g     O .bss	00000004 __rt_alloc_l2
1c007bf4 g     F .text	00000024 pi_i2c_read
1b001420 g       .stack	00000000 stack
1c002384 g     F .text	0000033c .hidden __udivdi3
1c00550a g     F .text	00000158 __himax_open
1c008b62 g     F .text	00000076 pi_spi_copy_async
1c009890 g     F .text	0000000a abort
1c006574 g     F .text	0000001a rt_event_get
1c00c3a0 g     O .bss	00000008 __rt_freq_domains
0000001c g       *ABS*	00000000 _l1_preload_size
1c001e8a g       .text	00000000 _init
1c008d02 g     F .text	0000004c pos_spim_receive_handle_temp_buffer
1c002246 g       .text	00000000 __rt_udma_handle_copy
1c000886 g     F .text	00000020 jpeg_encoder_open
1c00c3d8 g       .bss	00000000 _bss_end
1c00b468  w    O .data	00000010 __rt_padframe_hyper
1c006380 g     F .text	0000001e __rt_bridge_set_available
1c00a954 g       .text	00000000 __rt_dma_2d
1c0008d6 g     F .text	fffffffe jpeg_encoder_close
1c00a7d8 g       .text	00000000 __rt_pe_start
1c00c39c g     O .bss	00000004 first_delayed
1c008058 g     F .text	0000024e __rt_spi_handle_repeat
1c005856 g     F .text	00000034 pi_transport_send_header
000003dc g     O .data_tiny_fc	00000004 __rt_rtc_init_done
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c007846 g     F .text	0000004a pi_cluster_send_task_to_cl
1c007092 g     F .text	000000ca __rt_pmu_cluster_power_up
1b000c20 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c00a66a g     F .text	0000008e __rt_uart_open
1c00033a g     F .text	00000042 frame_streamer_send
1c00614c g     F .text	00000022 __rt_utils_init
1c00774c g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c00b458  w    O .data	00000010 __rt_padframe_default
1c0097d8 g     F .text	0000001a fputc_locked
1c007b14 g     F .text	00000024 pi_i2c_write
1c006944 g     F .text	0000000c pi_cl_l1_free
1c0009c8 g     F .text	00000014 jpeg_encoder_footer
1c00a6f8 g     F .text	0000004e rt_uart_close
1c001de8 g       .text	00000000 __rt_i2c_step2
1c0039dc g     F .text	00000590 cl_cannyOperator
1c008f8c g     F .text	00000018 pi_gpio_pin_notif_clear
1c0066f8 g     F .text	0000004c rt_user_free
1c0000a0 g     F .text	00000016 frame_streamer_conf_init
1c0058d4 g     F .text	00000002 __nina_w10_close
1c00a9e4 g       .init_array	00000000 __CTOR_LIST__
1c006cf0 g     F .text	00000056 __rt_periph_wait_event
1c008c56 g     F .text	00000066 __pi_handle_waiting_copy
1c006da4 g     F .text	0000004a rt_freq_set_and_get
1c005d42 g     F .text	00000006 semihost_write0
1c00043a g     F .text	000001c6 process_du
1c005fbe  w    F .text	00000002 illegal_insn_handler_c
0000038c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c007578 g     F .text	00000070 __rt_cluster_push_fc_event
00000370 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c00a7d8 g       .text	00000000 __cluster_text_start
1c000080 g       .vectors	00000000 _start
1c006690 g     F .text	00000020 rt_user_alloc_init
00000000 g       *ABS*	00000000 __rt_config
00000384 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c001dc6 g       .text	00000000 __rt_i2c_handle_tx_copy
1c0086ce g     F .text	0000019c pos_spim_send_enqueue_transfer
1c00c3d8 g       .bss	00000000 _l1_preload_start_inL2
1c00616e g     F .text	00000032 __rt_fc_lock
10000020 g       .l1cluster_g	00000000 __l1_heap_start
1c00534e g     F .text	00000002 __camera_conf_init
1c0064e8 g     F .text	00000018 __rt_wait_event_prepare_blocking
1c002356 g       .text	00000000 __pos_spim_handle_copy_eot
1c0062c4 g     F .text	00000072 __rt_bridge_handle_notif
1c0021dc g       .text	00000000 __rt_soc_evt_no_udma
1000001c g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
1c008fb2 g     F .text	00000050 pi_gpio_mask_configure
00000390 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c0065b0 g     F .text	00000024 rt_event_push
1c0063be g     F .text	0000001e __rt_bridge_clear_notif
1c006934 g     F .text	0000000a pi_cl_l2_free
1c004ef8 g     F .text	000000ae findPeaks
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c00b4a0 g     O .data	000000c0 __hal_debug_struct
1c006772 g     F .text	00000034 __rt_alloc_cluster_req
1c008d4e g     F .text	00000026 pi_spi_conf_init
1c0090d8 g     F .text	0000000c __rt_udma_channel_reg_data
1c006a3e g     F .text	0000008c __rt_time_init
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c001e1e g       .text	00000000 _entry
1c00853c g     F .text	00000192 pi_spi_transfer_async
1c006638 g     F .text	0000002a __rt_wait_event
1c00063e g     F .text	000001ec jpeg_encoder_process_fc
1c007e6c g     F .text	000001ec pi_spi_open
1c0071a0 g     F .text	000000bc __rt_pmu_init
1c004884 g     F .text	000000bc pEnqueue
1c0041fc g     F .text	00000302 edgeSegmentation
1c004c7c g     F .text	0000003a pop
1c00026c g     F .text	000000ce frame_streamer_send_async
1c005fc0 g     F .text	00000050 __rt_handle_illegal_instr
1c0083fe g     F .text	0000013e pi_spi_receive_async
1c009606 g     F .text	00000010 memset
1c002edc g     F .text	0000001a main
00000308 g     O .data_tiny_fc	00000050 __rt_udma_channels
1c00726e g     F .text	00000002 __rt_fll_deinit
1c002222 g       .text	00000000 udma_event_handler_end
1c00c398 g     O .bss	00000004 __rt_alloc_fc_tcdm
1c0091ee g     F .text	0000000a __rt_himax_init
1c00620c g     F .text	00000036 __rt_fc_cluster_unlock
00000368 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c00989a g     F .text	00000072 __rt_io_init
1c004876 g     F .text	0000000e pQueueIsEmpty
1c00b478  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c00b56c  w    O .data	00000004 __rt_platform
1c001b3e g     F .text	00000076 __jpeg_encoder_start_cl
1c00aa30 g       .init_array	00000000 __CTOR_END__
1c008ef0 g     F .text	00000038 pi_gpio_pin_read
1c008f28 g     F .text	00000064 pi_gpio_pin_notif_configure
1c0044fe g     F .text	00000194 cl_maskErosion
1c005d48 g     F .text	00000006 semihost_exit
1c002342 g       .text	00000000 __pos_spim_send_enqueue_transfer
1c00aa30 g       .fini_array	00000000 __DTOR_LIST__
1c0064c0 g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c001e06 g       .text	00000000 __rt_i2c_step3
1c00226e g       .text	00000000 pwm_event_handler
1c0088c0 g     F .text	000001e0 pos_spim_receive_enqueue_transfer
00000398 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c0097f2 g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c006f0e g     F .text	000000e0 SetFllFrequency
1c007270 g     F .text	00000002 __rt_flls_constructor
1c00699e g     F .text	0000007a rt_event_push_delayed
1c005662 g     F .text	000000d2 __himax_reopen
1c001e8a g       .text	00000000 _fini
1c00b358 g     O .data	0000001c std_dc_luminance_huff
1c005d8a g     F .text	00000018 bsp_himax_conf_init
1c006662 g     F .text	00000018 rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c00aa3c g     O .rodata	00000100 .hidden __clz_tab
00000378 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c008cbc g     F .text	00000046 pos_spim_handle_copy_eot
1c005db0 g     F .text	0000000a bsp_nina_w10_conf_init
1c00a930 g       .text	00000000 __rt_set_slave_stack
1c008fa4 g     F .text	0000000e pi_gpio_pin_notif_get
1c00693e g     F .text	00000006 pi_cl_l1_malloc
1c00668e g     F .text	00000002 pi_task_push_delayed_us
1c00b560  w    O .data	00000004 __rt_fc_stack_size
1c002172 g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
000003a8 g     O .data_tiny_fc	00000034 dev_rtc
1c0078c4 g     F .text	0000001e pi_pad_init
1c0058d6 g     F .text	00000004 __nina_w10_receive_async
1c001b06 g     F .text	00000038 __jpeg_encoder_process_cl
1c0059ea g     F .text	0000007c __nina_w10_send_async
1c001f7e g       .text	00000000 __rt_call_external_c_function
1c0061a0 g     F .text	00000034 __rt_fc_unlock
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c008dce g     F .text	00000086 __pi_gpio_handler
1c0000b6 g     F .text	000001b6 frame_streamer_open
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c0063dc g     F .text	0000003c __rt_bridge_printf_flush
1c00b564  w    O .data	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c00c08c g       .data	00000000 _edata
00000000 g       *ABS*	00000000 __ZERO
1c006d46 g     F .text	0000005e __rt_periph_init
1c00921c g     F .text	00000012 __rt_spim_init
1c006336 g     F .text	0000004a __rt_bridge_check_connection
1c007660 g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c005f6e g     F .text	00000004 pi_open_from_conf
1c000600 g     F .text	0000002c rgb_to_yuv
1c002292 g       .text	00000000 __pi_spim_handle_eot
ffffffff g       *ABS*	00000000 pulp__FC
1c00919c g     F .text	00000052 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c00c3b0 g     O .bss	00000028 __rt_fc_cluster_data
1c00981a g     F .text	00000076 exit
1c0053d6 g     F .text	00000018 __himax_reg_set
1c00667a g     F .text	00000014 __rt_event_sched_init
0000039c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c002032 g       .text	00000000 udma_event_handler
1c007546 g     F .text	00000032 pi_cluster_close
1c0058d0 g     F .text	00000004 __nina_w10_connect
1c007d30 g     F .text	00000014 pi_i2c_conf_init
000003a4 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c00611c g     F .text	00000030 __rt_cbsys_exec
1c00692c g     F .text	00000008 pi_cl_l2_malloc
0000ffe0 g       .l1cluster_g	00000000 __l1_heap_size
1c006e7e g     F .text	00000090 __rt_pmu_cluster_power_down
0000036c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000be8 g     O .stack	00000004 __rt_debug_config_trace
1c00c35c  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c00bd0c g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c0095f0 g     F .text	00000016 strlen
1c009038 g     F .text	00000028 rt_padframe_set
1c007890 g     F .text	00000034 pi_pad_set_function
1c00c3a8 g     O .bss	00000004 __rt_wakeup_use_fast
1c00232e g       .text	00000000 __pos_spim_receive_enqueue_transfer
1c0057da g     F .text	0000002c pi_himax_conf_init
1c000636 g     F .text	00000008 jpeg_encoder_process_status
1c0008a6 g     F .text	00000022 jpeg_encoder_start
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c00964c g     F .text	0000001a strchr
1c006418 g     F .text	00000074 __rt_bridge_req_shutdown
1c0067d4 g     F .text	00000034 __rt_free_cluster_req
1c00a65a g     F .text	00000010 rt_uart_conf_init
1c009002 g     F .text	00000036 pi_gpio_pin_configure
1c0008e6 g     F .text	000000e2 jpeg_encoder_header
1c002b68 g     F .text	00000374 main_task
1c00a9e4 g       .text	00000000 __cluster_text_end
1c0022f6 g       .text	00000000 __rt_spim_handle_tx_copy
1c00a77a g     F .text	0000005c __rt_uart_init
1c007956 g     F .text	00000048 pi_cpi_close
1c00c3f4 g       *ABS*	00000000 __l2_end
1c0076f0 g     F .text	0000005c rt_cluster_mount
1c00920a g     F .text	00000012 __rt_rtc_init
1c004ad4 g     F .text	000001a8 push
1c00a746 g     F .text	00000034 rt_uart_cluster_write
1c005342 g     F .text	0000000c pi_camera_open
1c000098 g       .vectors	00000000 __rt_semihosting_call
1b000bec g     O .stack	00000004 __rt_debug_config
1c007272 g     F .text	00000006 __rt_fll_set_freq
1c0060de g     F .text	0000003e __rt_cbsys_add
1c00b57c g     O .data	00000774 JpegConstants
1c0075e8 g     F .text	0000003c __rt_cluster_new
1c009666 g     F .text	0000005e __rt_putc_debug_bridge
1c00a9e4 g       .text	00000000 _endtext
00000374 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
ffffffff g       *ABS*	00000000 pulp__L1FC
1c0078e2 g     F .text	0000000a pi_cpi_conf_init
1c0037fa g     F .text	000001d4 cl_vectorial_gaussianFilter
1c00bd10 g     O .data	00000008 FllsFrequency
1c00b374 g     O .data	000000b2 std_ac_luminance_huff
00000030 g     O .data_tiny_fc	00000280 periph_channels
1c005aee g     F .text	000001ac __nina_w10_open



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	59f0106f          	j	1c001e1e <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	7410106f          	j	1c001fc4 <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	b4a0                	fsd	fs0,104(s1)
1c000092:	1c00                	addi	s0,sp,560

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <frame_streamer_conf_init>:

int frame_streamer_conf_init(struct frame_streamer_conf *conf)
{
  conf->transport = NULL;
  conf->format = FRAME_STREAMER_FORMAT_RAW;
  conf->name = "None";
1c0000a0:	1c00b7b7          	lui	a5,0x1c00b
1c0000a4:	fbc78793          	addi	a5,a5,-68 # 1c00afbc <__clz_tab+0x580>
  conf->transport = NULL;
1c0000a8:	00052023          	sw	zero,0(a0)
  conf->format = FRAME_STREAMER_FORMAT_RAW;
1c0000ac:	00052223          	sw	zero,4(a0)
  conf->name = "None";
1c0000b0:	c95c                	sw	a5,20(a0)
  return 0;
}
1c0000b2:	4501                	li	a0,0
1c0000b4:	8082                	ret

1c0000b6 <frame_streamer_open>:
}



frame_streamer_t *frame_streamer_open(struct frame_streamer_conf *conf)
{
1c0000b6:	7179                	addi	sp,sp,-48
1c0000b8:	d226                	sw	s1,36(sp)
1c0000ba:	84aa                	mv	s1,a0
  frame_streamer_t *streamer = pmsis_l2_malloc(sizeof(frame_streamer_t));
1c0000bc:	08400513          	li	a0,132
{
1c0000c0:	d422                	sw	s0,40(sp)
1c0000c2:	d606                	sw	ra,44(sp)
1c0000c4:	d04a                	sw	s2,32(sp)
1c0000c6:	ce4e                	sw	s3,28(sp)
  frame_streamer_t *streamer = pmsis_l2_malloc(sizeof(frame_streamer_t));
1c0000c8:	089060ef          	jal	ra,1c006950 <pi_l2_malloc>
1c0000cc:	842a                	mv	s0,a0
  if (streamer == NULL) return NULL;
1c0000ce:	cd3d                	beqz	a0,1c00014c <frame_streamer_open+0x96>

  streamer->transport = conf->transport;
1c0000d0:	4088                	lw	a0,0(s1)
  streamer->format = conf->format;
1c0000d2:	40dc                	lw	a5,4(s1)
  streamer->width = conf->width;
1c0000d4:	4494                	lw	a3,8(s1)
  streamer->height = conf->height;
1c0000d6:	44d8                	lw	a4,12(s1)
  streamer->transport = conf->transport;
1c0000d8:	c008                	sw	a0,0(s0)
  streamer->format = conf->format;
1c0000da:	c05c                	sw	a5,4(s0)
  streamer->width = conf->width;
1c0000dc:	08d42023          	sw	a3,128(s0)
  streamer->height = conf->height;
1c0000e0:	dc78                	sw	a4,124(s0)

  if (conf->format == FRAME_STREAMER_FORMAT_JPEG)
1c0000e2:	0617ad63          	p.beqimm	a5,1,1c00015c <frame_streamer_open+0xa6>
    streamer->jpeg = __frame_streamer_open_jpeg_encoder(streamer);
    if (streamer->jpeg == NULL)
      goto error0;
  }

  streamer->channel = pi_transport_connect(streamer->transport, NULL, NULL);
1c0000e6:	4601                	li	a2,0
1c0000e8:	4581                	li	a1,0
1c0000ea:	75a050ef          	jal	ra,1c005844 <pi_transport_connect>
1c0000ee:	c408                	sw	a0,8(s0)
  if (streamer->channel == -1)
1c0000f0:	13f52063          	p.beqimm	a0,-1,1c000210 <frame_streamer_open+0x15a>
  streamer->req.header.packet_size = sizeof(frame_streamer_open_req_full_t) - sizeof(struct pi_transport_header);

  streamer->req.req.type = conf->format;
  streamer->req.req.channel = streamer->channel;
  streamer->req.req.width = conf->width;
  streamer->req.req.height = conf->height;
1c0000f4:	44d4                	lw	a3,12(s1)
  streamer->req.req.depth = conf->depth;
1c0000f6:	4898                	lw	a4,16(s1)
  streamer->req.req.type = conf->format;
1c0000f8:	40cc                	lw	a1,4(s1)
  streamer->req.req.width = conf->width;
1c0000fa:	4490                	lw	a2,8(s1)
  streamer->req.header.channel = TRANSPORT_SERVICE_FRAME_STREAMER;
1c0000fc:	4805                	li	a6,1
1c0000fe:	48dc                	lw	a5,20(s1)
1c000100:	01042c23          	sw	a6,24(s0)
  streamer->req.header.packet_size = sizeof(frame_streamer_open_req_full_t) - sizeof(struct pi_transport_header);
1c000104:	05400813          	li	a6,84
  streamer->req.req.height = conf->height;
1c000108:	d814                	sw	a3,48(s0)
  streamer->req.req.depth = conf->depth;
1c00010a:	d858                	sw	a4,52(s0)
  streamer->req.header.packet_size = sizeof(frame_streamer_open_req_full_t) - sizeof(struct pi_transport_header);
1c00010c:	01042e23          	sw	a6,28(s0)
  streamer->req.req.type = conf->format;
1c000110:	d04c                	sw	a1,36(s0)
  streamer->req.req.channel = streamer->channel;
1c000112:	d408                	sw	a0,40(s0)
  streamer->req.req.width = conf->width;
1c000114:	d450                	sw	a2,44(s0)
1c000116:	03840693          	addi	a3,s0,56
1c00011a:	03f4d0fb          	lp.setupi	x1,63,1c00012c <frame_streamer_open+0x76>

  for (int i=0; i<NAME_LENGTH-1; i++)
  {
    streamer->req.req.name[i] = conf->name[i];
1c00011e:	0007c603          	lbu	a2,0(a5)
1c000122:	00c680ab          	p.sb	a2,1(a3!)
    if (conf->name[i] == 0)
1c000126:	0017c60b          	p.lbu	a2,1(a5!)
1c00012a:	c211                	beqz	a2,1c00012e <frame_streamer_open+0x78>
1c00012c:	0001                	nop
      break;
  }
  streamer->req.req.name[NAME_LENGTH-1] = 0;

  if (pi_transport_send(streamer->transport, (void *)&streamer->req, sizeof(streamer->req)))
1c00012e:	4008                	lw	a0,0(s0)
  streamer->req.req.name[NAME_LENGTH-1] = 0;
1c000130:	06040ba3          	sb	zero,119(s0)
  if (pi_transport_send(streamer->transport, (void *)&streamer->req, sizeof(streamer->req)))
1c000134:	06000613          	li	a2,96
1c000138:	01840593          	addi	a1,s0,24
1c00013c:	74e050ef          	jal	ra,1c00588a <pi_transport_send>
1c000140:	0c051863          	bnez	a0,1c000210 <frame_streamer_open+0x15a>
    goto error2;

  if (conf->format == FRAME_STREAMER_FORMAT_JPEG)
1c000144:	0044a903          	lw	s2,4(s1)
1c000148:	06192263          	p.beqimm	s2,1,1c0001ac <frame_streamer_open+0xf6>
    __frame_streamer_close_jpeg_encoder(streamer->jpeg);

error0:
  pmsis_l2_malloc_free(streamer, sizeof(frame_streamer_t));
  return NULL;
}
1c00014c:	8522                	mv	a0,s0
1c00014e:	50b2                	lw	ra,44(sp)
1c000150:	5422                	lw	s0,40(sp)
1c000152:	5492                	lw	s1,36(sp)
1c000154:	5902                	lw	s2,32(sp)
1c000156:	49f2                	lw	s3,28(sp)
1c000158:	6145                	addi	sp,sp,48
1c00015a:	8082                	ret
  frame_streamer_jpeg_t *jpeg = pmsis_l2_malloc(sizeof(frame_streamer_jpeg_t));
1c00015c:	10c00513          	li	a0,268
1c000160:	7f0060ef          	jal	ra,1c006950 <pi_l2_malloc>
1c000164:	892a                	mv	s2,a0
  if (jpeg == NULL)
1c000166:	10050063          	beqz	a0,1c000266 <frame_streamer_open+0x1b0>
  jpeg_encoder_conf_init(&enc_conf);
1c00016a:	0048                	addi	a0,sp,4
1c00016c:	76c000ef          	jal	ra,1c0008d8 <jpeg_encoder_conf_init>
  enc_conf.width = streamer->width;
1c000170:	08042783          	lw	a5,128(s0)
  if (jpeg_encoder_open(enc, &enc_conf))
1c000174:	004c                	addi	a1,sp,4
1c000176:	854a                	mv	a0,s2
  enc_conf.width = streamer->width;
1c000178:	c23e                	sw	a5,4(sp)
  enc_conf.height = streamer->height;
1c00017a:	5c7c                	lw	a5,124(s0)
  enc_conf.flags = 0;
1c00017c:	c602                	sw	zero,12(sp)
  enc_conf.height = streamer->height;
1c00017e:	c43e                	sw	a5,8(sp)
  if (jpeg_encoder_open(enc, &enc_conf))
1c000180:	2719                	jal	1c000886 <jpeg_encoder_open>
1c000182:	0c051d63          	bnez	a0,1c00025c <frame_streamer_open+0x1a6>
  if (jpeg_encoder_start(enc))
1c000186:	854a                	mv	a0,s2
1c000188:	2f39                	jal	1c0008a6 <jpeg_encoder_start>
1c00018a:	0c051763          	bnez	a0,1c000258 <frame_streamer_open+0x1a2>
  jpeg->bitstream.size = JPEG_BITSTREAM_SIZE;
1c00018e:	40000793          	li	a5,1024
1c000192:	10f92223          	sw	a5,260(s2)
  jpeg->bitstream.data = pmsis_l2_malloc(JPEG_BITSTREAM_SIZE);
1c000196:	40000513          	li	a0,1024
1c00019a:	7b6060ef          	jal	ra,1c006950 <pi_l2_malloc>
1c00019e:	0ea92823          	sw	a0,240(s2)
  if (jpeg->bitstream.data == NULL)
1c0001a2:	c94d                	beqz	a0,1c000254 <frame_streamer_open+0x19e>
1c0001a4:	4008                	lw	a0,0(s0)
    streamer->jpeg = __frame_streamer_open_jpeg_encoder(streamer);
1c0001a6:	07242c23          	sw	s2,120(s0)
1c0001aa:	bf35                	j	1c0000e6 <frame_streamer_open+0x30>
    if (jpeg_encoder_header(&streamer->jpeg->encoder, &streamer->jpeg->bitstream, &header_size))
1c0001ac:	5c28                	lw	a0,120(s0)
1c0001ae:	0050                	addi	a2,sp,4
1c0001b0:	0ec50593          	addi	a1,a0,236
1c0001b4:	732000ef          	jal	ra,1c0008e6 <jpeg_encoder_header>
1c0001b8:	ed21                	bnez	a0,1c000210 <frame_streamer_open+0x15a>
    streamer->header.info = 1;
1c0001ba:	01242a23          	sw	s2,20(s0)
    if (pi_transport_send_header(streamer->transport, &streamer->header, streamer->channel, header_size))
1c0001be:	4692                	lw	a3,4(sp)
1c0001c0:	4410                	lw	a2,8(s0)
1c0001c2:	4008                	lw	a0,0(s0)
1c0001c4:	00c40993          	addi	s3,s0,12
1c0001c8:	85ce                	mv	a1,s3
1c0001ca:	68c050ef          	jal	ra,1c005856 <pi_transport_send_header>
1c0001ce:	e129                	bnez	a0,1c000210 <frame_streamer_open+0x15a>
    if (pi_transport_send(streamer->transport, streamer->jpeg->bitstream.data, header_size))
1c0001d0:	5c3c                	lw	a5,120(s0)
1c0001d2:	4612                	lw	a2,4(sp)
1c0001d4:	4008                	lw	a0,0(s0)
1c0001d6:	0f07a583          	lw	a1,240(a5)
1c0001da:	6b0050ef          	jal	ra,1c00588a <pi_transport_send>
1c0001de:	e90d                	bnez	a0,1c000210 <frame_streamer_open+0x15a>
    if (jpeg_encoder_footer(&streamer->jpeg->encoder, &streamer->jpeg->bitstream, &header_size))
1c0001e0:	5c28                	lw	a0,120(s0)
1c0001e2:	0050                	addi	a2,sp,4
1c0001e4:	0ec50593          	addi	a1,a0,236
1c0001e8:	7e0000ef          	jal	ra,1c0009c8 <jpeg_encoder_footer>
1c0001ec:	e115                	bnez	a0,1c000210 <frame_streamer_open+0x15a>
    streamer->header.info = 1;
1c0001ee:	01242a23          	sw	s2,20(s0)
    if (pi_transport_send_header(streamer->transport, &streamer->header, streamer->channel, header_size))
1c0001f2:	4692                	lw	a3,4(sp)
1c0001f4:	4410                	lw	a2,8(s0)
1c0001f6:	4008                	lw	a0,0(s0)
1c0001f8:	85ce                	mv	a1,s3
1c0001fa:	65c050ef          	jal	ra,1c005856 <pi_transport_send_header>
1c0001fe:	e909                	bnez	a0,1c000210 <frame_streamer_open+0x15a>
    if (pi_transport_send(streamer->transport, streamer->jpeg->bitstream.data, header_size))
1c000200:	5c3c                	lw	a5,120(s0)
1c000202:	4612                	lw	a2,4(sp)
1c000204:	4008                	lw	a0,0(s0)
1c000206:	0f07a583          	lw	a1,240(a5)
1c00020a:	680050ef          	jal	ra,1c00588a <pi_transport_send>
1c00020e:	dd1d                	beqz	a0,1c00014c <frame_streamer_open+0x96>
  if (conf->format == FRAME_STREAMER_FORMAT_JPEG)
1c000210:	40dc                	lw	a5,4(s1)
1c000212:	0217a063          	p.beqimm	a5,1,1c000232 <frame_streamer_open+0x17c>
  pmsis_l2_malloc_free(streamer, sizeof(frame_streamer_t));
1c000216:	8522                	mv	a0,s0
1c000218:	08400593          	li	a1,132
1c00021c:	742060ef          	jal	ra,1c00695e <pi_l2_free>
  return NULL;
1c000220:	4401                	li	s0,0
}
1c000222:	8522                	mv	a0,s0
1c000224:	50b2                	lw	ra,44(sp)
1c000226:	5422                	lw	s0,40(sp)
1c000228:	5492                	lw	s1,36(sp)
1c00022a:	5902                	lw	s2,32(sp)
1c00022c:	49f2                	lw	s3,28(sp)
1c00022e:	6145                	addi	sp,sp,48
1c000230:	8082                	ret
    __frame_streamer_close_jpeg_encoder(streamer->jpeg);
1c000232:	5c24                	lw	s1,120(s0)
  pmsis_l2_malloc_free(jpeg->bitstream.data, JPEG_BITSTREAM_SIZE);
1c000234:	40000593          	li	a1,1024
1c000238:	0f04a503          	lw	a0,240(s1)
1c00023c:	722060ef          	jal	ra,1c00695e <pi_l2_free>
  jpeg_encoder_stop(enc);
1c000240:	8526                	mv	a0,s1
1c000242:	2559                	jal	1c0008c8 <jpeg_encoder_stop>
  jpeg_encoder_close(enc);
1c000244:	8526                	mv	a0,s1
1c000246:	2d41                	jal	1c0008d6 <jpeg_encoder_close>
  pmsis_l2_malloc_free(jpeg, sizeof(frame_streamer_jpeg_t));
1c000248:	10c00593          	li	a1,268
1c00024c:	8526                	mv	a0,s1
1c00024e:	710060ef          	jal	ra,1c00695e <pi_l2_free>
1c000252:	b7d1                	j	1c000216 <frame_streamer_open+0x160>
  jpeg_encoder_stop(enc);
1c000254:	854a                	mv	a0,s2
1c000256:	2d8d                	jal	1c0008c8 <jpeg_encoder_stop>
  jpeg_encoder_close(enc);
1c000258:	854a                	mv	a0,s2
1c00025a:	2db5                	jal	1c0008d6 <jpeg_encoder_close>
  pmsis_l2_malloc_free(jpeg, sizeof(frame_streamer_jpeg_t));
1c00025c:	10c00593          	li	a1,268
1c000260:	854a                	mv	a0,s2
1c000262:	6fc060ef          	jal	ra,1c00695e <pi_l2_free>
    streamer->jpeg = __frame_streamer_open_jpeg_encoder(streamer);
1c000266:	06042c23          	sw	zero,120(s0)
1c00026a:	b775                	j	1c000216 <frame_streamer_open+0x160>

1c00026c <frame_streamer_send_async>:

int frame_streamer_send_async(frame_streamer_t *streamer, pi_buffer_t *buffer, pi_task_t *task)
{
  uint8_t *frame = buffer->data;

  if (streamer->format == FRAME_STREAMER_FORMAT_RAW)
1c00026c:	415c                	lw	a5,4(a0)
{
1c00026e:	7179                	addi	sp,sp,-48
1c000270:	d422                	sw	s0,40(sp)
1c000272:	d04a                	sw	s2,32(sp)
1c000274:	cc52                	sw	s4,24(sp)
1c000276:	d606                	sw	ra,44(sp)
1c000278:	d226                	sw	s1,36(sp)
1c00027a:	ce4e                	sw	s3,28(sp)
1c00027c:	842a                	mv	s0,a0
1c00027e:	892e                	mv	s2,a1
1c000280:	8a32                	mv	s4,a2
  if (streamer->format == FRAME_STREAMER_FORMAT_RAW)
1c000282:	cbb1                	beqz	a5,1c0002d6 <frame_streamer_send_async+0x6a>
      return -1;

    if (pi_transport_send_async(streamer->transport, buffer->data, size, task))
      return -1;
  }
  else if (streamer->format == FRAME_STREAMER_FORMAT_JPEG)
1c000284:	0217bf63          	p.bneimm	a5,1,1c0002c2 <frame_streamer_send_async+0x56>
1c000288:	00c50993          	addi	s3,a0,12
1c00028c:	a811                	j	1c0002a0 <frame_streamer_send_async+0x34>
      streamer->header.info = err ? 0 : 1;

      if (pi_transport_send_header(streamer->transport, &streamer->header, streamer->channel, size))
        return -1;

      if (pi_transport_send(streamer->transport, streamer->jpeg->bitstream.data, size))
1c00028e:	5c3c                	lw	a5,120(s0)
1c000290:	4632                	lw	a2,12(sp)
1c000292:	4008                	lw	a0,0(s0)
1c000294:	0f07a583          	lw	a1,240(a5)
1c000298:	5f2050ef          	jal	ra,1c00588a <pi_transport_send>
1c00029c:	e11d                	bnez	a0,1c0002c2 <frame_streamer_send_async+0x56>
        return -1;

      if (err == 0)
1c00029e:	c8a5                	beqz	s1,1c00030e <frame_streamer_send_async+0xa2>
      int err = jpeg_encoder_process(&streamer->jpeg->encoder, buffer, &streamer->jpeg->bitstream, &size);
1c0002a0:	5c28                	lw	a0,120(s0)
1c0002a2:	0074                	addi	a3,sp,12
1c0002a4:	85ca                	mv	a1,s2
1c0002a6:	0ec50613          	addi	a2,a0,236
1c0002aa:	2379                	jal	1c000838 <jpeg_encoder_process>
1c0002ac:	84aa                	mv	s1,a0
      if (pi_transport_send_header(streamer->transport, &streamer->header, streamer->channel, size))
1c0002ae:	46b2                	lw	a3,12(sp)
1c0002b0:	4410                	lw	a2,8(s0)
1c0002b2:	4008                	lw	a0,0(s0)
      streamer->header.info = err ? 0 : 1;
1c0002b4:	0014b793          	seqz	a5,s1
      if (pi_transport_send_header(streamer->transport, &streamer->header, streamer->channel, size))
1c0002b8:	85ce                	mv	a1,s3
      streamer->header.info = err ? 0 : 1;
1c0002ba:	c85c                	sw	a5,20(s0)
      if (pi_transport_send_header(streamer->transport, &streamer->header, streamer->channel, size))
1c0002bc:	59a050ef          	jal	ra,1c005856 <pi_transport_send_header>
1c0002c0:	d579                	beqz	a0,1c00028e <frame_streamer_send_async+0x22>
        return -1;
1c0002c2:	54fd                	li	s1,-1
  {
    return -1;
  }

  return 0;
}
1c0002c4:	50b2                	lw	ra,44(sp)
1c0002c6:	5422                	lw	s0,40(sp)
1c0002c8:	8526                	mv	a0,s1
1c0002ca:	5902                	lw	s2,32(sp)
1c0002cc:	5492                	lw	s1,36(sp)
1c0002ce:	49f2                	lw	s3,28(sp)
1c0002d0:	4a62                	lw	s4,24(sp)
1c0002d2:	6145                	addi	sp,sp,48
1c0002d4:	8082                	ret
  pi_buffer_format_e format;
} pi_buffer_t;

static inline int pi_buffer_size(pi_buffer_t *buffer)
{
  return buffer->width*buffer->height*buffer->channels;
1c0002d6:	4584                	lw	s1,8(a1)
1c0002d8:	45d8                	lw	a4,12(a1)
1c0002da:	499c                	lw	a5,16(a1)
    if (pi_transport_send_header(streamer->transport, &streamer->header, streamer->channel, size))
1c0002dc:	4510                	lw	a2,8(a0)
1c0002de:	02e484b3          	mul	s1,s1,a4
1c0002e2:	4108                	lw	a0,0(a0)
1c0002e4:	00c40593          	addi	a1,s0,12
1c0002e8:	02f484b3          	mul	s1,s1,a5
1c0002ec:	86a6                	mv	a3,s1
1c0002ee:	568050ef          	jal	ra,1c005856 <pi_transport_send_header>
1c0002f2:	f961                	bnez	a0,1c0002c2 <frame_streamer_send_async+0x56>
    if (pi_transport_send_async(streamer->transport, buffer->data, size, task))
1c0002f4:	4008                	lw	a0,0(s0)
};

static inline int pi_transport_send_async(struct pi_device *device, void *buffer, size_t size, pi_task_t *task)
{
  pi_transport_api_t *api = (pi_transport_api_t *)device->api;
  return api->send_async(device, buffer, size, task);
1c0002f6:	00492583          	lw	a1,4(s2)
1c0002fa:	8626                	mv	a2,s1
1c0002fc:	411c                	lw	a5,0(a0)
1c0002fe:	86d2                	mv	a3,s4
1c000300:	479c                	lw	a5,8(a5)
1c000302:	9782                	jalr	a5
1c000304:	00a03533          	snez	a0,a0
1c000308:	40a004b3          	neg	s1,a0
1c00030c:	bf65                	j	1c0002c4 <frame_streamer_send_async+0x58>

#if defined(__OPTIMIZE__) && defined(CORE_PULP_BUILTINS) && !defined(__LLVM__)

static inline unsigned int hal_spr_read_then_clr(unsigned int reg, unsigned int val)
{
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00030e:	30047773          	csrrci	a4,mstatus,8

static inline void __rt_event_enqueue(rt_event_t *event)
{
  rt_event_sched_t *sched = rt_event_internal_sched();
  event->next = NULL;
  if (sched->first) {
1c000312:	01c02683          	lw	a3,28(zero) # 1c <_l1_preload_size>
  event->next = NULL;
1c000316:	000a2023          	sw	zero,0(s4)
  if (sched->first) {
1c00031a:	ca99                	beqz	a3,1c000330 <frame_streamer_send_async+0xc4>
    sched->last->next = event;
1c00031c:	01c00793          	li	a5,28
1c000320:	43d4                	lw	a3,4(a5)
1c000322:	0146a023          	sw	s4,0(a3)
  } else {
    sched->first = event;
  }
  sched->last = event;
1c000326:	0147a223          	sw	s4,4(a5)
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
}

static inline void hal_spr_write(unsigned int reg, unsigned int val)
{
  __builtin_pulp_spr_write(reg, val);
1c00032a:	30071073          	csrw	mstatus,a4
1c00032e:	bf59                	j	1c0002c4 <frame_streamer_send_async+0x58>
    sched->first = event;
1c000330:	01402e23          	sw	s4,28(zero) # 1c <_l1_preload_size>
1c000334:	01c00793          	li	a5,28
1c000338:	b7fd                	j	1c000326 <frame_streamer_send_async+0xba>

1c00033a <frame_streamer_send>:



int frame_streamer_send(frame_streamer_t *streamer, pi_buffer_t *buffer)
{
1c00033a:	7175                	addi	sp,sp,-144
  return 0;
}

static inline struct pi_task *pi_task_block(struct pi_task *task)
{
  task->id = PI_TASK_NONE_ID;
1c00033c:	4785                	li	a5,1
  pi_task_t task;
  frame_streamer_send_async(streamer, buffer, pi_task_block(&task));
1c00033e:	860a                	mv	a2,sp
1c000340:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
  task->implem.keep = 1;
1c000342:	d43e                	sw	a5,40(sp)
{
1c000344:	c706                	sw	ra,140(sp)
1c000346:	c522                	sw	s0,136(sp)
1c000348:	c326                	sw	s1,132(sp)
  task->arg[0] = (uint32_t)0;
1c00034a:	c202                	sw	zero,4(sp)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c00034c:	00010a23          	sb	zero,20(sp)
  frame_streamer_send_async(streamer, buffer, pi_task_block(&task));
1c000350:	3f31                	jal	1c00026c <frame_streamer_send_async>

#endif

static inline void pi_task_wait_on(struct pi_task *task)
{
  while(!task->done)
1c000352:	01410783          	lb	a5,20(sp)
1c000356:	ef89                	bnez	a5,1c000370 <frame_streamer_send+0x36>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000358:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00035c:	4585                	li	a1,1
1c00035e:	01c00513          	li	a0,28
1c000362:	272060ef          	jal	ra,1c0065d4 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c000366:	30041073          	csrw	mstatus,s0
1c00036a:	01410783          	lb	a5,20(sp)
1c00036e:	d7ed                	beqz	a5,1c000358 <frame_streamer_send+0x1e>
  pi_task_wait_on(&task);
  return 0;
1c000370:	40ba                	lw	ra,140(sp)
1c000372:	442a                	lw	s0,136(sp)
1c000374:	449a                	lw	s1,132(sp)
1c000376:	4501                	li	a0,0
1c000378:	6149                	addi	sp,sp,144
1c00037a:	8082                	ret

1c00037c <AppendBits>:

  //printf("Append 0x%x size %d at %d\n", Val, Size, BitPos);

#if 1

  unsigned char *current = BitStream + BitPos / 8;
1c00037c:	0035d793          	srli	a5,a1,0x3
  int done = BitPos % 8;
1c000380:	f835b5b3          	p.bclr	a1,a1,28,3
  unsigned char *current = BitStream + BitPos / 8;
1c000384:	953e                	add	a0,a0,a5

  if (done)
1c000386:	c9a1                	beqz	a1,1c0003d6 <AppendBits+0x5a>
  {
    int rest = 8 - done;
1c000388:	4721                	li	a4,8
    if (rest > Size)
      rest = Size;
    Size -= rest;
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c00038a:	00054783          	lbu	a5,0(a0)
    int rest = 8 - done;
1c00038e:	8f0d                	sub	a4,a4,a1
1c000390:	04e6c733          	p.min	a4,a3,a4
    Size -= rest;
1c000394:	40e688b3          	sub	a7,a3,a4
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c000398:	00e797b3          	sll	a5,a5,a4
1c00039c:	01165833          	srl	a6,a2,a7
1c0003a0:	0107e7b3          	or	a5,a5,a6
1c0003a4:	0ff7f793          	andi	a5,a5,255

    if (done + rest < 8)
1c0003a8:	95ba                	add	a1,a1,a4
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0003aa:	00f50023          	sb	a5,0(a0)
    if (done + rest < 8)
1c0003ae:	471d                	li	a4,7
1c0003b0:	02b75163          	ble	a1,a4,1c0003d2 <AppendBits+0x56>
    {
      return result;
    }

    if (*current == 0xff)
1c0003b4:	0ff00593          	li	a1,255
1c0003b8:	00150713          	addi	a4,a0,1
1c0003bc:	06b78663          	beq	a5,a1,1c000428 <AppendBits+0xac>
    {
      current++;
      *current = 0x00;
      result += 8;
    }
    current++;
1c0003c0:	853a                	mv	a0,a4
  }
  while (Size >= 8)
1c0003c2:	479d                	li	a5,7
1c0003c4:	0117cd63          	blt	a5,a7,1c0003de <AppendBits+0x62>
1c0003c8:	872a                	mv	a4,a0
    }
    current++;

  }

  if (Size)
1c0003ca:	00088463          	beqz	a7,1c0003d2 <AppendBits+0x56>
  {
    *current = (Val) & 0xff;
1c0003ce:	00c70023          	sb	a2,0(a4)
    *WordStream = gap8_bitinsert_r(*WordStream, Val, Size, BitPos % 8);
    printf("PUT BITS %x current word %2.2x pos %d/%d len %d\n", Val, (unsigned char)*WordStream, BitPos / 8, BitPos % 8, Size);
#endif

  return result;
}
1c0003d2:	8536                	mv	a0,a3
1c0003d4:	8082                	ret
1c0003d6:	88b6                	mv	a7,a3
  while (Size >= 8)
1c0003d8:	479d                	li	a5,7
1c0003da:	ff17d7e3          	ble	a7,a5,1c0003c8 <AppendBits+0x4c>
1c0003de:	ff888793          	addi	a5,a7,-8
1c0003e2:	0037d593          	srli	a1,a5,0x3
1c0003e6:	8846                	mv	a6,a7
    if (*current == 0xff)
1c0003e8:	0ff00313          	li	t1,255
  while (Size >= 8)
1c0003ec:	0585                	addi	a1,a1,1
1c0003ee:	0407c463          	bltz	a5,1c000436 <AppendBits+0xba>
    Size -= 8;
1c0003f2:	1861                	addi	a6,a6,-8
    *current = (Val >> Size) & 0xff;
1c0003f4:	010657b3          	srl	a5,a2,a6
1c0003f8:	872a                	mv	a4,a0
1c0003fa:	0ff7f793          	andi	a5,a5,255
1c0003fe:	00f700ab          	p.sb	a5,1(a4!)
    if (*current == 0xff)
1c000402:	00678a63          	beq	a5,t1,1c000416 <AppendBits+0x9a>
1c000406:	853a                	mv	a0,a4
1c000408:	15fd                	addi	a1,a1,-1
1c00040a:	f5e5                	bnez	a1,1c0003f2 <AppendBits+0x76>
1c00040c:	f838b8b3          	p.bclr	a7,a7,28,3
  if (Size)
1c000410:	fa089fe3          	bnez	a7,1c0003ce <AppendBits+0x52>
1c000414:	bf7d                	j	1c0003d2 <AppendBits+0x56>
      *current = 0x00;
1c000416:	000500a3          	sb	zero,1(a0)
1c00041a:	00250713          	addi	a4,a0,2
      result += 8;
1c00041e:	06a1                	addi	a3,a3,8
1c000420:	853a                	mv	a0,a4
1c000422:	15fd                	addi	a1,a1,-1
1c000424:	f5f9                	bnez	a1,1c0003f2 <AppendBits+0x76>
1c000426:	b7dd                	j	1c00040c <AppendBits+0x90>
1c000428:	00250713          	addi	a4,a0,2
      *current = 0x00;
1c00042c:	000500a3          	sb	zero,1(a0)
      result += 8;
1c000430:	06a1                	addi	a3,a3,8
    current++;
1c000432:	853a                	mv	a0,a4
1c000434:	b779                	j	1c0003c2 <AppendBits+0x46>
1c000436:	4585                	li	a1,1
1c000438:	bf6d                	j	1c0003f2 <AppendBits+0x76>

1c00043a <process_du>:
    const unsigned short *RLE_AC_LUT,
    const unsigned char *RLE_AC_Size_LUT,
    unsigned char *BitStream,
    short int *PrevDU,
    int BitStreamIndex)
{
1c00043a:	715d                	addi	sp,sp,-80
1c00043c:	c4a2                	sw	s0,72(sp)
1c00043e:	c2a6                	sw	s1,68(sp)
1c000440:	c0ca                	sw	s2,64(sp)
1c000442:	de4e                	sw	s3,60(sp)
1c000444:	dc52                	sw	s4,56(sp)
1c000446:	da56                	sw	s5,52(sp)
1c000448:	d462                	sw	s8,40(sp)
1c00044a:	d06a                	sw	s10,32(sp)
1c00044c:	ce6e                	sw	s11,28(sp)
1c00044e:	8d2a                	mv	s10,a0
1c000450:	8db6                	mv	s11,a3
1c000452:	8abe                	mv	s5,a5
1c000454:	c686                	sw	ra,76(sp)
1c000456:	d85a                	sw	s6,48(sp)
1c000458:	d65e                	sw	s7,44(sp)
1c00045a:	d266                	sw	s9,36(sp)
1c00045c:	8a32                	mv	s4,a2
1c00045e:	89ba                	mv	s3,a4
1c000460:	c642                	sw	a6,12(sp)
1c000462:	8c46                	mv	s8,a7
1c000464:	44c6                	lw	s1,80(sp)
1c000466:	4956                	lw	s2,84(sp)
    int i, Pos = 1;
    int BitStreamIndex_param = BitStreamIndex;

    dump_du("before DCT", DU);

    Dct8x8(DU, FDctFactors);
1c000468:	776010ef          	jal	ra,1c001bde <Dct8x8>

    dump_du("after DCU", DU);

    {
        int Vc = DU[0] / QuantLUT[0];
1c00046c:	000d1683          	lh	a3,0(s10)
1c000470:	000dc783          	lbu	a5,0(s11)
1c000474:	02f6c6b3          	div	a3,a3,a5
1c000478:	8436                	mv	s0,a3
        int Vp = PrevDU ? PrevDU[0] : 0;
1c00047a:	00090663          	beqz	s2,1c000486 <process_du+0x4c>
1c00047e:	00091403          	lh	s0,0(s2)
1c000482:	40868433          	sub	s0,a3,s0

        int V = Vc - Vp;
        *PrevDU = Vc;
1c000486:	00d91023          	sh	a3,0(s2)
#endif

static inline void SizeAndIndex(int X, int *SymbolSize, int *SymbolIndex)

{
    int AbsX = (X < 0) ? -X : X;
1c00048a:	040407b3          	p.avg	a5,s0,zero
1c00048e:	01f45693          	srli	a3,s0,0x1f
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000492:	4501                	li	a0,0
1c000494:	cc11                	beqz	s0,1c0004b0 <process_du+0x76>
1c000496:	10079433          	p.fl1	s0,a5
1c00049a:	0405                	addi	s0,s0,1
1c00049c:	4505                	li	a0,1
1c00049e:	00851533          	sll	a0,a0,s0
1c0004a2:	157d                	addi	a0,a0,-1
1c0004a4:	02d50533          	mul	a0,a0,a3
1c0004a8:	00141713          	slli	a4,s0,0x1
1c0004ac:	9aa2                	add	s5,s5,s0
1c0004ae:	99ba                	add	s3,s3,a4
    int Sign = (X < 0);

    *SymbolSize = Size;
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c0004b0:	0686                	slli	a3,a3,0x1
1c0004b2:	4805                	li	a6,1
1c0004b4:	40d80833          	sub	a6,a6,a3
        int RLE_Index, RLE_Size, SymbolSize, SymbolIndex;

        SizeAndIndex(V, &SymbolSize, &SymbolIndex);
        RLE_Index = SymbolSize;
        RLE_Size = RLE_DC_Size_LUT[RLE_Index];
        BitStreamIndex += AppendBits(BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c0004b8:	0009d603          	lhu	a2,0(s3)
1c0004bc:	89aa                	mv	s3,a0
1c0004be:	000ac683          	lbu	a3,0(s5)
1c0004c2:	42f809b3          	p.mac	s3,a6,a5
1c0004c6:	45e6                	lw	a1,88(sp)
1c0004c8:	8526                	mv	a0,s1

    while (Pos < 64)
    {
        int V, ZeroLength;

        for (i = Pos; i < 64; i++)
1c0004ca:	03f00913          	li	s2,63
        BitStreamIndex += AppendBits(BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c0004ce:	357d                	jal	1c00037c <AppendBits>
1c0004d0:	4766                	lw	a4,88(sp)
        BitStreamIndex += AppendBits(BitStream, BitStreamIndex, SymbolIndex, SymbolSize);
1c0004d2:	86a2                	mv	a3,s0
        BitStreamIndex += AppendBits(BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c0004d4:	00a70cb3          	add	s9,a4,a0
        BitStreamIndex += AppendBits(BitStream, BitStreamIndex, SymbolIndex, SymbolSize);
1c0004d8:	85e6                	mv	a1,s9
1c0004da:	864e                	mv	a2,s3
1c0004dc:	8526                	mv	a0,s1
1c0004de:	3d79                	jal	1c00037c <AppendBits>
1c0004e0:	9caa                	add	s9,s9,a0
    int i, Pos = 1;
1c0004e2:	4585                	li	a1,1
1c0004e4:	4985                	li	s3,1
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c0004e6:	40b906b3          	sub	a3,s2,a1
1c0004ea:	00158793          	addi	a5,a1,1
1c0004ee:	04000713          	li	a4,64
1c0004f2:	00ba0533          	add	a0,s4,a1
1c0004f6:	862e                	mv	a2,a1
1c0004f8:	0685                	addi	a3,a3,1
1c0004fa:	10f74163          	blt	a4,a5,1c0005fc <process_du+0x1c2>
1c0004fe:	0116c0fb          	lp.setup	x1,a3,1c000520 <process_du+0xe6>
        {
            V = DU[ZigZagLUT[i]] / QuantLUT[ZigZagLUT[i]];
1c000502:	0015478b          	p.lbu	a5,1(a0!)
1c000506:	00160a93          	addi	s5,a2,1
1c00050a:	00179713          	slli	a4,a5,0x1
1c00050e:	976a                	add	a4,a4,s10
1c000510:	97ee                	add	a5,a5,s11
1c000512:	00071403          	lh	s0,0(a4)
1c000516:	0007c783          	lbu	a5,0(a5)
1c00051a:	02f44433          	div	s0,s0,a5

#ifdef DUMP_DU
           DU2[i] = V;
#endif

            if (V != 0) break;
1c00051e:	e815                	bnez	s0,1c000552 <process_du+0x118>
1c000520:	8656                	mv	a2,s5
            BitStreamIndex += AppendBits(BitStream, BitStreamIndex, RLE_AC_LUT[RLE_Index], RLE_Size);
            BitStreamIndex += AppendBits(BitStream, BitStreamIndex, SymbolIndex, SymbolSize);
        }
        else
        {
            BitStreamIndex += AppendBits(BitStream, BitStreamIndex, EOB, EOB_LEN);
1c000522:	85e6                	mv	a1,s9
1c000524:	4691                	li	a3,4
1c000526:	4629                	li	a2,10
1c000528:	8526                	mv	a0,s1
1c00052a:	3d89                	jal	1c00037c <AppendBits>
1c00052c:	9caa                	add	s9,s9,a0
    }

    dump_du("after quantization", DU2);

    return BitStreamIndex - BitStreamIndex_param;
}
1c00052e:	47e6                	lw	a5,88(sp)
1c000530:	40b6                	lw	ra,76(sp)
1c000532:	4426                	lw	s0,72(sp)
1c000534:	40fc8533          	sub	a0,s9,a5
1c000538:	4496                	lw	s1,68(sp)
1c00053a:	4906                	lw	s2,64(sp)
1c00053c:	59f2                	lw	s3,60(sp)
1c00053e:	5a62                	lw	s4,56(sp)
1c000540:	5ad2                	lw	s5,52(sp)
1c000542:	5b42                	lw	s6,48(sp)
1c000544:	5bb2                	lw	s7,44(sp)
1c000546:	5c22                	lw	s8,40(sp)
1c000548:	5c92                	lw	s9,36(sp)
1c00054a:	5d02                	lw	s10,32(sp)
1c00054c:	4df2                	lw	s11,28(sp)
1c00054e:	6161                	addi	sp,sp,80
1c000550:	8082                	ret
            int ZeroLength = i - Pos;
1c000552:	40b607b3          	sub	a5,a2,a1
            int ZRL_Seq = ZeroLength / 16;
1c000556:	4047db93          	srai	s7,a5,0x4
            ZeroLength = ZeroLength % 16;
1c00055a:	f647bb33          	p.bclr	s6,a5,27,4
            if (ZRL_Seq)
1c00055e:	060b9563          	bnez	s7,1c0005c8 <process_du+0x18e>
    int Sign = (X < 0);
1c000562:	01f45593          	srli	a1,s0,0x1f
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000566:	00159713          	slli	a4,a1,0x1
    int AbsX = (X < 0) ? -X : X;
1c00056a:	04040433          	p.avg	s0,s0,zero
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c00056e:	40e98733          	sub	a4,s3,a4
1c000572:	02870733          	mul	a4,a4,s0
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000576:	47fd                	li	a5,31
1c000578:	10041433          	p.fl1	s0,s0
1c00057c:	40878433          	sub	s0,a5,s0
1c000580:	02000793          	li	a5,32
1c000584:	40878433          	sub	s0,a5,s0
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000588:	008996b3          	sll	a3,s3,s0
1c00058c:	16fd                	addi	a3,a3,-1
            RLE_Index = (ZeroLength * 16) + SymbolSize;
1c00058e:	004b1793          	slli	a5,s6,0x4
1c000592:	97a2                	add	a5,a5,s0
1c000594:	8b3a                	mv	s6,a4
1c000596:	42b68b33          	p.mac	s6,a3,a1
            BitStreamIndex += AppendBits(BitStream, BitStreamIndex, RLE_AC_LUT[RLE_Index], RLE_Size);
1c00059a:	4732                	lw	a4,12(sp)
1c00059c:	00179613          	slli	a2,a5,0x1
            RLE_Size = RLE_AC_Size_LUT[RLE_Index];
1c0005a0:	97e2                	add	a5,a5,s8
            BitStreamIndex += AppendBits(BitStream, BitStreamIndex, RLE_AC_LUT[RLE_Index], RLE_Size);
1c0005a2:	963a                	add	a2,a2,a4
1c0005a4:	0007c683          	lbu	a3,0(a5)
1c0005a8:	00065603          	lhu	a2,0(a2)
1c0005ac:	85e6                	mv	a1,s9
1c0005ae:	8526                	mv	a0,s1
1c0005b0:	33f1                	jal	1c00037c <AppendBits>
1c0005b2:	9caa                	add	s9,s9,a0
            BitStreamIndex += AppendBits(BitStream, BitStreamIndex, SymbolIndex, SymbolSize);
1c0005b4:	85e6                	mv	a1,s9
1c0005b6:	86a2                	mv	a3,s0
1c0005b8:	865a                	mv	a2,s6
1c0005ba:	8526                	mv	a0,s1
1c0005bc:	33c1                	jal	1c00037c <AppendBits>
1c0005be:	85d6                	mv	a1,s5
1c0005c0:	9caa                	add	s9,s9,a0
    while (Pos < 64)
1c0005c2:	f35952e3          	ble	s5,s2,1c0004e6 <process_du+0xac>
1c0005c6:	b7a5                	j	1c00052e <process_du+0xf4>
                BitStreamIndex += AppendBits(BitStream, BitStreamIndex, ZRL, ZRL_LEN);
1c0005c8:	85e6                	mv	a1,s9
1c0005ca:	46ad                	li	a3,11
1c0005cc:	7f900613          	li	a2,2041
1c0005d0:	8526                	mv	a0,s1
1c0005d2:	336d                	jal	1c00037c <AppendBits>
1c0005d4:	9caa                	add	s9,s9,a0
            if (ZRL_Seq)
1c0005d6:	f81ba6e3          	p.beqimm	s7,1,1c000562 <process_du+0x128>
                BitStreamIndex += AppendBits(BitStream, BitStreamIndex, ZRL, ZRL_LEN);
1c0005da:	85e6                	mv	a1,s9
1c0005dc:	46ad                	li	a3,11
1c0005de:	7f900613          	li	a2,2041
1c0005e2:	8526                	mv	a0,s1
1c0005e4:	3b61                	jal	1c00037c <AppendBits>
1c0005e6:	9caa                	add	s9,s9,a0
            if (ZRL_Seq)
1c0005e8:	f62bade3          	p.beqimm	s7,2,1c000562 <process_du+0x128>
                BitStreamIndex += AppendBits(BitStream, BitStreamIndex, ZRL, ZRL_LEN);
1c0005ec:	85e6                	mv	a1,s9
1c0005ee:	46ad                	li	a3,11
1c0005f0:	7f900613          	li	a2,2041
1c0005f4:	8526                	mv	a0,s1
1c0005f6:	3359                	jal	1c00037c <AppendBits>
1c0005f8:	9caa                	add	s9,s9,a0
1c0005fa:	b7a5                	j	1c000562 <process_du+0x128>
1c0005fc:	4685                	li	a3,1
1c0005fe:	b701                	j	1c0004fe <process_du+0xc4>

1c000600 <rgb_to_yuv>:
#define FLOAT2FIX(f)  ((int)((f) * (1 << 11)))
#define FIXQ 11

void rgb_to_yuv(unsigned char r, unsigned char g, unsigned char b, int *y, int *u, int *v)
{
    *y = FLOAT2FIX( 0.2990f) * r + FLOAT2FIX(0.5870f) * g + FLOAT2FIX(0.1140f) * b - (128 << FIXQ);
1c000600:	4b200793          	li	a5,1202
1c000604:	02f585b3          	mul	a1,a1,a5
1c000608:	00361793          	slli	a5,a2,0x3
1c00060c:	8f91                	sub	a5,a5,a2
1c00060e:	078a                	slli	a5,a5,0x2
1c000610:	97b2                	add	a5,a5,a2
1c000612:	078e                	slli	a5,a5,0x3
1c000614:	963e                	add	a2,a2,a5
1c000616:	26400793          	li	a5,612
1c00061a:	42f505b3          	p.mac	a1,a0,a5
1c00061e:	962e                	add	a2,a2,a1
    //*u = FLOAT2FIX(-0.1678f) * r - FLOAT2FIX(0.3313f) * g + FLOAT2FIX(0.5000f) * b;
    //*v = FLOAT2FIX( 0.5000f) * r - FLOAT2FIX(0.4187f) * g - FLOAT2FIX(0.0813f) * b;
    *y >>= FIXQ - 2;
1c000620:	fffc05b7          	lui	a1,0xfffc0
1c000624:	12b6265b          	p.addn	a2,a2,a1,9
1c000628:	c290                	sw	a2,0(a3)
    //*u >>= FIXQ - 2;
    //*v >>= FIXQ - 2;
}
1c00062a:	8082                	ret

1c00062c <gray_to_y>:
{
  #if 0
    *y = FLOAT2FIX(1.0f) * r - (128 << FIXQ);
    *y >>= FIXQ - 2;
  #else
    *y = (r - 128) << 2;
1c00062c:	f8050513          	addi	a0,a0,-128
1c000630:	050a                	slli	a0,a0,0x2
1c000632:	c188                	sw	a0,0(a1)
  #endif
}
1c000634:	8082                	ret

1c000636 <jpeg_encoder_process_status>:


int32_t jpeg_encoder_process_status(uint32_t *encoded_size, pi_task_t *task)
{
  *encoded_size = task->arg[2];
1c000636:	45dc                	lw	a5,12(a1)
1c000638:	c11c                	sw	a5,0(a0)
  return task->arg[3];
}
1c00063a:	4988                	lw	a0,16(a1)
1c00063c:	8082                	ret

1c00063e <jpeg_encoder_process_fc>:

void jpeg_encoder_process_fc(jpeg_encoder_t *enc, pi_buffer_t *image, pi_buffer_t *encoded_bitstream, pi_task_t *task)
{
  int image_size = image->width * image->height;
  unsigned int bitstream_nb_bits = encoded_bitstream->size*8;
1c00063e:	01862f83          	lw	t6,24(a2)
  unsigned int height = image->height;
  int BitStreamIndex = 0;
  unsigned char *bitstream = encoded_bitstream->data;
  int retval = 1;

  if (enc->pending_bits)
1c000642:	451c                	lw	a5,8(a0)
{
1c000644:	7115                	addi	sp,sp,-224
1c000646:	cda2                	sw	s0,216(sp)
1c000648:	c9ca                	sw	s2,208(sp)
1c00064a:	c7ce                	sw	s3,204(sp)
1c00064c:	c3d6                	sw	s5,196(sp)
1c00064e:	c1da                	sw	s6,192(sp)
1c000650:	df5e                	sw	s7,188(sp)
1c000652:	d76e                	sw	s11,172(sp)
1c000654:	cf86                	sw	ra,220(sp)
1c000656:	cba6                	sw	s1,212(sp)
1c000658:	c5d2                	sw	s4,200(sp)
1c00065a:	dd62                	sw	s8,184(sp)
1c00065c:	db66                	sw	s9,180(sp)
1c00065e:	d96a                	sw	s10,176(sp)
1c000660:	ce32                	sw	a2,28(sp)
1c000662:	cc36                	sw	a3,24(sp)
1c000664:	8daa                	mv	s11,a0
  int image_size = image->width * image->height;
1c000666:	0085aa83          	lw	s5,8(a1) # fffc0008 <pulp__FC+0xfffc0009>
1c00066a:	00c5ab03          	lw	s6,12(a1)
  unsigned int bitstream_nb_bits = encoded_bitstream->size*8;
1c00066e:	003f9993          	slli	s3,t6,0x3
  unsigned char *data = image->data;
1c000672:	0045a903          	lw	s2,4(a1)
  unsigned char *bitstream = encoded_bitstream->data;
1c000676:	4240                	lw	s0,4(a2)
1c000678:	8bbe                	mv	s7,a5
  if (enc->pending_bits)
1c00067a:	c799                	beqz	a5,1c000688 <jpeg_encoder_process_fc+0x4a>
  {
    *bitstream = enc->pending_bitstream_char;
1c00067c:	00e54783          	lbu	a5,14(a0)
1c000680:	00f40023          	sb	a5,0(s0)
    BitStreamIndex = enc->pending_bits;
1c000684:	451c                	lw	a5,8(a0)
1c000686:	8bbe                	mv	s7,a5
  }

  while (bitstream_nb_bits >= MAX_BYTES_IN_DU*8)
1c000688:	6485                	lui	s1,0x1
1c00068a:	81f48493          	addi	s1,s1,-2017 # 81f <__rt_stack_size+0x1f>
1c00068e:	0d34ff63          	bleu	s3,s1,1c00076c <jpeg_encoder_process_fc+0x12e>
1c000692:	00cd8d13          	addi	s10,s11,12
1c000696:	1c00ccb7          	lui	s9,0x1c00c
1c00069a:	1c00bc37          	lui	s8,0x1c00b
  {
    short int du[64];

    if (enc->current_du_x == 0 && enc->current_du_y == 0)
1c00069e:	000da803          	lw	a6,0(s11)
1c0006a2:	00081763          	bnez	a6,1c0006b0 <jpeg_encoder_process_fc+0x72>
1c0006a6:	004da783          	lw	a5,4(s11)
1c0006aa:	e399                	bnez	a5,1c0006b0 <jpeg_encoder_process_fc+0x72>
      enc->prev_du = 0;
1c0006ac:	000d9623          	sh	zero,12(s11)
1c0006b0:	02010313          	addi	t1,sp,32

    for (int i=0; i<8; i++)
    {
      for (int j=0; j<8; j++)
1c0006b4:	4a01                	li	s4,0
      {
        if (enc->current_du_x + j < width && enc->current_du_y + i < height)
          du[i*8 + j] = data[(enc->current_du_y + i)*width + enc->current_du_x + j];
1c0006b6:	010908b3          	add	a7,s2,a6
1c0006ba:	4e21                	li	t3,8
1c0006bc:	023e407b          	lp.setup	x0,t3,1c000702 <jpeg_encoder_process_fc+0xc4>
{
1c0006c0:	859a                	mv	a1,t1
1c0006c2:	861a                	mv	a2,t1
      for (int j=0; j<8; j++)
1c0006c4:	4701                	li	a4,0
1c0006c6:	46a1                	li	a3,8
1c0006c8:	01a6c0fb          	lp.setup	x1,a3,1c0006fc <jpeg_encoder_process_fc+0xbe>
        if (enc->current_du_x + j < width && enc->current_du_y + i < height)
1c0006cc:	00e807b3          	add	a5,a6,a4
1c0006d0:	0f57fd63          	bleu	s5,a5,1c0007ca <jpeg_encoder_process_fc+0x18c>
1c0006d4:	004da783          	lw	a5,4(s11)
          du[i*8 + j] = data[(enc->current_du_y + i)*width + enc->current_du_x + j];
1c0006d8:	00e88533          	add	a0,a7,a4
        if (enc->current_du_x + j < width && enc->current_du_y + i < height)
1c0006dc:	97d2                	add	a5,a5,s4
1c0006de:	0f67f663          	bleu	s6,a5,1c0007ca <jpeg_encoder_process_fc+0x18c>
          du[i*8 + j] = data[(enc->current_du_y + i)*width + enc->current_du_x + j];
1c0006e2:	42fa8533          	p.mac	a0,s5,a5
1c0006e6:	00054783          	lbu	a5,0(a0)
1c0006ea:	00f59023          	sh	a5,0(a1)
        else
          du[i*8 + j] = 0x00;

#if 1
        int val;
        gray_to_y(du[i*8 + j], &val);
1c0006ee:	00061783          	lh	a5,0(a2)
      for (int j=0; j<8; j++)
1c0006f2:	0705                	addi	a4,a4,1
1c0006f4:	0589                	addi	a1,a1,2
    *y = (r - 128) << 2;
1c0006f6:	f8078793          	addi	a5,a5,-128
1c0006fa:	078a                	slli	a5,a5,0x2
        du[i*8 + j] = val;
1c0006fc:	00f6112b          	p.sh	a5,2(a2!)
    for (int i=0; i<8; i++)
1c000700:	0a05                	addi	s4,s4,1
1c000702:	0341                	addi	t1,t1,16
      }
    }

    //printf("Handling block (%d, %d)\n", enc->current_du_x, enc->current_du_y);

    int du_bitstream_nb_bits = process_du(
1c000704:	1c00c537          	lui	a0,0x1c00c
1c000708:	cc250793          	addi	a5,a0,-830 # 1c00bcc2 <JpegConstants+0x746>
1c00070c:	1c00b637          	lui	a2,0x1c00b
1c000710:	1c00b537          	lui	a0,0x1c00b
1c000714:	1c00c5b7          	lui	a1,0x1c00c
1c000718:	63c60693          	addi	a3,a2,1596 # 1c00b63c <JpegConstants+0xc0>
1c00071c:	5fc50613          	addi	a2,a0,1532 # 1c00b5fc <JpegConstants+0x80>
1c000720:	1c00b537          	lui	a0,0x1c00b
1c000724:	c45e                	sw	s7,8(sp)
1c000726:	caa58713          	addi	a4,a1,-854 # 1c00bcaa <JpegConstants+0x72e>
1c00072a:	c26a                	sw	s10,4(sp)
1c00072c:	57c50593          	addi	a1,a0,1404 # 1c00b57c <JpegConstants>
1c000730:	c022                	sw	s0,0(sp)
1c000732:	8bcc8893          	addi	a7,s9,-1860 # 1c00b8bc <JpegConstants+0x340>
1c000736:	6bcc0813          	addi	a6,s8,1724 # 1c00b6bc <JpegConstants+0x140>
1c00073a:	1008                	addi	a0,sp,32
1c00073c:	39fd                	jal	1c00043a <process_du>
    );

    BitStreamIndex += du_bitstream_nb_bits;
    bitstream_nb_bits -= du_bitstream_nb_bits;

    enc->current_du_x += 8;
1c00073e:	000da783          	lw	a5,0(s11)
    BitStreamIndex += du_bitstream_nb_bits;
1c000742:	9baa                	add	s7,s7,a0
    bitstream_nb_bits -= du_bitstream_nb_bits;
1c000744:	40a989b3          	sub	s3,s3,a0
    enc->current_du_x += 8;
1c000748:	07a1                	addi	a5,a5,8
1c00074a:	00fda023          	sw	a5,0(s11)
    if (enc->current_du_x >= width)
1c00074e:	0157eb63          	bltu	a5,s5,1c000764 <jpeg_encoder_process_fc+0x126>
    {
      enc->current_du_y += 8;
1c000752:	004da783          	lw	a5,4(s11)
      enc->current_du_x = 0;
1c000756:	000da023          	sw	zero,0(s11)
      enc->current_du_y += 8;
1c00075a:	07a1                	addi	a5,a5,8
1c00075c:	00fda223          	sw	a5,4(s11)
      if (enc->current_du_y >= height)
1c000760:	0767f863          	bleu	s6,a5,1c0007d0 <jpeg_encoder_process_fc+0x192>
  while (bitstream_nb_bits >= MAX_BYTES_IN_DU*8)
1c000764:	f334ede3          	bltu	s1,s3,1c00069e <jpeg_encoder_process_fc+0x60>
1c000768:	008da783          	lw	a5,8(s11)
        break;
      }
    }
  }

  unsigned int nb_bits = encoded_bitstream->size*8 - bitstream_nb_bits + enc->pending_bits;
1c00076c:	45f2                	lw	a1,28(sp)
1c00076e:	4d98                	lw	a4,24(a1)
1c000770:	070e                	slli	a4,a4,0x3
1c000772:	973e                	add	a4,a4,a5
1c000774:	41370733          	sub	a4,a4,s3
  unsigned int rounded_nb_bits = nb_bits & ~7;
1c000778:	c40737b3          	p.bclr	a5,a4,2,0
  unsigned int result = rounded_nb_bits >> 3;

  enc->pending_bits = nb_bits - rounded_nb_bits;
1c00077c:	8f1d                	sub	a4,a4,a5
1c00077e:	00eda423          	sw	a4,8(s11)
  unsigned int result = rounded_nb_bits >> 3;
1c000782:	838d                	srli	a5,a5,0x3

  if (enc->pending_bits)
1c000784:	e751                	bnez	a4,1c000810 <jpeg_encoder_process_fc+0x1d2>
1c000786:	4705                	li	a4,1
    }
    else
      enc->pending_bitstream_char = bitstream[result];
  }

  task->arg[2] = result;
1c000788:	4662                	lw	a2,24(sp)
1c00078a:	c65c                	sw	a5,12(a2)
  task->arg[3] = retval;
1c00078c:	ca18                	sw	a4,16(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00078e:	30047773          	csrrci	a4,mstatus,8
  if (sched->first) {
1c000792:	01c02683          	lw	a3,28(zero) # 1c <_l1_preload_size>
  event->next = NULL;
1c000796:	00062023          	sw	zero,0(a2)
  if (sched->first) {
1c00079a:	c2d1                	beqz	a3,1c00081e <jpeg_encoder_process_fc+0x1e0>
    sched->last->next = event;
1c00079c:	01c00793          	li	a5,28
1c0007a0:	43d4                	lw	a3,4(a5)
1c0007a2:	c290                	sw	a2,0(a3)
  sched->last = event;
1c0007a4:	4562                	lw	a0,24(sp)
1c0007a6:	c3c8                	sw	a0,4(a5)
  __builtin_pulp_spr_write(reg, val);
1c0007a8:	30071073          	csrw	mstatus,a4

  pi_task_push(task);
}
1c0007ac:	40fe                	lw	ra,220(sp)
1c0007ae:	446e                	lw	s0,216(sp)
1c0007b0:	44de                	lw	s1,212(sp)
1c0007b2:	494e                	lw	s2,208(sp)
1c0007b4:	49be                	lw	s3,204(sp)
1c0007b6:	4a2e                	lw	s4,200(sp)
1c0007b8:	4a9e                	lw	s5,196(sp)
1c0007ba:	4b0e                	lw	s6,192(sp)
1c0007bc:	5bfa                	lw	s7,188(sp)
1c0007be:	5c6a                	lw	s8,184(sp)
1c0007c0:	5cda                	lw	s9,180(sp)
1c0007c2:	5d4a                	lw	s10,176(sp)
1c0007c4:	5dba                	lw	s11,172(sp)
1c0007c6:	612d                	addi	sp,sp,224
1c0007c8:	8082                	ret
          du[i*8 + j] = 0x00;
1c0007ca:	00059023          	sh	zero,0(a1)
1c0007ce:	b705                	j	1c0006ee <jpeg_encoder_process_fc+0xb0>
  unsigned int nb_bits = encoded_bitstream->size*8 - bitstream_nb_bits + enc->pending_bits;
1c0007d0:	45f2                	lw	a1,28(sp)
1c0007d2:	008da783          	lw	a5,8(s11)
1c0007d6:	4d98                	lw	a4,24(a1)
        enc->current_du_y = 0;
1c0007d8:	000da223          	sw	zero,4(s11)
  unsigned int nb_bits = encoded_bitstream->size*8 - bitstream_nb_bits + enc->pending_bits;
1c0007dc:	070e                	slli	a4,a4,0x3
1c0007de:	973e                	add	a4,a4,a5
1c0007e0:	41370733          	sub	a4,a4,s3
  unsigned int rounded_nb_bits = nb_bits & ~7;
1c0007e4:	c40737b3          	p.bclr	a5,a4,2,0
  enc->pending_bits = nb_bits - rounded_nb_bits;
1c0007e8:	8f1d                	sub	a4,a4,a5
1c0007ea:	00eda423          	sw	a4,8(s11)
  unsigned int result = rounded_nb_bits >> 3;
1c0007ee:	838d                	srli	a5,a5,0x3
  if (enc->pending_bits)
1c0007f0:	df41                	beqz	a4,1c000788 <jpeg_encoder_process_fc+0x14a>
      bitstream[result] = bitstream[result] << (8 - enc->pending_bits);
1c0007f2:	943e                	add	s0,s0,a5
1c0007f4:	00044683          	lbu	a3,0(s0)
1c0007f8:	40ea0e33          	sub	t3,s4,a4
      result++;
1c0007fc:	0785                	addi	a5,a5,1
      bitstream[result] = bitstream[result] << (8 - enc->pending_bits);
1c0007fe:	01c69e33          	sll	t3,a3,t3
1c000802:	8772                	mv	a4,t3
1c000804:	00e40023          	sb	a4,0(s0)
      enc->pending_bits = 0;
1c000808:	000da423          	sw	zero,8(s11)
1c00080c:	4701                	li	a4,0
1c00080e:	bfad                	j	1c000788 <jpeg_encoder_process_fc+0x14a>
      enc->pending_bitstream_char = bitstream[result];
1c000810:	943e                	add	s0,s0,a5
1c000812:	00044683          	lbu	a3,0(s0)
1c000816:	4705                	li	a4,1
1c000818:	00dd8723          	sb	a3,14(s11)
1c00081c:	b7b5                	j	1c000788 <jpeg_encoder_process_fc+0x14a>
    sched->first = event;
1c00081e:	46e2                	lw	a3,24(sp)
1c000820:	00d02e23          	sw	a3,28(zero) # 1c <_l1_preload_size>
1c000824:	01c00793          	li	a5,28
1c000828:	bfb5                	j	1c0007a4 <jpeg_encoder_process_fc+0x166>

1c00082a <jpeg_encoder_process_async>:

void jpeg_encoder_process_async(jpeg_encoder_t *enc, pi_buffer_t *image, pi_buffer_t *encoded_bitstream, pi_task_t *task)
{
  if (enc->flags & JPEG_ENCODER_FLAGS_CLUSTER_OFFLOAD)
1c00082a:	4d1c                	lw	a5,24(a0)
1c00082c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c000830:	e391                	bnez	a5,1c000834 <jpeg_encoder_process_async+0xa>
  {
    __jpeg_encoder_process_cl(enc, image, encoded_bitstream, task);
  }
  else
  {
    jpeg_encoder_process_fc(enc, image, encoded_bitstream, task);
1c000832:	b531                	j	1c00063e <jpeg_encoder_process_fc>
    __jpeg_encoder_process_cl(enc, image, encoded_bitstream, task);
1c000834:	2d20106f          	j	1c001b06 <__jpeg_encoder_process_cl>

1c000838 <jpeg_encoder_process>:
  }
}

int32_t jpeg_encoder_process(jpeg_encoder_t *enc, pi_buffer_t *image, pi_buffer_t *encoded_bitstream, uint32_t *encoded_size)
{
1c000838:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00083a:	4785                	li	a5,1
1c00083c:	c14a                	sw	s2,128(sp)
1c00083e:	8936                	mv	s2,a3
  pi_task_t task;

  jpeg_encoder_process_async(enc, image, encoded_bitstream, pi_task_block(&task));
1c000840:	868a                	mv	a3,sp
1c000842:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c000844:	d43e                	sw	a5,40(sp)
{
1c000846:	c706                	sw	ra,140(sp)
1c000848:	c522                	sw	s0,136(sp)
1c00084a:	c326                	sw	s1,132(sp)
  task->arg[0] = (uint32_t)0;
1c00084c:	c202                	sw	zero,4(sp)
  task->done = 0;
1c00084e:	00010a23          	sb	zero,20(sp)
  jpeg_encoder_process_async(enc, image, encoded_bitstream, pi_task_block(&task));
1c000852:	3fe1                	jal	1c00082a <jpeg_encoder_process_async>
1c000854:	01410783          	lb	a5,20(sp)
1c000858:	ef89                	bnez	a5,1c000872 <jpeg_encoder_process+0x3a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00085a:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00085e:	4585                	li	a1,1
1c000860:	01c00513          	li	a0,28
1c000864:	571050ef          	jal	ra,1c0065d4 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c000868:	30041073          	csrw	mstatus,s0
1c00086c:	01410783          	lb	a5,20(sp)
1c000870:	d7ed                	beqz	a5,1c00085a <jpeg_encoder_process+0x22>
  *encoded_size = task->arg[2];
1c000872:	47b2                	lw	a5,12(sp)
  pi_task_wait_on(&task);
  return jpeg_encoder_process_status(encoded_size, &task);
}
1c000874:	40ba                	lw	ra,140(sp)
1c000876:	442a                	lw	s0,136(sp)
  *encoded_size = task->arg[2];
1c000878:	00f92023          	sw	a5,0(s2)
}
1c00087c:	4542                	lw	a0,16(sp)
1c00087e:	449a                	lw	s1,132(sp)
1c000880:	490a                	lw	s2,128(sp)
1c000882:	6149                	addi	sp,sp,144
1c000884:	8082                	ret

1c000886 <jpeg_encoder_open>:
int32_t jpeg_encoder_open(jpeg_encoder_t *enc, struct jpeg_encoder_conf *conf)
{
  enc->current_du_x = 0;
  enc->current_du_y = 0;
  enc->pending_bits = 0;
  enc->width = conf->width;
1c000886:	4194                	lw	a3,0(a1)
  enc->height = conf->height;
1c000888:	41d8                	lw	a4,4(a1)
  enc->flags = conf->flags;
1c00088a:	459c                	lw	a5,8(a1)
  enc->current_du_x = 0;
1c00088c:	00052023          	sw	zero,0(a0)
  enc->current_du_y = 0;
1c000890:	00052223          	sw	zero,4(a0)
  enc->pending_bits = 0;
1c000894:	00052423          	sw	zero,8(a0)
  enc->width = conf->width;
1c000898:	c914                	sw	a3,16(a0)
  enc->height = conf->height;
1c00089a:	c958                	sw	a4,20(a0)
  enc->flags = conf->flags;
1c00089c:	cd1c                	sw	a5,24(a0)
  enc->prev_du = 0;
1c00089e:	00051623          	sh	zero,12(a0)

  return 0;
}
1c0008a2:	4501                	li	a0,0
1c0008a4:	8082                	ret

1c0008a6 <jpeg_encoder_start>:

int32_t jpeg_encoder_start(jpeg_encoder_t *enc)
{
    if (enc->flags & JPEG_ENCODER_FLAGS_CLUSTER_OFFLOAD)
1c0008a6:	4d1c                	lw	a5,24(a0)
1c0008a8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0008ac:	e399                	bnez	a5,1c0008b2 <jpeg_encoder_start+0xc>
    {
        if (__jpeg_encoder_start_cl(enc))
            return -1;
    }

    return 0;
1c0008ae:	4501                	li	a0,0
}
1c0008b0:	8082                	ret
{
1c0008b2:	1141                	addi	sp,sp,-16
1c0008b4:	c606                	sw	ra,12(sp)
        if (__jpeg_encoder_start_cl(enc))
1c0008b6:	288010ef          	jal	ra,1c001b3e <__jpeg_encoder_start_cl>
}
1c0008ba:	40b2                	lw	ra,12(sp)
        if (__jpeg_encoder_start_cl(enc))
1c0008bc:	00a03533          	snez	a0,a0
1c0008c0:	40a00533          	neg	a0,a0
}
1c0008c4:	0141                	addi	sp,sp,16
1c0008c6:	8082                	ret

1c0008c8 <jpeg_encoder_stop>:

void jpeg_encoder_stop(jpeg_encoder_t *enc)
{
    if (enc->flags & JPEG_ENCODER_FLAGS_CLUSTER_OFFLOAD)
1c0008c8:	4d1c                	lw	a5,24(a0)
1c0008ca:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0008ce:	e391                	bnez	a5,1c0008d2 <jpeg_encoder_stop+0xa>
    {
        __jpeg_encoder_stop_cl(enc);
    }
}
1c0008d0:	8082                	ret
        __jpeg_encoder_stop_cl(enc);
1c0008d2:	2e60106f          	j	1c001bb8 <__jpeg_encoder_stop_cl>

1c0008d6 <jpeg_encoder_close>:

void jpeg_encoder_close(jpeg_encoder_t *enc)
{
}
1c0008d6:	8082                	ret

1c0008d8 <jpeg_encoder_conf_init>:

void jpeg_encoder_conf_init(struct jpeg_encoder_conf *conf)
{
    conf->flags = JPEG_ENCODER_FLAGS_CLUSTER_OFFLOAD;
1c0008d8:	4785                	li	a5,1
1c0008da:	c51c                	sw	a5,8(a0)
    conf->width = 0;
1c0008dc:	00052023          	sw	zero,0(a0)
    conf->height = 0;
1c0008e0:	00052223          	sw	zero,4(a0)
}
1c0008e4:	8082                	ret

1c0008e6 <jpeg_encoder_header>:


int32_t jpeg_encoder_header(jpeg_encoder_t *enc, pi_buffer_t *encoded_bitstream, uint32_t *encoded_size)
{
  int cnt = 0;
  uint8_t *output = encoded_bitstream->data;
1c0008e6:	0045a883          	lw	a7,4(a1)

  // JFIF header
  // SOI, Start Of Image
  output[cnt++] = 0xFF;
1c0008ea:	dbffe7b7          	lui	a5,0xdbffe
1c0008ee:	8ff78793          	addi	a5,a5,-1793 # dbffd8ff <pulp__FC+0xdbffd900>
1c0008f2:	00f8a023          	sw	a5,0(a7)
  output[cnt++] = 0xD8;
  // DQT, Define Quantization Table
  // DQT
  output[cnt++] = 0xFF;
  output[cnt++] = 0xDB;
1c0008f6:	6791                	lui	a5,0x4
1c0008f8:	30078793          	addi	a5,a5,768 # 4300 <__rt_stack_size+0x3b00>
1c0008fc:	1c00b6b7          	lui	a3,0x1c00b
1c000900:	1c00b837          	lui	a6,0x1c00b
1c000904:	00f89223          	sh	a5,4(a7)
  // Lq(Length) = 2+65 bytes
  output[cnt++] = 0x00;
  output[cnt++] = 0x43;
1c000908:	00088323          	sb	zero,6(a7)
1c00090c:	5fc68693          	addi	a3,a3,1532 # 1c00b5fc <JpegConstants+0x80>
1c000910:	00788593          	addi	a1,a7,7
1c000914:	57c80813          	addi	a6,a6,1404 # 1c00b57c <JpegConstants>
1c000918:	0403d0fb          	lp.setupi	x1,64,1c000926 <jpeg_encoder_header+0x40>
  // ID:0, Quantization table for luminance
  output[cnt++ ]= 0x00;
  for(int i = 0; i < 64; i++){
    output[cnt++] = JpegConstants.QUANT_TAB_LUMIN[JpegConstants.ZIGZAG_LUT[i]];
1c00091c:	0016c78b          	p.lbu	a5,1(a3!)
1c000920:	97c2                	add	a5,a5,a6
1c000922:	0c07c783          	lbu	a5,192(a5)
1c000926:	00f580ab          	p.sb	a5,1(a1!)
1c00092a:	1c00b6b7          	lui	a3,0x1c00b
  }
  // DHT, Define Huffman Table
  // DHT
  output[cnt++] = 0xFF;
1c00092e:	d200c7b7          	lui	a5,0xd200c
1c000932:	4ff78793          	addi	a5,a5,1279 # d200c4ff <pulp__FC+0xd200c500>
1c000936:	35868693          	addi	a3,a3,856 # 1c00b358 <std_dc_luminance_huff>
1c00093a:	04f8a3a3          	sw	a5,71(a7)
  output[cnt++] = 0xC4;
  // Lh(Length) = 2+29+179 bytes
  output[cnt++] = 0x00;
  output[cnt++] = 0xD2;
1c00093e:	040885a3          	sb	zero,75(a7)
1c000942:	04c88593          	addi	a1,a7,76
1c000946:	01c68713          	addi	a4,a3,28
1c00094a:	01c250fb          	lp.setupi	x1,28,1c000952 <jpeg_encoder_header+0x6c>
  // ID:01, Huffman code table for DC luminance.
  output[cnt++] = 0x00;
  for(uint16_t i = 0; i < sizeof(std_dc_luminance_huff); i++){
    output[cnt++] = std_dc_luminance_huff[i];
1c00094e:	0016c80b          	p.lbu	a6,1(a3!)
1c000952:	010580ab          	p.sb	a6,1(a1!)
  }
  // ID:10, Huffman code table for AC luminance.
  output[cnt++] = 0x10;
1c000956:	47c1                	li	a5,16
1c000958:	06f88423          	sb	a5,104(a7)
1c00095c:	06988693          	addi	a3,a7,105
1c000960:	0b2250fb          	lp.setupi	x1,178,1c000968 <jpeg_encoder_header+0x82>
  for(uint16_t i = 0; i < sizeof(std_ac_luminance_huff); i++){
    output[cnt++] = std_ac_luminance_huff[i];
1c000964:	0017458b          	p.lbu	a1,1(a4!)
1c000968:	00b680ab          	p.sb	a1,1(a3!)
  }
  // SOF0, Start Of Frame 0
  // SOF0
  output[cnt++] = 0xFF;
1c00096c:	0b00c7b7          	lui	a5,0xb00c
1c000970:	0ff78793          	addi	a5,a5,255 # b00c0ff <__L2+0xaf8c0ff>
1c000974:	10f8ada3          	sw	a5,283(a7)
  output[cnt++] = 0xC0;
  // Lf(Length) = 11 bytes
  output[cnt++] = 0x00;
  output[cnt++] = 0x0b;
1c000978:	47a1                	li	a5,8
1c00097a:	10f88fa3          	sb	a5,287(a7)
  output[cnt++] = 0x08;
  // Height
  //output[cnt++] = (uint8_t)(FRAME_HEIGHT >> 8);
  //output[cnt++] = (uint8_t)(FRAME_HEIGHT & 0xff);

  output[cnt++] = (uint8_t)(enc->height >> 8);
1c00097e:	495c                	lw	a5,20(a0)
  //output[cnt++] = (uint8_t)(FRAME_WIDTH >> 8);
  //output[cnt++] = (uint8_t)(FRAME_WIDTH & 0xff);
  output[cnt++] = (uint8_t)(enc->width >> 8);
  output[cnt++] = (uint8_t)(enc->width & 0xff);
  // Number of image components = 1(Grayscale)
  output[cnt++] = 0x01;
1c000980:	00220737          	lui	a4,0x220
1c000984:	0705                	addi	a4,a4,1
  output[cnt++] = (uint8_t)(enc->height >> 8);
1c000986:	83a1                	srli	a5,a5,0x8
1c000988:	12f88023          	sb	a5,288(a7)
  output[cnt++] = (uint8_t)(enc->height & 0xff);
1c00098c:	495c                	lw	a5,20(a0)
1c00098e:	12f880a3          	sb	a5,289(a7)
  output[cnt++] = (uint8_t)(enc->width >> 8);
1c000992:	491c                	lw	a5,16(a0)
1c000994:	83a1                	srli	a5,a5,0x8
1c000996:	12f88123          	sb	a5,290(a7)
  output[cnt++] = (uint8_t)(enc->width & 0xff);
1c00099a:	491c                	lw	a5,16(a0)
  output[cnt++] = 0x01;
1c00099c:	12e8a223          	sw	a4,292(a7)
  output[cnt++] = 0x00;

  *encoded_size = cnt;

  return 0;
}
1c0009a0:	4501                	li	a0,0
  output[cnt++] = (uint8_t)(enc->width & 0xff);
1c0009a2:	12f881a3          	sb	a5,291(a7)
  output[cnt++] = 0x00;
1c0009a6:	0800e7b7          	lui	a5,0x800e
1c0009aa:	aff78793          	addi	a5,a5,-1281 # 800daff <__L2+0x7f8daff>
1c0009ae:	12f8a423          	sw	a5,296(a7)
  output[cnt++] = 0x08;
1c0009b2:	4785                	li	a5,1
1c0009b4:	12f8a623          	sw	a5,300(a7)
  output[cnt++] = 0x00;
1c0009b8:	03f00793          	li	a5,63
1c0009bc:	12f89823          	sh	a5,304(a7)
  *encoded_size = cnt;
1c0009c0:	13200793          	li	a5,306
1c0009c4:	c21c                	sw	a5,0(a2)
}
1c0009c6:	8082                	ret

1c0009c8 <jpeg_encoder_footer>:

int32_t jpeg_encoder_footer(jpeg_encoder_t *enc, pi_buffer_t *encoded_bitstream, uint32_t *encoded_size)
{
  int cnt = 0;
  uint8_t *output = encoded_bitstream->data;
1c0009c8:	41d8                	lw	a4,4(a1)

  // EOI, End Of Image
  output[cnt++] = 0xFF;
1c0009ca:	77f9                	lui	a5,0xffffe
1c0009cc:	9ff78793          	addi	a5,a5,-1537 # ffffd9ff <pulp__FC+0xffffda00>
1c0009d0:	00f71023          	sh	a5,0(a4) # 220000 <__L2+0x1a0000>
  output[cnt++] = 0xD9;

  *encoded_size = cnt;
1c0009d4:	4789                	li	a5,2
1c0009d6:	c21c                	sw	a5,0(a2)

  return 0;
}
1c0009d8:	4501                	li	a0,0
1c0009da:	8082                	ret

1c0009dc <exec_quantization>:
  return 0;
}

static void exec_quantization(cl_enc_t *enc, cl_enc_block_t *block)
{
  const unsigned char *ZigZagLUT = enc->constants->ZIGZAG_LUT;
1c0009dc:	06052803          	lw	a6,96(a0)
{
1c0009e0:	1141                	addi	sp,sp,-16
1c0009e2:	c622                	sw	s0,12(sp)
  const unsigned char *ZigZagLUT = enc->constants->ZIGZAG_LUT;
1c0009e4:	08080f13          	addi	t5,a6,128
{
1c0009e8:	c426                	sw	s1,8(sp)
  const unsigned char *QuantLUT = enc->constants->QUANT_TAB_LUMIN;
  short int *DU = block->data;
1c0009ea:	02458893          	addi	a7,a1,36
  const unsigned char *QuantLUT = enc->constants->QUANT_TAB_LUMIN;
1c0009ee:	0c080813          	addi	a6,a6,192

#if defined(__OPTIMIZE__)
static inline unsigned int evt_read32(unsigned int base, unsigned int offset)
{
  unsigned int value;
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0009f2:	002047b7          	lui	a5,0x204
1c0009f6:	0c07e703          	p.elw	a4,192(a5) # 2040c0 <__L2+0x1840c0>
    //printf("[%p] Quantization\n", block);

  pi_cl_team_critical_enter();

  cl_enc_block_t *next_du = block->next_du;
1c0009fa:	499c                	lw	a5,16(a1)
  if (next_du)
1c0009fc:	c7a1                	beqz	a5,1c000a44 <exec_quantization+0x68>
  {
    //printf("[%p] DCT resume %p\n", block, next_du);
    next_du->vp = block->vc;
1c0009fe:	01c5d683          	lhu	a3,28(a1)
  if (queue->first)
1c000a02:	4518                	lw	a4,8(a0)
    next_du->vp = block->vc;
1c000a04:	00d79f23          	sh	a3,30(a5)
    //printf("[%d] PREV SET VP %d\n", next_du->id, next_du->vp);
    block->next_du = NULL;
    block->next_vc_done = 1;
1c000a08:	4685                	li	a3,1
    block->next_du = NULL;
1c000a0a:	0005a823          	sw	zero,16(a1)
    block->next_vc_done = 1;
1c000a0e:	d194                	sw	a3,32(a1)
  if (queue->first)
1c000a10:	12070063          	beqz	a4,1c000b30 <exec_quantization+0x154>
    queue->last->next = block;
1c000a14:	4558                	lw	a4,12(a0)
1c000a16:	cb5c                	sw	a5,20(a4)
  enc->ready_blocks++;
1c000a18:	4978                	lw	a4,84(a0)
  queue->last = block;
1c000a1a:	c55c                	sw	a5,12(a0)
  uint32_t waiting_cores = enc->ready_blocks_waiting_cores;
1c000a1c:	4d34                	lw	a3,88(a0)
  block->next = NULL;
1c000a1e:	0007aa23          	sw	zero,20(a5)
  enc->ready_blocks++;
1c000a22:	00170793          	addi	a5,a4,1
1c000a26:	c97c                	sw	a5,84(a0)
  if (waiting_cores)
1c000a28:	ce91                	beqz	a3,1c000a44 <exec_quantization+0x68>
    int core = __FL1(waiting_cores);
1c000a2a:	10069733          	p.fl1	a4,a3
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c000a2e:	4785                	li	a5,1
1c000a30:	00e797b3          	sll	a5,a5,a4
1c000a34:	fff7c713          	not	a4,a5
1c000a38:	8ef9                	and	a3,a3,a4
  pulp_write32(evtAddr, coreSet);
}

static inline void eu_evt_trig_from_id(unsigned int event, unsigned int coreSet)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (event << 2), coreSet);
1c000a3a:	00204737          	lui	a4,0x204
1c000a3e:	cd34                	sw	a3,88(a0)
1c000a40:	10f72c23          	sw	a5,280(a4) # 204118 <__L2+0x184118>
}

static inline void eu_mutex_unlock_from_id(int id)
{
  __asm__ __volatile__ ("" : : : "memory");
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c000a44:	002047b7          	lui	a5,0x204
1c000a48:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
  pi_cl_team_critical_exit();
  int output_index = 0;
  int i, Pos = 1;
  //printf("[%d] USE VP %d\n", block->id, block->vp);

  int V = block->vc - block->vp;
1c000a4c:	01c59783          	lh	a5,28(a1)
1c000a50:	01e59703          	lh	a4,30(a1)
1c000a54:	8f99                	sub	a5,a5,a4
    int AbsX = (X < 0) ? -X : X;
1c000a56:	04078533          	p.avg	a0,a5,zero
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000a5a:	cbe1                	beqz	a5,1c000b2a <exec_quantization+0x14e>
1c000a5c:	10051633          	p.fl1	a2,a0
1c000a60:	0605                	addi	a2,a2,1
1c000a62:	4705                	li	a4,1
1c000a64:	00c71733          	sll	a4,a4,a2
1c000a68:	01f7d693          	srli	a3,a5,0x1f
1c000a6c:	177d                	addi	a4,a4,-1
1c000a6e:	02d70733          	mul	a4,a4,a3
1c000a72:	87b2                	mv	a5,a2
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000a74:	0686                	slli	a3,a3,0x1
1c000a76:	4605                	li	a2,1
1c000a78:	40d606b3          	sub	a3,a2,a3
  short int DU2[64];
  DU2[0] = V;
#endif
  int SymbolSize, SymbolIndex;
  SizeAndIndex(V, &SymbolSize, &SymbolIndex);
  block->output[output_index++] = SymbolSize;
1c000a7c:	0af5a223          	sw	a5,164(a1)
  int i, Pos = 1;
1c000a80:	4305                	li	t1,1
  block->output[output_index++] = SymbolIndex;
1c000a82:	4e09                	li	t3,2

  while (Pos < 64)
  {
    int V, ZeroLength;

    for (i = Pos; i < 64; i++)
1c000a84:	04000e93          	li	t4,64
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000a88:	447d                	li	s0,31
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000a8a:	42a68733          	p.mac	a4,a3,a0
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000a8e:	02000393          	li	t2,32
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000a92:	4f85                	li	t6,1
  while (Pos < 64)
1c000a94:	03f00293          	li	t0,63
  block->output[output_index++] = SymbolIndex;
1c000a98:	0ae5a423          	sw	a4,168(a1)
1c000a9c:	006f0633          	add	a2,t5,t1
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000aa0:	869a                	mv	a3,t1
1c000aa2:	406e8733          	sub	a4,t4,t1
1c000aa6:	011740fb          	lp.setup	x1,a4,1c000ac8 <exec_quantization+0xec>
    {
      signed short du_val = DU[ZigZagLUT[i]];
1c000aaa:	0016478b          	p.lbu	a5,1(a2!)
      V = 0;
      if (du_val)
        V = du_val / QuantLUT[ZigZagLUT[i]];
1c000aae:	00f80533          	add	a0,a6,a5
      signed short du_val = DU[ZigZagLUT[i]];
1c000ab2:	0786                	slli	a5,a5,0x1
1c000ab4:	97c6                	add	a5,a5,a7
1c000ab6:	00079783          	lh	a5,0(a5)
      if (du_val)
1c000aba:	c791                	beqz	a5,1c000ac6 <exec_quantization+0xea>
        V = du_val / QuantLUT[ZigZagLUT[i]];
1c000abc:	00054503          	lbu	a0,0(a0)
1c000ac0:	02a7c7b3          	div	a5,a5,a0
#ifdef DUMP_DU
        DU2[i] = V;
#endif
        if (V != 0) break;
1c000ac4:	ef89                	bnez	a5,1c000ade <exec_quantization+0x102>
    for (i = Pos; i < 64; i++)
1c000ac6:	0685                	addi	a3,a3,1
1c000ac8:	0001                	nop
        block->output[output_index++] = SymbolSize;
        block->output[output_index++] = SymbolIndex;
    }
    Pos = i + 1;
  }
  block->output[output_index++] = -1;
1c000aca:	028e0e13          	addi	t3,t3,40
  dump_du("after quantization", DU2);
}
1c000ace:	4432                	lw	s0,12(sp)
  block->output[output_index++] = -1;
1c000ad0:	0e0a                	slli	t3,t3,0x2
1c000ad2:	95f2                	add	a1,a1,t3
1c000ad4:	57fd                	li	a5,-1
1c000ad6:	c1dc                	sw	a5,4(a1)
}
1c000ad8:	44a2                	lw	s1,8(sp)
1c000ada:	0141                	addi	sp,sp,16
1c000adc:	8082                	ret
    int Sign = (X < 0);
1c000ade:	01f7d493          	srli	s1,a5,0x1f
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000ae2:	00149713          	slli	a4,s1,0x1
    int AbsX = (X < 0) ? -X : X;
1c000ae6:	040787b3          	p.avg	a5,a5,zero
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000aea:	40ef8733          	sub	a4,t6,a4
1c000aee:	02f70733          	mul	a4,a4,a5
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000af2:	100797b3          	p.fl1	a5,a5
1c000af6:	40f407b3          	sub	a5,s0,a5
1c000afa:	40f387b3          	sub	a5,t2,a5
    *SymbolIndex = Sign * ((1 << Size) - 1) + (1 - 2 * Sign) * AbsX;
1c000afe:	00ff9533          	sll	a0,t6,a5
1c000b02:	157d                	addi	a0,a0,-1
1c000b04:	002e1613          	slli	a2,t3,0x2
1c000b08:	962e                	add	a2,a2,a1
        int ZeroLength = i - Pos;
1c000b0a:	40668333          	sub	t1,a3,t1
        block->output[output_index++] = ZeroLength;
1c000b0e:	0a662223          	sw	t1,164(a2)
1c000b12:	42950733          	p.mac	a4,a0,s1
        block->output[output_index++] = SymbolSize;
1c000b16:	0af62423          	sw	a5,168(a2)
    Pos = i + 1;
1c000b1a:	00168313          	addi	t1,a3,1
        block->output[output_index++] = SymbolIndex;
1c000b1e:	0e0d                	addi	t3,t3,3
1c000b20:	0ae62623          	sw	a4,172(a2)
  while (Pos < 64)
1c000b24:	f662dce3          	ble	t1,t0,1c000a9c <exec_quantization+0xc0>
1c000b28:	b74d                	j	1c000aca <exec_quantization+0xee>
    int Size = X == 0 ? 0 : 32 - __builtin_clz(AbsX);
1c000b2a:	4681                	li	a3,0
1c000b2c:	4701                	li	a4,0
1c000b2e:	b799                	j	1c000a74 <exec_quantization+0x98>
    queue->first = block;
1c000b30:	c51c                	sw	a5,8(a0)
1c000b32:	b5dd                	j	1c000a18 <exec_quantization+0x3c>

1c000b34 <check_fetch_block>:
  return queue->first == NULL;
1c000b34:	4d18                	lw	a4,24(a0)
    enc->current_du_y += 8;
  }
}

static int check_fetch_block(cl_enc_t *enc)
{
1c000b36:	87aa                	mv	a5,a0
  if (list_is_empty(&enc->free_blocks) || enc->current_du_y >= enc->height || enc->nb_fetched_block == enc->nb_block)
1c000b38:	cb79                	beqz	a4,1c000c0e <check_fetch_block+0xda>
1c000b3a:	4130                	lw	a2,64(a0)
1c000b3c:	5954                	lw	a3,52(a0)
1c000b3e:	0cd65863          	ble	a3,a2,1c000c0e <check_fetch_block+0xda>
1c000b42:	5514                	lw	a3,40(a0)
1c000b44:	5150                	lw	a2,36(a0)
1c000b46:	0cc68463          	beq	a3,a2,1c000c0e <check_fetch_block+0xda>
  list->first = result->next;
1c000b4a:	4b48                	lw	a0,20(a4)
  *x = enc->current_du_x;
1c000b4c:	5fd0                	lw	a2,60(a5)
    return -1;

  cl_enc_block_t *block = list_pop(&enc->free_blocks);

  block->id = enc->nb_fetched_block++;
1c000b4e:	00168593          	addi	a1,a3,1
  list->first = result->next;
1c000b52:	cf88                	sw	a0,24(a5)
  block->id = enc->nb_fetched_block++;
1c000b54:	d78c                	sw	a1,40(a5)
  *x = enc->current_du_x;
1c000b56:	c350                	sw	a2,4(a4)
  *y = enc->current_du_y;
1c000b58:	43b0                	lw	a2,64(a5)
  block->id = enc->nb_fetched_block++;
1c000b5a:	c314                	sw	a3,0(a4)
  *y = enc->current_du_y;
1c000b5c:	c710                	sw	a2,8(a4)
  enc->current_du_x += 8;
1c000b5e:	5fd4                	lw	a3,60(a5)
  if (enc->current_du_x >= enc->width)
1c000b60:	5b90                	lw	a2,48(a5)
  enc->current_du_x += 8;
1c000b62:	06a1                	addi	a3,a3,8
1c000b64:	dfd4                	sw	a3,60(a5)
  if (enc->current_du_x >= enc->width)
1c000b66:	0ac6d663          	ble	a2,a3,1c000c12 <check_fetch_block+0xde>
  alloc_du(enc, &block->x, &block->y);
  block->state = BLOCK_STATE_FETCHED;
  block->prev_du = enc->current_du;
1c000b6a:	5394                	lw	a3,32(a5)
  block->state = BLOCK_STATE_FETCHED;
1c000b6c:	4605                	li	a2,1
1c000b6e:	cf10                	sw	a2,24(a4)
  block->prev_du = enc->current_du;
1c000b70:	c754                	sw	a3,12(a4)
  enc->current_du = block;
1c000b72:	d398                	sw	a4,32(a5)
  if (!block->prev_du)
1c000b74:	cad5                	beqz	a3,1c000c28 <check_fetch_block+0xf4>
1c000b76:	002045b7          	lui	a1,0x204
1c000b7a:	0c05a023          	sw	zero,192(a1) # 2040c0 <__L2+0x1840c0>
    block->vp = enc->prev_du;
  pi_cl_team_critical_exit();
  uint32_t ext = enc->image + enc->width * block->y + block->x;
1c000b7e:	5f90                	lw	a2,56(a5)
1c000b80:	00472803          	lw	a6,4(a4)
1c000b84:	5b94                	lw	a3,48(a5)
1c000b86:	4708                	lw	a0,8(a4)
1c000b88:	9642                	add	a2,a2,a6

  //printf("[%p] Fetching block (id: %d, x: %d, y: %d, ext: 0x%lx, loc: 0x%lx)\n", block, block->id, block->x, block->y, ext, (uint32_t)block->data);

  pi_cl_dma_cmd_2d(ext, (uint32_t)block->data, 64, enc->width, 8, PI_CL_DMA_DIR_EXT2LOC, &block->dma_cmd);
1c000b8a:	02470893          	addi	a7,a4,36
  uint32_t ext = enc->image + enc->width * block->y + block->x;
1c000b8e:	42a68633          	p.mac	a2,a3,a0
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000b92:	30047373          	csrrci	t1,mstatus,8

    int irq = rt_irq_disable();

    int id = -1;

    if (stride < (1<<15))
1c000b96:	6521                	lui	a0,0x8
1c000b98:	08a6fd63          	bleu	a0,a3,1c000c32 <check_fetch_block+0xfe>
#define DMA_WRITE(value, offset) pulp_write32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset), (value))
#define DMA_READ(offset) pulp_read32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset))
#endif

static inline int plp_dma_counter_alloc() {
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c000b9c:	4005a583          	lw	a1,1024(a1)
static inline unsigned int plp_dma_getStrides(unsigned short stride, unsigned short len) {
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
}

static inline void plp_dma_cmd_push(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr) {
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c000ba0:	002f0837          	lui	a6,0x2f0
1c000ba4:	00204537          	lui	a0,0x204
1c000ba8:	04080813          	addi	a6,a6,64 # 2f0040 <__L2+0x270040>
1c000bac:	41052023          	sw	a6,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c000bb0:	41152023          	sw	a7,1024(a0)
#if defined(ARCHI_HAS_MCHAN_64) && ARCHI_HAS_MCHAN_64 == 1
  DMA_WRITE((int)extAddr, PLP_DMA_QUEUE_OFFSET);
  DMA_WRITE((int)(extAddr>>32), PLP_DMA_QUEUE_OFFSET);
#else
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c000bb4:	40c52023          	sw	a2,1024(a0)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c000bb8:	06c2                	slli	a3,a3,0x10
1c000bba:	c036c6b3          	p.bset	a3,a3,0,3
#endif
}

static inline void plp_dma_cmd_push_2d(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr, unsigned int stride, unsigned int length) {
  plp_dma_cmd_push(cmd, locAddr, extAddr);
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c000bbe:	40d52023          	sw	a3,1024(a0)
        unsigned int cmd = plp_dma_getCmd(dir, size, PLP_DMA_2D, PLP_DMA_TRIG_EVT, PLP_DMA_NO_TRIG_IRQ, PLP_DMA_SHARED);
        // Prevent the compiler from pushing the transfer before all previous
        // stores are done
        __asm__ __volatile__ ("" : : : "memory");
        plp_dma_cmd_push_2d(cmd, loc, ext, stride, length);
        if (!merge) copy->id = id;
1c000bc2:	3ab72223          	sw	a1,932(a4)
        copy->length = 0;
1c000bc6:	3a072a23          	sw	zero,948(a4)
  __builtin_pulp_spr_write(reg, val);
1c000bca:	30031073          	csrw	mstatus,t1
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000bce:	002046b7          	lui	a3,0x204
1c000bd2:	0c06e603          	p.elw	a2,192(a3) # 2040c0 <__L2+0x1840c0>
  if (queue->first)
1c000bd6:	4394                	lw	a3,0(a5)
1c000bd8:	cadd                	beqz	a3,1c000c8e <check_fetch_block+0x15a>
    queue->last->next = block;
1c000bda:	43d4                	lw	a3,4(a5)
1c000bdc:	cad8                	sw	a4,20(a3)
  enc->ready_blocks++;
1c000bde:	4bf4                	lw	a3,84(a5)
  queue->last = block;
1c000be0:	c3d8                	sw	a4,4(a5)
  uint32_t waiting_cores = enc->ready_blocks_waiting_cores;
1c000be2:	4fb0                	lw	a2,88(a5)
  block->next = NULL;
1c000be4:	00072a23          	sw	zero,20(a4)
  enc->ready_blocks++;
1c000be8:	00168713          	addi	a4,a3,1
1c000bec:	cbf8                	sw	a4,84(a5)
  pi_cl_team_critical_enter();

  queue_push(&enc->fetched_blocks, block);
  push_ready_block(enc);

  return 0;
1c000bee:	4501                	li	a0,0
  if (waiting_cores)
1c000bf0:	c205                	beqz	a2,1c000c10 <check_fetch_block+0xdc>
    int core = __FL1(waiting_cores);
1c000bf2:	100616b3          	p.fl1	a3,a2
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c000bf6:	4705                	li	a4,1
1c000bf8:	00d71733          	sll	a4,a4,a3
1c000bfc:	fff74693          	not	a3,a4
1c000c00:	8e75                	and	a2,a2,a3
1c000c02:	cfb0                	sw	a2,88(a5)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (event << 2), coreSet);
1c000c04:	002047b7          	lui	a5,0x204
1c000c08:	10e7ac23          	sw	a4,280(a5) # 204118 <__L2+0x184118>
1c000c0c:	8082                	ret
    return -1;
1c000c0e:	557d                	li	a0,-1
}
1c000c10:	8082                	ret
    enc->current_du_y += 8;
1c000c12:	43b4                	lw	a3,64(a5)
    enc->current_du_x = 0;
1c000c14:	0207ae23          	sw	zero,60(a5)
  block->state = BLOCK_STATE_FETCHED;
1c000c18:	4605                	li	a2,1
    enc->current_du_y += 8;
1c000c1a:	06a1                	addi	a3,a3,8
1c000c1c:	c3b4                	sw	a3,64(a5)
  block->prev_du = enc->current_du;
1c000c1e:	5394                	lw	a3,32(a5)
  block->state = BLOCK_STATE_FETCHED;
1c000c20:	cf10                	sw	a2,24(a4)
  block->prev_du = enc->current_du;
1c000c22:	c754                	sw	a3,12(a4)
  enc->current_du = block;
1c000c24:	d398                	sw	a4,32(a5)
  if (!block->prev_du)
1c000c26:	faa1                	bnez	a3,1c000b76 <check_fetch_block+0x42>
    block->vp = enc->prev_du;
1c000c28:	0447c683          	lbu	a3,68(a5)
1c000c2c:	00d71f23          	sh	a3,30(a4)
1c000c30:	b799                	j	1c000b76 <check_fetch_block+0x42>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c000c32:	4821                	li	a6,8
    {
        /* Emul 2D transfer, using multiple 1D transfers. */
        uint32_t iter_length = (size < length) ? size : length;
        uint32_t dma_cmd = plp_dma_getCmd(dir, iter_length, PLP_DMA_1D,
                                          PLP_DMA_NO_TRIG_EVT, PLP_DMA_TRIG_IRQ, PLP_DMA_SHARED);
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c000c34:	00330eb7          	lui	t4,0x330
    if (__rt_dma_first_pending)
1c000c38:	01402e03          	lw	t3,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c000c3c:	c3084533          	p.bset	a0,a6,1,16
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c000c40:	3bd72423          	sw	t4,936(a4)
    cmd->length = length;
1c000c44:	3b072a23          	sw	a6,948(a4)
    cmd->size = len;
1c000c48:	04000e93          	li	t4,64
    cmd->id = tid;
1c000c4c:	587d                	li	a6,-1
1c000c4e:	3b072223          	sw	a6,932(a4)
    cmd->loc_addr = loc;
1c000c52:	3b172c23          	sw	a7,952(a4)
    cmd->ext_addr = ext;
1c000c56:	3ac72e23          	sw	a2,956(a4)
    cmd->size = len;
1c000c5a:	3bd72623          	sw	t4,940(a4)
    cmd->stride = stride;
1c000c5e:	3ad72823          	sw	a3,944(a4)
    cmd->next = NULL;
1c000c62:	3c072023          	sw	zero,960(a4)
  pi_cl_dma_cmd_2d(ext, (uint32_t)block->data, 64, enc->width, 8, PI_CL_DMA_DIR_EXT2LOC, &block->dma_cmd);
1c000c66:	3a470813          	addi	a6,a4,932
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c000c6a:	c3454533          	p.bset	a0,a0,1,20
    if (__rt_dma_first_pending)
1c000c6e:	020e0263          	beqz	t3,1c000c92 <check_fetch_block+0x15e>
        __rt_dma_last_pending->next = cmd;
1c000c72:	01002683          	lw	a3,16(zero) # 10 <__rt_bridge_flash_cs>
1c000c76:	0106ae23          	sw	a6,28(a3)
    __rt_dma_last_pending = cmd;
1c000c7a:	01002823          	sw	a6,16(zero) # 10 <__rt_bridge_flash_cs>
1c000c7e:	30031073          	csrw	mstatus,t1
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000c82:	002046b7          	lui	a3,0x204
1c000c86:	0c06e603          	p.elw	a2,192(a3) # 2040c0 <__L2+0x1840c0>
  if (queue->first)
1c000c8a:	4394                	lw	a3,0(a5)
1c000c8c:	f6b9                	bnez	a3,1c000bda <check_fetch_block+0xa6>
    queue->first = block;
1c000c8e:	c398                	sw	a4,0(a5)
1c000c90:	b7b9                	j	1c000bde <check_fetch_block+0xaa>
        cmd->ext_addr += stride;
1c000c92:	96b2                	add	a3,a3,a2
        cmd->loc_addr += iter_length;
1c000c94:	02c70e13          	addi	t3,a4,44
        cmd->ext_addr += stride;
1c000c98:	3ad72e23          	sw	a3,956(a4)
        cmd->size -= iter_length;
1c000c9c:	03800693          	li	a3,56
        cmd->loc_addr += iter_length;
1c000ca0:	3bc72c23          	sw	t3,952(a4)
        cmd->size -= iter_length;
1c000ca4:	3ad72623          	sw	a3,940(a4)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c000ca8:	4005a583          	lw	a1,1024(a1)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c000cac:	002046b7          	lui	a3,0x204
        cmd->id = plp_dma_counter_alloc();
1c000cb0:	3ab72223          	sw	a1,932(a4)
1c000cb4:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c000cb8:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c000cbc:	40c6a023          	sw	a2,1024(a3)
        if (cmd->length != 0)
1c000cc0:	3b472683          	lw	a3,948(a4)
1c000cc4:	dadd                	beqz	a3,1c000c7a <check_fetch_block+0x146>
            __rt_dma_first_pending = cmd;
1c000cc6:	01002a23          	sw	a6,20(zero) # 14 <__rt_bridge_eeprom_handle>
    __rt_dma_last_pending = cmd;
1c000cca:	01002823          	sw	a6,16(zero) # 10 <__rt_bridge_flash_cs>
1c000cce:	bf45                	j	1c000c7e <check_fetch_block+0x14a>

1c000cd0 <__jpeg_encoder_init_constants>:
static void __jpeg_encoder_init_constants(void *arg)
{
    jpeg_encoder_t *enc = (jpeg_encoder_t *)arg;
    pi_cl_dma_cmd_t dma_cmd;

    pi_cl_dma_cmd((uint32_t)&JpegConstants, (uint32_t)enc->l1_constants, sizeof(JpegConstants), PI_CL_DMA_DIR_EXT2LOC, &dma_cmd);
1c000cd0:	0e852583          	lw	a1,232(a0)
{
1c000cd4:	1101                	addi	sp,sp,-32
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000cd6:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c000cda:	002047b7          	lui	a5,0x204
1c000cde:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c000ce2:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c000ce6:	77470713          	addi	a4,a4,1908 # b0774 <__L2+0x30774>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c000cea:	c1574733          	p.bset	a4,a4,0,21
1c000cee:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c000cf2:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c000cf6:	1c00b737          	lui	a4,0x1c00b
1c000cfa:	57c70713          	addi	a4,a4,1404 # 1c00b57c <JpegConstants>
1c000cfe:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c000d02:	c032                	sw	a2,0(sp)
        copy->length = 0;
1c000d04:	c802                	sw	zero,16(sp)
  __builtin_pulp_spr_write(reg, val);
1c000d06:	30069073          	csrw	mstatus,a3
{
#ifdef __RT_USE_PROFILE
  int trace = __rt_pe_trace[rt_core_id()];
  gv_vcd_dump_trace(trace, 5);
#endif
  if (copy->length == 0)
1c000d0a:	4742                	lw	a4,16(sp)
1c000d0c:	cf19                	beqz	a4,1c000d2a <__jpeg_encoder_init_constants+0x5a>

    rt_irq_restore(irq);
  }
  else
  {
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c000d0e:	46e2                	lw	a3,24(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c000d10:	02000713          	li	a4,32
1c000d14:	ca89                	beqz	a3,1c000d26 <__jpeg_encoder_init_constants+0x56>
1c000d16:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000d1a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c000d1e:	00e7a223          	sw	a4,4(a5)
1c000d22:	46e2                	lw	a3,24(sp)
1c000d24:	faed                	bnez	a3,1c000d16 <__jpeg_encoder_init_constants+0x46>
    pi_cl_dma_cmd_wait(&dma_cmd);
}
1c000d26:	6105                	addi	sp,sp,32
1c000d28:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000d2a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c000d2e:	4047a783          	lw	a5,1028(a5)
1c000d32:	4682                	lw	a3,0(sp)
1c000d34:	40d7d7b3          	sra	a5,a5,a3
1c000d38:	fc17b7b3          	p.bclr	a5,a5,30,1
1c000d3c:	c79d                	beqz	a5,1c000d6a <__jpeg_encoder_init_constants+0x9a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c000d3e:	10000593          	li	a1,256
1c000d42:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c000d46:	30061073          	csrw	mstatus,a2
1c000d4a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000d4e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c000d52:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000d56:	30047673          	csrrci	a2,mstatus,8
1c000d5a:	40472783          	lw	a5,1028(a4)
1c000d5e:	4682                	lw	a3,0(sp)
1c000d60:	40d7d7b3          	sra	a5,a5,a3
1c000d64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c000d68:	fff9                	bnez	a5,1c000d46 <__jpeg_encoder_init_constants+0x76>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c000d6a:	4785                	li	a5,1
1c000d6c:	00d796b3          	sll	a3,a5,a3
1c000d70:	002047b7          	lui	a5,0x204
1c000d74:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c000d78:	30061073          	csrw	mstatus,a2
1c000d7c:	6105                	addi	sp,sp,32
1c000d7e:	8082                	ret

1c000d80 <AppendBytes_cl>:
  int size = current - &enc->l1_bitstream[enc->l1_bitstream_id][0];
1c000d80:	26452783          	lw	a5,612(a0)
  if (size >= L1_BITSTREAM_SIZE - 4 || flush)
1c000d84:	0fb00693          	li	a3,251
  int size = current - &enc->l1_bitstream[enc->l1_bitstream_id][0];
1c000d88:	07a2                	slli	a5,a5,0x8
1c000d8a:	06478793          	addi	a5,a5,100
1c000d8e:	97aa                	add	a5,a5,a0
1c000d90:	40f58733          	sub	a4,a1,a5
  if (size >= L1_BITSTREAM_SIZE - 4 || flush)
1c000d94:	00e6c363          	blt	a3,a4,1c000d9a <AppendBytes_cl+0x1a>
1c000d98:	ce35                	beqz	a2,1c000e14 <AppendBytes_cl+0x94>
    if (enc->pending_dma)
1c000d9a:	29052683          	lw	a3,656(a0)
1c000d9e:	e2f5                	bnez	a3,1c000e82 <AppendBytes_cl+0x102>
    pi_cl_dma_cmd((uint32_t)enc->current_ext_bitstream, (uint32_t)&enc->l1_bitstream[enc->l1_bitstream_id][0], size, PI_CL_DMA_DIR_LOC2EXT, &enc->dma_cmd);
1c000da0:	26c52883          	lw	a7,620(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000da4:	30047373          	csrrci	t1,mstatus,8
    if (size < max_len)
1c000da8:	01071693          	slli	a3,a4,0x10
1c000dac:	10075833          	p.exthz	a6,a4
1c000db0:	1406c963          	bltz	a3,1c000f02 <AppendBytes_cl+0x182>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c000db4:	002046b7          	lui	a3,0x204
1c000db8:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c000dbc:	002a0eb7          	lui	t4,0x2a0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c000dc0:	01d86833          	or	a6,a6,t4
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c000dc4:	4106a023          	sw	a6,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c000dc8:	40f6a023          	sw	a5,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c000dcc:	4116a023          	sw	a7,1024(a3)
        if (!merge) copy->id = id;
1c000dd0:	27c52823          	sw	t3,624(a0)
        copy->length = 0;
1c000dd4:	28052023          	sw	zero,640(a0)
  __builtin_pulp_spr_write(reg, val);
1c000dd8:	30031073          	csrw	mstatus,t1
    if (flush) {
1c000ddc:	ee1d                	bnez	a2,1c000e1a <AppendBytes_cl+0x9a>
      enc->pending_dma = 1;
1c000dde:	4785                	li	a5,1
1c000de0:	28f52823          	sw	a5,656(a0)
    enc->l1_bitstream_id ^= 1;
1c000de4:	26452683          	lw	a3,612(a0)
    enc->current_ext_bitstream += size;
1c000de8:	26c52803          	lw	a6,620(a0)
    enc->l1_bitstream_id ^= 1;
1c000dec:	0016c693          	xori	a3,a3,1
    enc->current_bitstream = &enc->l1_bitstream[enc->l1_bitstream_id][0];
1c000df0:	00869793          	slli	a5,a3,0x8
1c000df4:	06478613          	addi	a2,a5,100
    enc->current_ext_bitstream += size;
1c000df8:	9742                	add	a4,a4,a6
    enc->current_bitstream = &enc->l1_bitstream[enc->l1_bitstream_id][0];
1c000dfa:	962a                	add	a2,a2,a0
    enc->current_ext_bitstream += size;
1c000dfc:	26e52623          	sw	a4,620(a0)
    enc->l1_bitstream_id ^= 1;
1c000e00:	26d52223          	sw	a3,612(a0)
    enc->current_bitstream = &enc->l1_bitstream[enc->l1_bitstream_id][0];
1c000e04:	26c52423          	sw	a2,616(a0)
    *enc->current_bitstream = *current;
1c000e08:	0005c703          	lbu	a4,0(a1)
1c000e0c:	953e                	add	a0,a0,a5
1c000e0e:	06e50223          	sb	a4,100(a0)
1c000e12:	8082                	ret
    enc->current_bitstream = current;
1c000e14:	26b52423          	sw	a1,616(a0)
}
1c000e18:	8082                	ret
  if (copy->length == 0)
1c000e1a:	28052783          	lw	a5,640(a0)
1c000e1e:	14079b63          	bnez	a5,1c000f74 <AppendBytes_cl+0x1f4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000e22:	30047873          	csrrci	a6,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c000e26:	002047b7          	lui	a5,0x204
1c000e2a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c000e2e:	27052603          	lw	a2,624(a0)
1c000e32:	40c7d7b3          	sra	a5,a5,a2
1c000e36:	fc17b7b3          	p.bclr	a5,a5,30,1
1c000e3a:	cb85                	beqz	a5,1c000e6a <AppendBytes_cl+0xea>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c000e3c:	10000893          	li	a7,256
1c000e40:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c000e44:	30081073          	csrw	mstatus,a6
1c000e48:	0116a423          	sw	a7,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000e4c:	03c6e783          	p.elw	a5,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c000e50:	0116a223          	sw	a7,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000e54:	30047873          	csrrci	a6,mstatus,8
1c000e58:	4046a783          	lw	a5,1028(a3)
1c000e5c:	27052603          	lw	a2,624(a0)
1c000e60:	40c7d7b3          	sra	a5,a5,a2
1c000e64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c000e68:	fff1                	bnez	a5,1c000e44 <AppendBytes_cl+0xc4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c000e6a:	4785                	li	a5,1
1c000e6c:	00c79633          	sll	a2,a5,a2
1c000e70:	002047b7          	lui	a5,0x204
1c000e74:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c000e78:	30081073          	csrw	mstatus,a6
      enc->pending_dma = 0;
1c000e7c:	28052823          	sw	zero,656(a0)
1c000e80:	b795                	j	1c000de4 <AppendBytes_cl+0x64>
  if (copy->length == 0)
1c000e82:	28052683          	lw	a3,640(a0)
1c000e86:	eedd                	bnez	a3,1c000f44 <AppendBytes_cl+0x1c4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000e88:	300478f3          	csrrci	a7,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c000e8c:	002047b7          	lui	a5,0x204
1c000e90:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c000e94:	27052803          	lw	a6,624(a0)
1c000e98:	4107d7b3          	sra	a5,a5,a6
1c000e9c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c000ea0:	cb85                	beqz	a5,1c000ed0 <AppendBytes_cl+0x150>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c000ea2:	10000313          	li	t1,256
1c000ea6:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c000eaa:	30089073          	csrw	mstatus,a7
1c000eae:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000eb2:	03c6e783          	p.elw	a5,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c000eb6:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000eba:	300478f3          	csrrci	a7,mstatus,8
1c000ebe:	4046a783          	lw	a5,1028(a3)
1c000ec2:	27052803          	lw	a6,624(a0)
1c000ec6:	4107d7b3          	sra	a5,a5,a6
1c000eca:	fc17b7b3          	p.bclr	a5,a5,30,1
1c000ece:	fff1                	bnez	a5,1c000eaa <AppendBytes_cl+0x12a>
1c000ed0:	4785                	li	a5,1
1c000ed2:	01079833          	sll	a6,a5,a6
1c000ed6:	002047b7          	lui	a5,0x204
1c000eda:	4107a223          	sw	a6,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c000ede:	30089073          	csrw	mstatus,a7
1c000ee2:	26452783          	lw	a5,612(a0)
    pi_cl_dma_cmd((uint32_t)enc->current_ext_bitstream, (uint32_t)&enc->l1_bitstream[enc->l1_bitstream_id][0], size, PI_CL_DMA_DIR_LOC2EXT, &enc->dma_cmd);
1c000ee6:	26c52883          	lw	a7,620(a0)
1c000eea:	07a2                	slli	a5,a5,0x8
1c000eec:	06478793          	addi	a5,a5,100
1c000ef0:	97aa                	add	a5,a5,a0
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000ef2:	30047373          	csrrci	t1,mstatus,8
    if (size < max_len)
1c000ef6:	01071693          	slli	a3,a4,0x10
1c000efa:	10075833          	p.exthz	a6,a4
1c000efe:	ea06dbe3          	bgez	a3,1c000db4 <AppendBytes_cl+0x34>
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c000f02:	00320e37          	lui	t3,0x320
    if (__rt_dma_first_pending)
1c000f06:	01402e83          	lw	t4,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c000f0a:	66a1                	lui	a3,0x8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c000f0c:	27c52a23          	sw	t3,628(a0)
    cmd->id = tid;
1c000f10:	5e7d                	li	t3,-1
1c000f12:	27c52823          	sw	t3,624(a0)
    cmd->loc_addr = loc;
1c000f16:	28f52223          	sw	a5,644(a0)
    cmd->ext_addr = ext;
1c000f1a:	29152423          	sw	a7,648(a0)
    cmd->size = len;
1c000f1e:	27052c23          	sw	a6,632(a0)
    cmd->stride = stride;
1c000f22:	26d52e23          	sw	a3,636(a0)
    cmd->length = length;
1c000f26:	28d52023          	sw	a3,640(a0)
    cmd->next = NULL;
1c000f2a:	28052623          	sw	zero,652(a0)
1c000f2e:	27050e13          	addi	t3,a0,624
    if (__rt_dma_first_pending)
1c000f32:	060e8563          	beqz	t4,1c000f9c <AppendBytes_cl+0x21c>
        __rt_dma_last_pending->next = cmd;
1c000f36:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c000f3a:	01c7ae23          	sw	t3,28(a5)
    __rt_dma_last_pending = cmd;
1c000f3e:	01c02823          	sw	t3,16(zero) # 10 <__rt_bridge_flash_cs>
1c000f42:	bd59                	j	1c000dd8 <AppendBytes_cl+0x58>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c000f44:	28852883          	lw	a7,648(a0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c000f48:	02000813          	li	a6,32
1c000f4c:	002046b7          	lui	a3,0x204
1c000f50:	e40888e3          	beqz	a7,1c000da0 <AppendBytes_cl+0x20>
1c000f54:	0106a423          	sw	a6,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000f58:	03c6e783          	p.elw	a5,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c000f5c:	0106a223          	sw	a6,4(a3)
1c000f60:	28852783          	lw	a5,648(a0)
1c000f64:	fbe5                	bnez	a5,1c000f54 <AppendBytes_cl+0x1d4>
1c000f66:	26452783          	lw	a5,612(a0)
1c000f6a:	07a2                	slli	a5,a5,0x8
1c000f6c:	06478793          	addi	a5,a5,100
1c000f70:	97aa                	add	a5,a5,a0
1c000f72:	b53d                	j	1c000da0 <AppendBytes_cl+0x20>
1c000f74:	28852603          	lw	a2,648(a0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c000f78:	02000693          	li	a3,32
1c000f7c:	002047b7          	lui	a5,0x204
1c000f80:	ee060ee3          	beqz	a2,1c000e7c <AppendBytes_cl+0xfc>
1c000f84:	00d7a423          	sw	a3,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000f88:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c000f8c:	00d7a223          	sw	a3,4(a5)
1c000f90:	28852603          	lw	a2,648(a0)
1c000f94:	fa65                	bnez	a2,1c000f84 <AppendBytes_cl+0x204>
      enc->pending_dma = 0;
1c000f96:	28052823          	sw	zero,656(a0)
1c000f9a:	b5a9                	j	1c000de4 <AppendBytes_cl+0x64>
    uint32_t iter_length = (len < length) ? len : length;
1c000f9c:	04d85eb3          	p.minu	t4,a6,a3
        cmd->loc_addr += iter_length;
1c000fa0:	01d78f33          	add	t5,a5,t4
        cmd->ext_addr += stride;
1c000fa4:	96c6                	add	a3,a3,a7
        cmd->size -= iter_length;
1c000fa6:	41d80833          	sub	a6,a6,t4
        cmd->loc_addr += iter_length;
1c000faa:	29e52223          	sw	t5,644(a0)
        cmd->ext_addr += stride;
1c000fae:	28d52423          	sw	a3,648(a0)
        cmd->size -= iter_length;
1c000fb2:	27052c23          	sw	a6,632(a0)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c000fb6:	002046b7          	lui	a3,0x204
1c000fba:	4006a803          	lw	a6,1024(a3) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c000fbe:	27052823          	sw	a6,624(a0)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c000fc2:	00328837          	lui	a6,0x328
1c000fc6:	4106a023          	sw	a6,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c000fca:	40f6a023          	sw	a5,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c000fce:	4116a023          	sw	a7,1024(a3)
        if (cmd->length != 0)
1c000fd2:	28052783          	lw	a5,640(a0)
1c000fd6:	d7a5                	beqz	a5,1c000f3e <AppendBytes_cl+0x1be>
            __rt_dma_first_pending = cmd;
1c000fd8:	01c02a23          	sw	t3,20(zero) # 14 <__rt_bridge_eeprom_handle>
    __rt_dma_last_pending = cmd;
1c000fdc:	01c02823          	sw	t3,16(zero) # 10 <__rt_bridge_flash_cs>
1c000fe0:	bbe5                	j	1c000dd8 <AppendBytes_cl+0x58>

1c000fe2 <exec_check_bitstream>:
{
1c000fe2:	715d                	addi	sp,sp,-80
1c000fe4:	c2a6                	sw	s1,68(sp)
1c000fe6:	ce6e                	sw	s11,28(sp)
1c000fe8:	c686                	sw	ra,76(sp)
1c000fea:	c4a2                	sw	s0,72(sp)
1c000fec:	c0ca                	sw	s2,64(sp)
1c000fee:	de4e                	sw	s3,60(sp)
1c000ff0:	dc52                	sw	s4,56(sp)
1c000ff2:	da56                	sw	s5,52(sp)
1c000ff4:	d85a                	sw	s6,48(sp)
1c000ff6:	d65e                	sw	s7,44(sp)
1c000ff8:	d462                	sw	s8,40(sp)
1c000ffa:	d266                	sw	s9,36(sp)
1c000ffc:	d06a                	sw	s10,32(sp)
1c000ffe:	8daa                	mv	s11,a0
1c001000:	84ae                	mv	s1,a1
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001002:	002047b7          	lui	a5,0x204
1c001006:	0c07e703          	p.elw	a4,192(a5) # 2040c0 <__L2+0x1840c0>
  if (enc->bitstream_lock || block->id != enc->current_bitstream_block)
1c00100a:	453c                	lw	a5,72(a0)
1c00100c:	e789                	bnez	a5,1c001016 <exec_check_bitstream+0x34>
1c00100e:	4198                	lw	a4,0(a1)
1c001010:	4d7c                	lw	a5,92(a0)
1c001012:	06f70163          	beq	a4,a5,1c001074 <exec_check_bitstream+0x92>
  cl_enc_block_t *prev = NULL, *current=queue->first;
1c001016:	010da703          	lw	a4,16(s11)
  while (current && current->id < block->id)
1c00101a:	c331                	beqz	a4,1c00105e <exec_check_bitstream+0x7c>
1c00101c:	4090                	lw	a2,0(s1)
1c00101e:	431c                	lw	a5,0(a4)
1c001020:	00c7c763          	blt	a5,a2,1c00102e <exec_check_bitstream+0x4c>
1c001024:	a0a1                	j	1c00106c <exec_check_bitstream+0x8a>
1c001026:	4394                	lw	a3,0(a5)
1c001028:	00c6d563          	ble	a2,a3,1c001032 <exec_check_bitstream+0x50>
1c00102c:	873e                	mv	a4,a5
    current = current->next;
1c00102e:	4b5c                	lw	a5,20(a4)
  while (current && current->id < block->id)
1c001030:	fbfd                	bnez	a5,1c001026 <exec_check_bitstream+0x44>
    prev->next = block;
1c001032:	cb44                	sw	s1,20(a4)
  block->next = current;
1c001034:	c8dc                	sw	a5,20(s1)
  if (!current)
1c001036:	cb85                	beqz	a5,1c001066 <exec_check_bitstream+0x84>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c001038:	002047b7          	lui	a5,0x204
1c00103c:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
}
1c001040:	40b6                	lw	ra,76(sp)
1c001042:	4426                	lw	s0,72(sp)
1c001044:	4496                	lw	s1,68(sp)
1c001046:	4906                	lw	s2,64(sp)
1c001048:	59f2                	lw	s3,60(sp)
1c00104a:	5a62                	lw	s4,56(sp)
1c00104c:	5ad2                	lw	s5,52(sp)
1c00104e:	5b42                	lw	s6,48(sp)
1c001050:	5bb2                	lw	s7,44(sp)
1c001052:	5c22                	lw	s8,40(sp)
1c001054:	5c92                	lw	s9,36(sp)
1c001056:	5d02                	lw	s10,32(sp)
1c001058:	4df2                	lw	s11,28(sp)
1c00105a:	6161                	addi	sp,sp,80
1c00105c:	8082                	ret
    queue->first = block;
1c00105e:	009da823          	sw	s1,16(s11)
  block->next = current;
1c001062:	0004aa23          	sw	zero,20(s1)
    queue->last = block;
1c001066:	009daa23          	sw	s1,20(s11)
1c00106a:	b7f9                	j	1c001038 <exec_check_bitstream+0x56>
    queue->first = block;
1c00106c:	009da823          	sw	s1,16(s11)
  block->next = current;
1c001070:	c8d8                	sw	a4,20(s1)
1c001072:	b7d9                	j	1c001038 <exec_check_bitstream+0x56>
  enc->bitstream_lock = 1;
1c001074:	4785                	li	a5,1
1c001076:	c53c                	sw	a5,72(a0)
1c001078:	002047b7          	lui	a5,0x204
1c00107c:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
  const unsigned short *RLE_DC_LUT = enc->constants->HUFTAB_LUMIN_DC_Code;
1c001080:	06052983          	lw	s3,96(a0)
  while (Size >= 8)
1c001084:	441d                	li	s0,7
    if (*current == 0xff)
1c001086:	0ff00d13          	li	s10,255
  const unsigned short *RLE_DC_LUT = enc->constants->HUFTAB_LUMIN_DC_Code;
1c00108a:	72e98693          	addi	a3,s3,1838
  const unsigned char *RLE_DC_Size_LUT = enc->constants->HUFTAB_LUMIN_DC_Size;
1c00108e:	74698713          	addi	a4,s3,1862
  const unsigned short *RLE_AC_LUT = enc->constants->HUFTAB_LUMIN_AC_Code;
1c001092:	14098793          	addi	a5,s3,320
  const unsigned short *RLE_DC_LUT = enc->constants->HUFTAB_LUMIN_DC_Code;
1c001096:	c436                	sw	a3,8(sp)
  const unsigned char *RLE_DC_Size_LUT = enc->constants->HUFTAB_LUMIN_DC_Size;
1c001098:	c63a                	sw	a4,12(sp)
  const unsigned short *RLE_AC_LUT = enc->constants->HUFTAB_LUMIN_AC_Code;
1c00109a:	c23e                	sw	a5,4(sp)
  const unsigned char *RLE_AC_Size_LUT = enc->constants->HUFTAB_LUMIN_AC_Size;
1c00109c:	34098993          	addi	s3,s3,832
    int rest = 8 - done;
1c0010a0:	4921                	li	s2,8
    int SymbolSize = block->output[output_index++];
1c0010a2:	0a44ac03          	lw	s8,164(s1)
    RLE_Size = RLE_DC_Size_LUT[RLE_Index];
1c0010a6:	4732                	lw	a4,12(sp)
    int BitStreamIndex = enc->BitStreamIndex;
1c0010a8:	050dac83          	lw	s9,80(s11)
    BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c0010ac:	001c1793          	slli	a5,s8,0x1
    RLE_Size = RLE_DC_Size_LUT[RLE_Index];
1c0010b0:	018706b3          	add	a3,a4,s8
    BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c0010b4:	4722                	lw	a4,8(sp)
    RLE_Size = RLE_DC_Size_LUT[RLE_Index];
1c0010b6:	0006ca83          	lbu	s5,0(a3)
    int SymbolIndex = block->output[output_index++];
1c0010ba:	0a84ab03          	lw	s6,168(s1)
    BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c0010be:	97ba                	add	a5,a5,a4
  int done = BitPos % 8;
1c0010c0:	f83cb733          	p.bclr	a4,s9,28,3
    BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c0010c4:	0007d503          	lhu	a0,0(a5)
  unsigned char *current = enc->current_bitstream;
1c0010c8:	268da683          	lw	a3,616(s11)
  if (done)
1c0010cc:	56070463          	beqz	a4,1c001634 <exec_check_bitstream+0x652>
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0010d0:	0006c783          	lbu	a5,0(a3)
    int rest = 8 - done;
1c0010d4:	40e90633          	sub	a2,s2,a4
1c0010d8:	04cac633          	p.min	a2,s5,a2
    Size -= rest;
1c0010dc:	40ca88b3          	sub	a7,s5,a2
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0010e0:	00c797b3          	sll	a5,a5,a2
1c0010e4:	011555b3          	srl	a1,a0,a7
1c0010e8:	8fcd                	or	a5,a5,a1
1c0010ea:	0ff7f793          	andi	a5,a5,255
1c0010ee:	00f68023          	sb	a5,0(a3)
    if (done + rest < 8)
1c0010f2:	9732                	add	a4,a4,a2
1c0010f4:	04e45863          	ble	a4,s0,1c001144 <exec_check_bitstream+0x162>
1c0010f8:	00168713          	addi	a4,a3,1
    if (*current == 0xff)
1c0010fc:	35a78c63          	beq	a5,s10,1c001454 <exec_check_bitstream+0x472>
    current++;
1c001100:	86ba                	mv	a3,a4
  while (Size >= 8)
1c001102:	55145863          	ble	a7,s0,1c001652 <exec_check_bitstream+0x670>
1c001106:	ff888793          	addi	a5,a7,-8
1c00110a:	0037d713          	srli	a4,a5,0x3
1c00110e:	8646                	mv	a2,a7
1c001110:	0705                	addi	a4,a4,1
1c001112:	5407cd63          	bltz	a5,1c00166c <exec_check_bitstream+0x68a>
1c001116:	00d740fb          	lp.setup	x1,a4,1c001130 <exec_check_bitstream+0x14e>
    Size -= 8;
1c00111a:	1661                	addi	a2,a2,-8
    *current = (Val >> Size) & 0xff;
1c00111c:	00c557b3          	srl	a5,a0,a2
1c001120:	85b6                	mv	a1,a3
1c001122:	0ff7f793          	andi	a5,a5,255
1c001126:	00f580ab          	p.sb	a5,1(a1!)
    if (*current == 0xff)
1c00112a:	2da78863          	beq	a5,s10,1c0013fa <exec_check_bitstream+0x418>
1c00112e:	86ae                	mv	a3,a1
1c001130:	0001                	nop
1c001132:	f838b8b3          	p.bclr	a7,a7,28,3
  if (Size)
1c001136:	00088463          	beqz	a7,1c00113e <exec_check_bitstream+0x15c>
    *current = (Val) & 0xff;
1c00113a:	00a58023          	sb	a0,0(a1)
  AppendBytes_cl(enc, current, 0);
1c00113e:	4601                	li	a2,0
1c001140:	856e                	mv	a0,s11
1c001142:	393d                	jal	1c000d80 <AppendBytes_cl>
    BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_DC_LUT[RLE_Index], RLE_Size);
1c001144:	9ae6                	add	s5,s5,s9
  int done = BitPos % 8;
1c001146:	f83ab733          	p.bclr	a4,s5,28,3
  unsigned char *current = enc->current_bitstream;
1c00114a:	268da683          	lw	a3,616(s11)
  if (done)
1c00114e:	4e070163          	beqz	a4,1c001630 <exec_check_bitstream+0x64e>
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c001152:	0006c783          	lbu	a5,0(a3)
    int rest = 8 - done;
1c001156:	40e90633          	sub	a2,s2,a4
1c00115a:	04cc4633          	p.min	a2,s8,a2
    Size -= rest;
1c00115e:	40cc0533          	sub	a0,s8,a2
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c001162:	00c797b3          	sll	a5,a5,a2
1c001166:	00ab55b3          	srl	a1,s6,a0
1c00116a:	8fcd                	or	a5,a5,a1
1c00116c:	0ff7f793          	andi	a5,a5,255
1c001170:	00f68023          	sb	a5,0(a3)
    if (done + rest < 8)
1c001174:	9732                	add	a4,a4,a2
1c001176:	04e45763          	ble	a4,s0,1c0011c4 <exec_check_bitstream+0x1e2>
1c00117a:	00168713          	addi	a4,a3,1
    if (*current == 0xff)
1c00117e:	2da78463          	beq	a5,s10,1c001446 <exec_check_bitstream+0x464>
    current++;
1c001182:	86ba                	mv	a3,a4
  while (Size >= 8)
1c001184:	4ca45563          	ble	a0,s0,1c00164e <exec_check_bitstream+0x66c>
1c001188:	ff850793          	addi	a5,a0,-8
1c00118c:	0037d713          	srli	a4,a5,0x3
1c001190:	862a                	mv	a2,a0
1c001192:	0705                	addi	a4,a4,1
1c001194:	4e07c563          	bltz	a5,1c00167e <exec_check_bitstream+0x69c>
1c001198:	00d740fb          	lp.setup	x1,a4,1c0011b2 <exec_check_bitstream+0x1d0>
    Size -= 8;
1c00119c:	1661                	addi	a2,a2,-8
    *current = (Val >> Size) & 0xff;
1c00119e:	00cb57b3          	srl	a5,s6,a2
1c0011a2:	85b6                	mv	a1,a3
1c0011a4:	0ff7f793          	andi	a5,a5,255
1c0011a8:	00f580ab          	p.sb	a5,1(a1!)
    if (*current == 0xff)
1c0011ac:	25a78d63          	beq	a5,s10,1c001406 <exec_check_bitstream+0x424>
1c0011b0:	86ae                	mv	a3,a1
1c0011b2:	0001                	nop
1c0011b4:	f8353533          	p.bclr	a0,a0,28,3
  if (Size)
1c0011b8:	c119                	beqz	a0,1c0011be <exec_check_bitstream+0x1dc>
    *current = (Val) & 0xff;
1c0011ba:	01658023          	sb	s6,0(a1)
  AppendBytes_cl(enc, current, 0);
1c0011be:	4601                	li	a2,0
1c0011c0:	856e                	mv	a0,s11
1c0011c2:	3e7d                	jal	1c000d80 <AppendBytes_cl>
      int ZeroLength = block->output[output_index++];
1c0011c4:	0ac4a703          	lw	a4,172(s1)
    BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, SymbolIndex, SymbolSize);
1c0011c8:	9c56                	add	s8,s8,s5
      if (ZeroLength == -1)
1c0011ca:	15f72c63          	p.beqimm	a4,-1,1c001322 <exec_check_bitstream+0x340>
1c0011ce:	0b048c93          	addi	s9,s1,176
      int ZRL_Seq = ZeroLength / 16;
1c0011d2:	41f75e13          	srai	t3,a4,0x1f
      ZeroLength = ZeroLength % 16;
1c0011d6:	01ce5613          	srli	a2,t3,0x1c
1c0011da:	00c707b3          	add	a5,a4,a2
      int ZRL_Seq = ZeroLength / 16;
1c0011de:	f64e3e33          	p.bclr	t3,t3,27,4
      ZeroLength = ZeroLength % 16;
1c0011e2:	f647b7b3          	p.bclr	a5,a5,27,4
      int ZRL_Seq = ZeroLength / 16;
1c0011e6:	08ee2a5b          	p.addn	s4,t3,a4,4
      ZeroLength = ZeroLength % 16;
1c0011ea:	40c78ab3          	sub	s5,a5,a2
      int SymbolSize = block->output[output_index++];
1c0011ee:	000cab83          	lw	s7,0(s9)
      int SymbolIndex = block->output[output_index++];
1c0011f2:	004cab03          	lw	s6,4(s9)
1c0011f6:	268da703          	lw	a4,616(s11)
1c0011fa:	f83c3633          	p.bclr	a2,s8,28,3
      if (ZRL_Seq)
1c0011fe:	260a1c63          	bnez	s4,1c001476 <exec_check_bitstream+0x494>
      RLE_Index = (ZeroLength * 16) + SymbolSize;
1c001202:	004a9793          	slli	a5,s5,0x4
      BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_AC_LUT[RLE_Index], RLE_Size);
1c001206:	4692                	lw	a3,4(sp)
      RLE_Index = (ZeroLength * 16) + SymbolSize;
1c001208:	97de                	add	a5,a5,s7
      BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_AC_LUT[RLE_Index], RLE_Size);
1c00120a:	00179593          	slli	a1,a5,0x1
1c00120e:	95b6                	add	a1,a1,a3
      RLE_Size = RLE_AC_Size_LUT[RLE_Index];
1c001210:	97ce                	add	a5,a5,s3
1c001212:	0007ca83          	lbu	s5,0(a5)
      BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_AC_LUT[RLE_Index], RLE_Size);
1c001216:	0005de83          	lhu	t4,0(a1)
  if (done)
1c00121a:	24060963          	beqz	a2,1c00146c <exec_check_bitstream+0x48a>
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c00121e:	00074783          	lbu	a5,0(a4)
    int rest = 8 - done;
1c001222:	40c905b3          	sub	a1,s2,a2
1c001226:	04bac5b3          	p.min	a1,s5,a1
    Size -= rest;
1c00122a:	40ba8f33          	sub	t5,s5,a1
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c00122e:	00b797b3          	sll	a5,a5,a1
1c001232:	01eed533          	srl	a0,t4,t5
1c001236:	8fc9                	or	a5,a5,a0
1c001238:	0ff7f793          	andi	a5,a5,255
1c00123c:	00f70023          	sb	a5,0(a4)
    if (done + rest < 8)
1c001240:	962e                	add	a2,a2,a1
1c001242:	04c45863          	ble	a2,s0,1c001292 <exec_check_bitstream+0x2b0>
1c001246:	00170613          	addi	a2,a4,1
    if (*current == 0xff)
1c00124a:	1fa78763          	beq	a5,s10,1c001438 <exec_check_bitstream+0x456>
    current++;
1c00124e:	8732                	mv	a4,a2
  while (Size >= 8)
1c001250:	23e45163          	ble	t5,s0,1c001472 <exec_check_bitstream+0x490>
1c001254:	ff8f0793          	addi	a5,t5,-8
1c001258:	0037d613          	srli	a2,a5,0x3
1c00125c:	857a                	mv	a0,t5
1c00125e:	0605                	addi	a2,a2,1
1c001260:	4007cd63          	bltz	a5,1c00167a <exec_check_bitstream+0x698>
1c001264:	00d640fb          	lp.setup	x1,a2,1c00127e <exec_check_bitstream+0x29c>
    Size -= 8;
1c001268:	1561                	addi	a0,a0,-8
    *current = (Val >> Size) & 0xff;
1c00126a:	00aed7b3          	srl	a5,t4,a0
1c00126e:	85ba                	mv	a1,a4
1c001270:	0ff7f793          	andi	a5,a5,255
1c001274:	00f580ab          	p.sb	a5,1(a1!)
    if (*current == 0xff)
1c001278:	19a78d63          	beq	a5,s10,1c001412 <exec_check_bitstream+0x430>
1c00127c:	872e                	mv	a4,a1
1c00127e:	0001                	nop
1c001280:	f83f3f33          	p.bclr	t5,t5,28,3
  if (Size)
1c001284:	000f0463          	beqz	t5,1c00128c <exec_check_bitstream+0x2aa>
    *current = (Val) & 0xff;
1c001288:	01d58023          	sb	t4,0(a1)
  AppendBytes_cl(enc, current, 0);
1c00128c:	4601                	li	a2,0
1c00128e:	856e                	mv	a0,s11
1c001290:	3cc5                	jal	1c000d80 <AppendBytes_cl>
      BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, RLE_AC_LUT[RLE_Index], RLE_Size);
1c001292:	9c56                	add	s8,s8,s5
  int done = BitPos % 8;
1c001294:	f83c3733          	p.bclr	a4,s8,28,3
  unsigned char *current = enc->current_bitstream;
1c001298:	268da603          	lw	a2,616(s11)
  if (done)
1c00129c:	1c070363          	beqz	a4,1c001462 <exec_check_bitstream+0x480>
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0012a0:	00064783          	lbu	a5,0(a2)
    int rest = 8 - done;
1c0012a4:	40e905b3          	sub	a1,s2,a4
1c0012a8:	04bbc5b3          	p.min	a1,s7,a1
    Size -= rest;
1c0012ac:	40bb8e33          	sub	t3,s7,a1
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0012b0:	00b797b3          	sll	a5,a5,a1
1c0012b4:	01cb5533          	srl	a0,s6,t3
1c0012b8:	8fc9                	or	a5,a5,a0
1c0012ba:	0ff7f793          	andi	a5,a5,255
1c0012be:	00f60023          	sb	a5,0(a2)
    if (done + rest < 8)
1c0012c2:	972e                	add	a4,a4,a1
1c0012c4:	04e45963          	ble	a4,s0,1c001316 <exec_check_bitstream+0x334>
1c0012c8:	00160713          	addi	a4,a2,1
    if (*current == 0xff)
1c0012cc:	15a78f63          	beq	a5,s10,1c00142a <exec_check_bitstream+0x448>
    current++;
1c0012d0:	863a                	mv	a2,a4
  while (Size >= 8)
1c0012d2:	19c45b63          	ble	t3,s0,1c001468 <exec_check_bitstream+0x486>
1c0012d6:	ff8e0793          	addi	a5,t3,-8 # 31fff8 <__L2+0x29fff8>
1c0012da:	0037d713          	srli	a4,a5,0x3
1c0012de:	8572                	mv	a0,t3
1c0012e0:	0705                	addi	a4,a4,1
1c0012e2:	3807ca63          	bltz	a5,1c001676 <exec_check_bitstream+0x694>
1c0012e6:	00d740fb          	lp.setup	x1,a4,1c001300 <exec_check_bitstream+0x31e>
    Size -= 8;
1c0012ea:	1561                	addi	a0,a0,-8
    *current = (Val >> Size) & 0xff;
1c0012ec:	00ab57b3          	srl	a5,s6,a0
1c0012f0:	85b2                	mv	a1,a2
1c0012f2:	0ff7f793          	andi	a5,a5,255
1c0012f6:	00f580ab          	p.sb	a5,1(a1!)
    if (*current == 0xff)
1c0012fa:	13a78263          	beq	a5,s10,1c00141e <exec_check_bitstream+0x43c>
1c0012fe:	862e                	mv	a2,a1
1c001300:	0001                	nop
1c001302:	f83e3e33          	p.bclr	t3,t3,28,3
  if (Size)
1c001306:	000e0563          	beqz	t3,1c001310 <exec_check_bitstream+0x32e>
    *current = (Val) & 0xff;
1c00130a:	885a                	mv	a6,s6
1c00130c:	01058023          	sb	a6,0(a1)
  AppendBytes_cl(enc, current, 0);
1c001310:	4601                	li	a2,0
1c001312:	856e                	mv	a0,s11
1c001314:	34b5                	jal	1c000d80 <AppendBytes_cl>
1c001316:	0cb1                	addi	s9,s9,12
      int ZeroLength = block->output[output_index++];
1c001318:	ffcca703          	lw	a4,-4(s9)
      BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, SymbolIndex, SymbolSize);
1c00131c:	9c5e                	add	s8,s8,s7
      if (ZeroLength == -1)
1c00131e:	ebf73ae3          	p.bneimm	a4,-1,1c0011d2 <exec_check_bitstream+0x1f0>
  int done = BitPos % 8;
1c001322:	f83c3733          	p.bclr	a4,s8,28,3
  unsigned char *current = enc->current_bitstream;
1c001326:	268da583          	lw	a1,616(s11)
  if (done)
1c00132a:	30070a63          	beqz	a4,1c00163e <exec_check_bitstream+0x65c>
1c00132e:	4611                	li	a2,4
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c001330:	0005c783          	lbu	a5,0(a1)
    int rest = 8 - done;
1c001334:	40e906b3          	sub	a3,s2,a4
1c001338:	04c6c6b3          	p.min	a3,a3,a2
    Size -= rest;
1c00133c:	8e15                	sub	a2,a2,a3
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c00133e:	4529                	li	a0,10
1c001340:	00d797b3          	sll	a5,a5,a3
1c001344:	00c55533          	srl	a0,a0,a2
1c001348:	8fc9                	or	a5,a5,a0
1c00134a:	0ff7f793          	andi	a5,a5,255
1c00134e:	00f58023          	sb	a5,0(a1)
    if (done + rest < 8)
1c001352:	9736                	add	a4,a4,a3
      return result;
1c001354:	4a91                	li	s5,4
    if (done + rest < 8)
1c001356:	00e45c63          	ble	a4,s0,1c00136e <exec_check_bitstream+0x38c>
1c00135a:	00158713          	addi	a4,a1,1
    if (*current == 0xff)
1c00135e:	2fa78c63          	beq	a5,s10,1c001656 <exec_check_bitstream+0x674>
1c001362:	85ba                	mv	a1,a4
  if (Size)
1c001364:	2c061e63          	bnez	a2,1c001640 <exec_check_bitstream+0x65e>
  AppendBytes_cl(enc, current, 0);
1c001368:	4601                	li	a2,0
1c00136a:	856e                	mv	a0,s11
1c00136c:	3c11                	jal	1c000d80 <AppendBytes_cl>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00136e:	002047b7          	lui	a5,0x204
1c001372:	0c07e703          	p.elw	a4,192(a5) # 2040c0 <__L2+0x1840c0>
    enc->nb_block_done--;
1c001376:	02cda783          	lw	a5,44(s11)
    enc->current_bitstream_block++;
1c00137a:	05cda703          	lw	a4,92(s11)
    BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, EOB, EOB_LEN);
1c00137e:	015c0333          	add	t1,s8,s5
    enc->nb_block_done--;
1c001382:	17fd                	addi	a5,a5,-1
    enc->current_bitstream_block++;
1c001384:	0705                	addi	a4,a4,1
    enc->BitStreamIndex = BitStreamIndex;
1c001386:	046da823          	sw	t1,80(s11)
    enc->nb_block_done--;
1c00138a:	02fda623          	sw	a5,44(s11)
    enc->current_bitstream_block++;
1c00138e:	04edae23          	sw	a4,92(s11)
    if (enc->nb_block_done == 0)
1c001392:	e789                	bnez	a5,1c00139c <exec_check_bitstream+0x3ba>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (event << 2), coreSet);
1c001394:	002047b7          	lui	a5,0x204
1c001398:	1007ac23          	sw	zero,280(a5) # 204118 <__L2+0x184118>
    if (block->next_vc_done)
1c00139c:	509c                	lw	a5,32(s1)
1c00139e:	28078d63          	beqz	a5,1c001638 <exec_check_bitstream+0x656>
      block->next_vc_done = 0;
1c0013a2:	0204a023          	sw	zero,32(s1)
  enc->ready_blocks++;
1c0013a6:	054da783          	lw	a5,84(s11)
  block->next = list->first;
1c0013aa:	018da603          	lw	a2,24(s11)
  uint32_t waiting_cores = enc->ready_blocks_waiting_cores;
1c0013ae:	058da683          	lw	a3,88(s11)
  enc->ready_blocks++;
1c0013b2:	0785                	addi	a5,a5,1
  block->next = list->first;
1c0013b4:	c8d0                	sw	a2,20(s1)
  list->first = block;
1c0013b6:	009dac23          	sw	s1,24(s11)
  enc->ready_blocks++;
1c0013ba:	04fdaa23          	sw	a5,84(s11)
  if (waiting_cores)
1c0013be:	ce99                	beqz	a3,1c0013dc <exec_check_bitstream+0x3fa>
    int core = __FL1(waiting_cores);
1c0013c0:	10069633          	p.fl1	a2,a3
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c0013c4:	4785                	li	a5,1
1c0013c6:	00c797b3          	sll	a5,a5,a2
1c0013ca:	fff7c613          	not	a2,a5
1c0013ce:	8ef1                	and	a3,a3,a2
1c0013d0:	04ddac23          	sw	a3,88(s11)
1c0013d4:	002046b7          	lui	a3,0x204
1c0013d8:	10f6ac23          	sw	a5,280(a3) # 204118 <__L2+0x184118>
1c0013dc:	010da483          	lw	s1,16(s11)
    if (queue_is_empty(&enc->bitstream_blocks) || enc->bitstream_blocks.first->id != enc->current_bitstream_block)
1c0013e0:	26048463          	beqz	s1,1c001648 <exec_check_bitstream+0x666>
1c0013e4:	409c                	lw	a5,0(s1)
1c0013e6:	26e79163          	bne	a5,a4,1c001648 <exec_check_bitstream+0x666>
  queue->first = first->next;
1c0013ea:	48dc                	lw	a5,20(s1)
1c0013ec:	00fda823          	sw	a5,16(s11)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c0013f0:	002047b7          	lui	a5,0x204
1c0013f4:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
#else
void rt_wait_for_interrupt();
#endif

static inline void rt_compiler_barrier() {
  __asm__ __volatile__ ("" : : : "memory");
1c0013f8:	b16d                	j	1c0010a2 <exec_check_bitstream+0xc0>
      *current = 0x00;
1c0013fa:	000680a3          	sb	zero,1(a3)
1c0013fe:	00268593          	addi	a1,a3,2
      result += 8;
1c001402:	0aa1                	addi	s5,s5,8
1c001404:	b32d                	j	1c00112e <exec_check_bitstream+0x14c>
      *current = 0x00;
1c001406:	000680a3          	sb	zero,1(a3)
1c00140a:	00268593          	addi	a1,a3,2
      result += 8;
1c00140e:	0c21                	addi	s8,s8,8
1c001410:	b345                	j	1c0011b0 <exec_check_bitstream+0x1ce>
      *current = 0x00;
1c001412:	000700a3          	sb	zero,1(a4)
1c001416:	00270593          	addi	a1,a4,2
      result += 8;
1c00141a:	0aa1                	addi	s5,s5,8
1c00141c:	b585                	j	1c00127c <exec_check_bitstream+0x29a>
      *current = 0x00;
1c00141e:	000600a3          	sb	zero,1(a2)
1c001422:	00260593          	addi	a1,a2,2
      result += 8;
1c001426:	0ba1                	addi	s7,s7,8
1c001428:	bdd9                	j	1c0012fe <exec_check_bitstream+0x31c>
1c00142a:	00260713          	addi	a4,a2,2
      *current = 0x00;
1c00142e:	000600a3          	sb	zero,1(a2)
      result += 8;
1c001432:	0ba1                	addi	s7,s7,8
    current++;
1c001434:	863a                	mv	a2,a4
1c001436:	bd71                	j	1c0012d2 <exec_check_bitstream+0x2f0>
1c001438:	00270613          	addi	a2,a4,2
      *current = 0x00;
1c00143c:	000700a3          	sb	zero,1(a4)
      result += 8;
1c001440:	0aa1                	addi	s5,s5,8
    current++;
1c001442:	8732                	mv	a4,a2
1c001444:	b531                	j	1c001250 <exec_check_bitstream+0x26e>
1c001446:	00268713          	addi	a4,a3,2
      *current = 0x00;
1c00144a:	000680a3          	sb	zero,1(a3)
      result += 8;
1c00144e:	0c21                	addi	s8,s8,8
    current++;
1c001450:	86ba                	mv	a3,a4
1c001452:	bb0d                	j	1c001184 <exec_check_bitstream+0x1a2>
1c001454:	00268713          	addi	a4,a3,2
      *current = 0x00;
1c001458:	000680a3          	sb	zero,1(a3)
      result += 8;
1c00145c:	0aa1                	addi	s5,s5,8
    current++;
1c00145e:	86ba                	mv	a3,a4
1c001460:	b14d                	j	1c001102 <exec_check_bitstream+0x120>
      int SymbolSize = block->output[output_index++];
1c001462:	8e5e                	mv	t3,s7
  while (Size >= 8)
1c001464:	e7c449e3          	blt	s0,t3,1c0012d6 <exec_check_bitstream+0x2f4>
1c001468:	85b2                	mv	a1,a2
1c00146a:	bd71                	j	1c001306 <exec_check_bitstream+0x324>
      RLE_Size = RLE_AC_Size_LUT[RLE_Index];
1c00146c:	8f56                	mv	t5,s5
  while (Size >= 8)
1c00146e:	dfe443e3          	blt	s0,t5,1c001254 <exec_check_bitstream+0x272>
1c001472:	85ba                	mv	a1,a4
1c001474:	bd01                	j	1c001284 <exec_check_bitstream+0x2a2>
1c001476:	00170513          	addi	a0,a4,1
  if (done)
1c00147a:	e241                	bnez	a2,1c0014fa <exec_check_bitstream+0x518>
    *current = (Val >> Size) & 0xff;
1c00147c:	85ba                	mv	a1,a4
1c00147e:	0ff00793          	li	a5,255
1c001482:	00f5912b          	p.sh	a5,2(a1!)
      result += 8;
1c001486:	4ecd                	li	t4,19
    *current = (Val) & 0xff;
1c001488:	56e5                	li	a3,-7
1c00148a:	00d58023          	sb	a3,0(a1)
  AppendBytes_cl(enc, current, 0);
1c00148e:	4601                	li	a2,0
1c001490:	856e                	mv	a0,s11
          BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, ZRL, ZRL_LEN);
1c001492:	9c76                	add	s8,s8,t4
  AppendBytes_cl(enc, current, 0);
1c001494:	30f5                	jal	1c000d80 <AppendBytes_cl>
1c001496:	f83c3633          	p.bclr	a2,s8,28,3
      if (ZRL_Seq)
1c00149a:	1c1a2b63          	p.beqimm	s4,1,1c001670 <exec_check_bitstream+0x68e>
  unsigned char *current = enc->current_bitstream;
1c00149e:	268da583          	lw	a1,616(s11)
1c0014a2:	00158513          	addi	a0,a1,1
  if (done)
1c0014a6:	12061063          	bnez	a2,1c0015c6 <exec_check_bitstream+0x5e4>
    *current = (Val >> Size) & 0xff;
1c0014aa:	0ff00713          	li	a4,255
1c0014ae:	00e5912b          	p.sh	a4,2(a1!)
      result += 8;
1c0014b2:	4ecd                	li	t4,19
    *current = (Val) & 0xff;
1c0014b4:	5765                	li	a4,-7
1c0014b6:	00e58023          	sb	a4,0(a1)
  AppendBytes_cl(enc, current, 0);
1c0014ba:	4601                	li	a2,0
1c0014bc:	856e                	mv	a0,s11
          BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, ZRL, ZRL_LEN);
1c0014be:	9c76                	add	s8,s8,t4
  AppendBytes_cl(enc, current, 0);
1c0014c0:	30c1                	jal	1c000d80 <AppendBytes_cl>
1c0014c2:	f83c3633          	p.bclr	a2,s8,28,3
      if (ZRL_Seq)
1c0014c6:	1a2a2563          	p.beqimm	s4,2,1c001670 <exec_check_bitstream+0x68e>
  unsigned char *current = enc->current_bitstream;
1c0014ca:	268da583          	lw	a1,616(s11)
1c0014ce:	00158513          	addi	a0,a1,1
  if (done)
1c0014d2:	e659                	bnez	a2,1c001560 <exec_check_bitstream+0x57e>
    *current = (Val >> Size) & 0xff;
1c0014d4:	0ff00793          	li	a5,255
1c0014d8:	00f5912b          	p.sh	a5,2(a1!)
      result += 8;
1c0014dc:	4e4d                	li	t3,19
    *current = (Val) & 0xff;
1c0014de:	56e5                	li	a3,-7
1c0014e0:	00d58023          	sb	a3,0(a1)
  AppendBytes_cl(enc, current, 0);
1c0014e4:	4601                	li	a2,0
1c0014e6:	856e                	mv	a0,s11
1c0014e8:	c072                	sw	t3,0(sp)
1c0014ea:	3859                	jal	1c000d80 <AppendBytes_cl>
          BitStreamIndex += AppendBits_cl(enc, BitStream, BitStreamIndex, ZRL, ZRL_LEN);
1c0014ec:	4e02                	lw	t3,0(sp)
1c0014ee:	268da703          	lw	a4,616(s11)
1c0014f2:	9c72                	add	s8,s8,t3
1c0014f4:	f83c3633          	p.bclr	a2,s8,28,3
1c0014f8:	b329                	j	1c001202 <exec_check_bitstream+0x220>
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0014fa:	00074583          	lbu	a1,0(a4)
    int rest = 8 - done;
1c0014fe:	40c90eb3          	sub	t4,s2,a2
    Size -= rest;
1c001502:	00360f13          	addi	t5,a2,3
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c001506:	7f900693          	li	a3,2041
1c00150a:	01d595b3          	sll	a1,a1,t4
1c00150e:	01e6deb3          	srl	t4,a3,t5
1c001512:	01d5e5b3          	or	a1,a1,t4
1c001516:	0ff5f593          	andi	a1,a1,255
1c00151a:	00b70023          	sb	a1,0(a4)
  int result = Size;
1c00151e:	4ead                	li	t4,11
    if (*current == 0xff)
1c001520:	03a58363          	beq	a1,s10,1c001546 <exec_check_bitstream+0x564>
  while (Size >= 8)
1c001524:	15e45263          	ble	t5,s0,1c001668 <exec_check_bitstream+0x686>
1c001528:	166d                	addi	a2,a2,-5
1c00152a:	7f900793          	li	a5,2041
1c00152e:	00c7d733          	srl	a4,a5,a2
1c001532:	0ff77713          	andi	a4,a4,255
    *current = (Val >> Size) & 0xff;
1c001536:	00e50023          	sb	a4,0(a0)
1c00153a:	00150593          	addi	a1,a0,1
    if (*current == 0xff)
1c00153e:	01a70a63          	beq	a4,s10,1c001552 <exec_check_bitstream+0x570>
  if (Size)
1c001542:	d631                	beqz	a2,1c00148e <exec_check_bitstream+0x4ac>
1c001544:	b791                	j	1c001488 <exec_check_bitstream+0x4a6>
      *current = 0x00;
1c001546:	000700a3          	sb	zero,1(a4)
1c00154a:	00270513          	addi	a0,a4,2
      result += 8;
1c00154e:	4ecd                	li	t4,19
1c001550:	bfd1                	j	1c001524 <exec_check_bitstream+0x542>
      *current = 0x00;
1c001552:	000500a3          	sb	zero,1(a0)
      result += 8;
1c001556:	0ea1                	addi	t4,t4,8
1c001558:	00250593          	addi	a1,a0,2
  if (Size)
1c00155c:	da0d                	beqz	a2,1c00148e <exec_check_bitstream+0x4ac>
1c00155e:	b72d                	j	1c001488 <exec_check_bitstream+0x4a6>
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c001560:	0005c703          	lbu	a4,0(a1)
    int rest = 8 - done;
1c001564:	40c90e33          	sub	t3,s2,a2
    Size -= rest;
1c001568:	00360e93          	addi	t4,a2,3
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c00156c:	7f900693          	li	a3,2041
1c001570:	01c71733          	sll	a4,a4,t3
1c001574:	01d6de33          	srl	t3,a3,t4
1c001578:	01c76733          	or	a4,a4,t3
1c00157c:	0ff77713          	andi	a4,a4,255
1c001580:	00e58023          	sb	a4,0(a1)
  int result = Size;
1c001584:	4e2d                	li	t3,11
    if (*current == 0xff)
1c001586:	03a70363          	beq	a4,s10,1c0015ac <exec_check_bitstream+0x5ca>
  while (Size >= 8)
1c00158a:	0dd45d63          	ble	t4,s0,1c001664 <exec_check_bitstream+0x682>
1c00158e:	166d                	addi	a2,a2,-5
1c001590:	7f900793          	li	a5,2041
1c001594:	00c7d733          	srl	a4,a5,a2
1c001598:	0ff77713          	andi	a4,a4,255
    *current = (Val >> Size) & 0xff;
1c00159c:	00e50023          	sb	a4,0(a0)
1c0015a0:	00150593          	addi	a1,a0,1
    if (*current == 0xff)
1c0015a4:	01a70a63          	beq	a4,s10,1c0015b8 <exec_check_bitstream+0x5d6>
  if (Size)
1c0015a8:	de15                	beqz	a2,1c0014e4 <exec_check_bitstream+0x502>
1c0015aa:	bf15                	j	1c0014de <exec_check_bitstream+0x4fc>
      *current = 0x00;
1c0015ac:	000580a3          	sb	zero,1(a1)
1c0015b0:	00258513          	addi	a0,a1,2
      result += 8;
1c0015b4:	4e4d                	li	t3,19
1c0015b6:	bfd1                	j	1c00158a <exec_check_bitstream+0x5a8>
      *current = 0x00;
1c0015b8:	000500a3          	sb	zero,1(a0)
      result += 8;
1c0015bc:	0e21                	addi	t3,t3,8
1c0015be:	00250593          	addi	a1,a0,2
  if (Size)
1c0015c2:	d20d                	beqz	a2,1c0014e4 <exec_check_bitstream+0x502>
1c0015c4:	bf29                	j	1c0014de <exec_check_bitstream+0x4fc>
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0015c6:	0005c703          	lbu	a4,0(a1)
    int rest = 8 - done;
1c0015ca:	40c90eb3          	sub	t4,s2,a2
    Size -= rest;
1c0015ce:	00360f13          	addi	t5,a2,3
    *current = ((*current) << rest) | ((Val >> Size) & 0xff);
1c0015d2:	7f900793          	li	a5,2041
1c0015d6:	01d71733          	sll	a4,a4,t4
1c0015da:	01e7deb3          	srl	t4,a5,t5
1c0015de:	01d76733          	or	a4,a4,t4
1c0015e2:	0ff77713          	andi	a4,a4,255
1c0015e6:	00e58023          	sb	a4,0(a1)
  int result = Size;
1c0015ea:	4ead                	li	t4,11
    if (*current == 0xff)
1c0015ec:	03a70463          	beq	a4,s10,1c001614 <exec_check_bitstream+0x632>
  while (Size >= 8)
1c0015f0:	07e45863          	ble	t5,s0,1c001660 <exec_check_bitstream+0x67e>
1c0015f4:	166d                	addi	a2,a2,-5
1c0015f6:	7f900693          	li	a3,2041
1c0015fa:	00c6d733          	srl	a4,a3,a2
1c0015fe:	0ff77713          	andi	a4,a4,255
    *current = (Val >> Size) & 0xff;
1c001602:	00e50023          	sb	a4,0(a0)
1c001606:	00150593          	addi	a1,a0,1
    if (*current == 0xff)
1c00160a:	01a70b63          	beq	a4,s10,1c001620 <exec_check_bitstream+0x63e>
  if (Size)
1c00160e:	ea0606e3          	beqz	a2,1c0014ba <exec_check_bitstream+0x4d8>
1c001612:	b54d                	j	1c0014b4 <exec_check_bitstream+0x4d2>
      *current = 0x00;
1c001614:	000580a3          	sb	zero,1(a1)
1c001618:	00258513          	addi	a0,a1,2
      result += 8;
1c00161c:	4ecd                	li	t4,19
1c00161e:	bfc9                	j	1c0015f0 <exec_check_bitstream+0x60e>
      *current = 0x00;
1c001620:	000500a3          	sb	zero,1(a0)
      result += 8;
1c001624:	0ea1                	addi	t4,t4,8
1c001626:	00250593          	addi	a1,a0,2
  if (Size)
1c00162a:	e80608e3          	beqz	a2,1c0014ba <exec_check_bitstream+0x4d8>
1c00162e:	b559                	j	1c0014b4 <exec_check_bitstream+0x4d2>
    int SymbolSize = block->output[output_index++];
1c001630:	8562                	mv	a0,s8
1c001632:	be89                	j	1c001184 <exec_check_bitstream+0x1a2>
    RLE_Size = RLE_DC_Size_LUT[RLE_Index];
1c001634:	88d6                	mv	a7,s5
1c001636:	b4f1                	j	1c001102 <exec_check_bitstream+0x120>
      block->state = BLOCK_STATE_DONE;
1c001638:	478d                	li	a5,3
1c00163a:	cc9c                	sw	a5,24(s1)
1c00163c:	b345                	j	1c0013dc <exec_check_bitstream+0x3fa>
  int result = Size;
1c00163e:	4a91                	li	s5,4
    *current = (Val) & 0xff;
1c001640:	47a9                	li	a5,10
1c001642:	00f58023          	sb	a5,0(a1)
1c001646:	b30d                	j	1c001368 <exec_check_bitstream+0x386>
      enc->bitstream_lock = 0;
1c001648:	040da423          	sw	zero,72(s11)
1c00164c:	b2f5                	j	1c001038 <exec_check_bitstream+0x56>
  while (Size >= 8)
1c00164e:	85b6                	mv	a1,a3
1c001650:	b6a5                	j	1c0011b8 <exec_check_bitstream+0x1d6>
1c001652:	85b6                	mv	a1,a3
1c001654:	b4cd                	j	1c001136 <exec_check_bitstream+0x154>
      *current = 0x00;
1c001656:	000580a3          	sb	zero,1(a1)
      result += 8;
1c00165a:	4ab1                	li	s5,12
1c00165c:	0589                	addi	a1,a1,2
1c00165e:	b319                	j	1c001364 <exec_check_bitstream+0x382>
  while (Size >= 8)
1c001660:	85aa                	mv	a1,a0
1c001662:	bd89                	j	1c0014b4 <exec_check_bitstream+0x4d2>
1c001664:	85aa                	mv	a1,a0
1c001666:	bda5                	j	1c0014de <exec_check_bitstream+0x4fc>
1c001668:	85aa                	mv	a1,a0
1c00166a:	bd39                	j	1c001488 <exec_check_bitstream+0x4a6>
1c00166c:	4705                	li	a4,1
1c00166e:	b465                	j	1c001116 <exec_check_bitstream+0x134>
1c001670:	268da703          	lw	a4,616(s11)
1c001674:	b679                	j	1c001202 <exec_check_bitstream+0x220>
1c001676:	4705                	li	a4,1
1c001678:	b1bd                	j	1c0012e6 <exec_check_bitstream+0x304>
1c00167a:	4605                	li	a2,1
1c00167c:	b6e5                	j	1c001264 <exec_check_bitstream+0x282>
1c00167e:	4705                	li	a4,1
1c001680:	be21                	j	1c001198 <exec_check_bitstream+0x1b6>

1c001682 <process_du_cluster>:
{
1c001682:	1141                	addi	sp,sp,-16
1c001684:	c422                	sw	s0,8(sp)
1c001686:	c226                	sw	s1,4(sp)
1c001688:	c606                	sw	ra,12(sp)
1c00168a:	c04a                	sw	s2,0(sp)
1c00168c:	84aa                	mv	s1,a0
1c00168e:	842e                	mv	s0,a1
  if (step <= 0)
1c001690:	00c05c63          	blez	a2,1c0016a8 <process_du_cluster+0x26>
  if (step <= 1)
1c001694:	04162f63          	p.beqimm	a2,1,1c0016f2 <process_du_cluster+0x70>
  exec_check_bitstream(enc, block);
1c001698:	85a2                	mv	a1,s0
}
1c00169a:	4422                	lw	s0,8(sp)
1c00169c:	40b2                	lw	ra,12(sp)
1c00169e:	4902                	lw	s2,0(sp)
  exec_check_bitstream(enc, block);
1c0016a0:	8526                	mv	a0,s1
}
1c0016a2:	4492                	lw	s1,4(sp)
1c0016a4:	0141                	addi	sp,sp,16
  exec_check_bitstream(enc, block);
1c0016a6:	ba35                	j	1c000fe2 <exec_check_bitstream>
  const signed short *FDctFactors = enc->constants->FDCT_FACTORS;
1c0016a8:	06052903          	lw	s2,96(a0)
  Dct8x8(DU, FDctFactors);
1c0016ac:	02458513          	addi	a0,a1,36
1c0016b0:	85ca                	mv	a1,s2
1c0016b2:	2335                	jal	1c001bde <Dct8x8>
  int Vc = DU[0] / QuantLUT[0];
1c0016b4:	0c094703          	lbu	a4,192(s2)
1c0016b8:	02441783          	lh	a5,36(s0)
1c0016bc:	02e7c7b3          	div	a5,a5,a4
  block->vc = Vc;
1c0016c0:	00f41e23          	sh	a5,28(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0016c4:	002047b7          	lui	a5,0x204
1c0016c8:	0c07e703          	p.elw	a4,192(a5) # 2040c0 <__L2+0x1840c0>
  block->state = BLOCK_STATE_DCT;
1c0016cc:	4709                	li	a4,2
  cl_enc_block_t *prev_du = block->prev_du;
1c0016ce:	445c                	lw	a5,12(s0)
  block->state = BLOCK_STATE_DCT;
1c0016d0:	cc18                	sw	a4,24(s0)
  if (prev_du != NULL)
1c0016d2:	cf81                	beqz	a5,1c0016ea <process_du_cluster+0x68>
    if (prev_du->state < BLOCK_STATE_DCT)
1c0016d4:	4f94                	lw	a3,24(a5)
1c0016d6:	4705                	li	a4,1
1c0016d8:	02d77263          	bleu	a3,a4,1c0016fc <process_du_cluster+0x7a>
    block->vp = prev_du->vc;
1c0016dc:	01c7d603          	lhu	a2,28(a5)
1c0016e0:	00c41f23          	sh	a2,30(s0)
    if (prev_du->state == BLOCK_STATE_DONE)
1c0016e4:	0236a763          	p.beqimm	a3,3,1c001712 <process_du_cluster+0x90>
      prev_du->next_vc_done = 1;
1c0016e8:	d398                	sw	a4,32(a5)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c0016ea:	002047b7          	lui	a5,0x204
1c0016ee:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
    exec_quantization(enc, block);
1c0016f2:	85a2                	mv	a1,s0
1c0016f4:	8526                	mv	a0,s1
1c0016f6:	ae6ff0ef          	jal	ra,1c0009dc <exec_quantization>
1c0016fa:	bf79                	j	1c001698 <process_du_cluster+0x16>
      prev_du->next_du = block;
1c0016fc:	cb80                	sw	s0,16(a5)
1c0016fe:	002047b7          	lui	a5,0x204
1c001702:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
}
1c001706:	40b2                	lw	ra,12(sp)
1c001708:	4422                	lw	s0,8(sp)
1c00170a:	4492                	lw	s1,4(sp)
1c00170c:	4902                	lw	s2,0(sp)
1c00170e:	0141                	addi	sp,sp,16
1c001710:	8082                	ret
  enc->ready_blocks++;
1c001712:	48f4                	lw	a3,84(s1)
  block->next = list->first;
1c001714:	4c8c                	lw	a1,24(s1)
  uint32_t waiting_cores = enc->ready_blocks_waiting_cores;
1c001716:	4cb0                	lw	a2,88(s1)
  enc->ready_blocks++;
1c001718:	0685                	addi	a3,a3,1
  block->next = list->first;
1c00171a:	cbcc                	sw	a1,20(a5)
  list->first = block;
1c00171c:	cc9c                	sw	a5,24(s1)
  enc->ready_blocks++;
1c00171e:	c8f4                	sw	a3,84(s1)
  if (waiting_cores)
1c001720:	d669                	beqz	a2,1c0016ea <process_du_cluster+0x68>
    int core = __FL1(waiting_cores);
1c001722:	100617b3          	p.fl1	a5,a2
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c001726:	00f71733          	sll	a4,a4,a5
1c00172a:	fff74793          	not	a5,a4
1c00172e:	8e7d                	and	a2,a2,a5
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (event << 2), coreSet);
1c001730:	002047b7          	lui	a5,0x204
1c001734:	ccb0                	sw	a2,88(s1)
1c001736:	10e7ac23          	sw	a4,280(a5) # 204118 <__L2+0x184118>
1c00173a:	bf45                	j	1c0016ea <process_du_cluster+0x68>

1c00173c <__jpeg_encoder_process_pe_entry>:
{
1c00173c:	1101                	addi	sp,sp,-32
1c00173e:	c64e                	sw	s3,12(sp)
    enc->ready_blocks_waiting_cores |= 1 << pi_core_id();
1c001740:	4985                	li	s3,1
{
1c001742:	cc22                	sw	s0,24(sp)
1c001744:	ca26                	sw	s1,20(sp)
1c001746:	c84a                	sw	s2,16(sp)
1c001748:	c452                	sw	s4,8(sp)
1c00174a:	ce06                	sw	ra,28(sp)

static inline unsigned int core_id() {
  int hart_id;
#if RISCV_VERSION >= 4 && !defined(RISCV_1_7)
#if PULP_CHIP_FAMILY == CHIP_GAP
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00174c:	01402a73          	csrr	s4,uhartid
1c001750:	c256                	sw	s5,4(sp)
1c001752:	84aa                	mv	s1,a0
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001754:	00204437          	lui	s0,0x204
    enc->ready_blocks_waiting_cores |= 1 << pi_core_id();
1c001758:	01499a33          	sll	s4,s3,s4
              data[i*8+j] = 0x1;
1c00175c:	4905                	li	s2,1
1c00175e:	0c046783          	p.elw	a5,192(s0) # 2040c0 <__L2+0x1840c0>
  while(enc->ready_blocks == 0 && enc->nb_block_done)
1c001762:	48fc                	lw	a5,84(s1)
1c001764:	eb85                	bnez	a5,1c001794 <__jpeg_encoder_process_pe_entry+0x58>
1c001766:	54dc                	lw	a5,44(s1)
1c001768:	c7a5                	beqz	a5,1c0017d0 <__jpeg_encoder_process_pe_entry+0x94>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00176a:	04000713          	li	a4,64
1c00176e:	a019                	j	1c001774 <__jpeg_encoder_process_pe_entry+0x38>
1c001770:	54dc                	lw	a5,44(s1)
1c001772:	cfb9                	beqz	a5,1c0017d0 <__jpeg_encoder_process_pe_entry+0x94>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c001774:	0c042023          	sw	zero,192(s0)
    enc->ready_blocks_waiting_cores |= 1 << pi_core_id();
1c001778:	4cbc                	lw	a5,88(s1)
1c00177a:	0147e7b3          	or	a5,a5,s4
1c00177e:	ccbc                	sw	a5,88(s1)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001780:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001784:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001788:	00e42223          	sw	a4,4(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00178c:	0c046783          	p.elw	a5,192(s0)
  while(enc->ready_blocks == 0 && enc->nb_block_done)
1c001790:	48fc                	lw	a5,84(s1)
1c001792:	dff9                	beqz	a5,1c001770 <__jpeg_encoder_process_pe_entry+0x34>
  if (!enc->nb_block_done)
1c001794:	54d8                	lw	a4,44(s1)
1c001796:	cf0d                	beqz	a4,1c0017d0 <__jpeg_encoder_process_pe_entry+0x94>
  enc->ready_blocks--;
1c001798:	17fd                	addi	a5,a5,-1
1c00179a:	c8fc                	sw	a5,84(s1)
    if (check_fetch_block(enc) == 0)
1c00179c:	8526                	mv	a0,s1
1c00179e:	b96ff0ef          	jal	ra,1c000b34 <check_fetch_block>
1c0017a2:	c505                	beqz	a0,1c0017ca <__jpeg_encoder_process_pe_entry+0x8e>
1c0017a4:	0084aa83          	lw	s5,8(s1)
    else if (!queue_is_empty(&enc->dct_blocks))
1c0017a8:	000a8f63          	beqz	s5,1c0017c6 <__jpeg_encoder_process_pe_entry+0x8a>
  queue->first = first->next;
1c0017ac:	014aa783          	lw	a5,20(s5)
1c0017b0:	c49c                	sw	a5,8(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c0017b2:	0c042023          	sw	zero,192(s0)
    exec_quantization(enc, block);
1c0017b6:	85d6                	mv	a1,s5
1c0017b8:	8526                	mv	a0,s1
1c0017ba:	a22ff0ef          	jal	ra,1c0009dc <exec_quantization>
  exec_check_bitstream(enc, block);
1c0017be:	85d6                	mv	a1,s5
1c0017c0:	8526                	mv	a0,s1
1c0017c2:	3005                	jal	1c000fe2 <exec_check_bitstream>
1c0017c4:	bf69                	j	1c00175e <__jpeg_encoder_process_pe_entry+0x22>
1c0017c6:	408c                	lw	a1,0(s1)
    else if (!queue_is_empty(&enc->fetched_blocks))
1c0017c8:	e18d                	bnez	a1,1c0017ea <__jpeg_encoder_process_pe_entry+0xae>
1c0017ca:	0c042023          	sw	zero,192(s0)
1c0017ce:	bf41                	j	1c00175e <__jpeg_encoder_process_pe_entry+0x22>
1c0017d0:	002047b7          	lui	a5,0x204
1c0017d4:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
}
1c0017d8:	40f2                	lw	ra,28(sp)
1c0017da:	4462                	lw	s0,24(sp)
1c0017dc:	44d2                	lw	s1,20(sp)
1c0017de:	4942                	lw	s2,16(sp)
1c0017e0:	49b2                	lw	s3,12(sp)
1c0017e2:	4a22                	lw	s4,8(sp)
1c0017e4:	4a92                	lw	s5,4(sp)
1c0017e6:	6105                	addi	sp,sp,32
1c0017e8:	8082                	ret
  queue->first = first->next;
1c0017ea:	49dc                	lw	a5,20(a1)
1c0017ec:	c09c                	sw	a5,0(s1)
1c0017ee:	0c042023          	sw	zero,192(s0)
  if (copy->length == 0)
1c0017f2:	3b45a783          	lw	a5,948(a1)
1c0017f6:	c3bd                	beqz	a5,1c00185c <__jpeg_encoder_process_pe_entry+0x120>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0017f8:	3bc5a703          	lw	a4,956(a1)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0017fc:	02000793          	li	a5,32
1c001800:	cb11                	beqz	a4,1c001814 <__jpeg_encoder_process_pe_entry+0xd8>
1c001802:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001806:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00180a:	00f42223          	sw	a5,4(s0)
1c00180e:	3bc5a703          	lw	a4,956(a1)
1c001812:	fb65                	bnez	a4,1c001802 <__jpeg_encoder_process_pe_entry+0xc6>
      if (block->y + 8 > enc->height || block->x + 8 > enc->width)
1c001814:	4594                	lw	a3,8(a1)
1c001816:	0045a883          	lw	a7,4(a1)
1c00181a:	0344a803          	lw	a6,52(s1)
1c00181e:	00768513          	addi	a0,a3,7
      unsigned char *data = (unsigned char *)block->data;
1c001822:	02458793          	addi	a5,a1,36
1c001826:	00788613          	addi	a2,a7,7
1c00182a:	5898                	lw	a4,48(s1)
      if (block->y + 8 > enc->height || block->x + 8 > enc->width)
1c00182c:	09055c63          	ble	a6,a0,1c0018c4 <__jpeg_encoder_process_pe_entry+0x188>
1c001830:	0ce65563          	ble	a4,a2,1c0018fa <__jpeg_encoder_process_pe_entry+0x1be>
1c001834:	06358693          	addi	a3,a1,99
1c001838:	17fd                	addi	a5,a5,-1
1c00183a:	0a258613          	addi	a2,a1,162
1c00183e:	40f68733          	sub	a4,a3,a5
1c001842:	007740fb          	lp.setup	x1,a4,1c001850 <__jpeg_encoder_process_pe_entry+0x114>
        data_s[i] = ((signed short)data[i] - 128) << 2;
1c001846:	fff6c78b          	p.lbu	a5,-1(a3!)
1c00184a:	f8078793          	addi	a5,a5,-128
1c00184e:	078a                	slli	a5,a5,0x2
1c001850:	fef61f2b          	p.sh	a5,-2(a2!)
      process_du_cluster(enc, block, 0);
1c001854:	4601                	li	a2,0
1c001856:	8526                	mv	a0,s1
1c001858:	352d                	jal	1c001682 <process_du_cluster>
1c00185a:	b711                	j	1c00175e <__jpeg_encoder_process_pe_entry+0x22>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00185c:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001860:	40442783          	lw	a5,1028(s0)
1c001864:	3a45a703          	lw	a4,932(a1)
1c001868:	40e7d7b3          	sra	a5,a5,a4
1c00186c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001870:	c795                	beqz	a5,1c00189c <__jpeg_encoder_process_pe_entry+0x160>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001872:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c001876:	30069073          	csrw	mstatus,a3
1c00187a:	00c42423          	sw	a2,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00187e:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001882:	00c42223          	sw	a2,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001886:	300476f3          	csrrci	a3,mstatus,8
1c00188a:	40442783          	lw	a5,1028(s0)
1c00188e:	3a45a703          	lw	a4,932(a1)
1c001892:	40e7d7b3          	sra	a5,a5,a4
1c001896:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00189a:	fff1                	bnez	a5,1c001876 <__jpeg_encoder_process_pe_entry+0x13a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00189c:	00e99733          	sll	a4,s3,a4
1c0018a0:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0018a4:	30069073          	csrw	mstatus,a3
      if (block->y + 8 > enc->height || block->x + 8 > enc->width)
1c0018a8:	4594                	lw	a3,8(a1)
1c0018aa:	0045a883          	lw	a7,4(a1)
1c0018ae:	0344a803          	lw	a6,52(s1)
1c0018b2:	00768513          	addi	a0,a3,7
      unsigned char *data = (unsigned char *)block->data;
1c0018b6:	02458793          	addi	a5,a1,36
1c0018ba:	00788613          	addi	a2,a7,7
1c0018be:	5898                	lw	a4,48(s1)
      if (block->y + 8 > enc->height || block->x + 8 > enc->width)
1c0018c0:	f70548e3          	blt	a0,a6,1c001830 <__jpeg_encoder_process_pe_entry+0xf4>
          x = enc->width - block->x;
1c0018c4:	411708b3          	sub	a7,a4,a7
        if (block->x + 8 > enc->width)
1c0018c8:	00e65363          	ble	a4,a2,1c0018ce <__jpeg_encoder_process_pe_entry+0x192>
        int x = 8;
1c0018cc:	48a1                	li	a7,8
          y = enc->height - block->y;
1c0018ce:	40d80833          	sub	a6,a6,a3
1c0018d2:	8e3e                	mv	t3,a5
        for (int i=0; i<8; i++)
1c0018d4:	4501                	li	a0,0
1c0018d6:	0086d07b          	lp.setupi	x0,8,1c0018f0 <__jpeg_encoder_process_pe_entry+0x1b4>
        int y = 8;
1c0018da:	86f2                	mv	a3,t3
          for (int j=0; j<8; j++)
1c0018dc:	4601                	li	a2,0
1c0018de:	0083d0fb          	lp.setupi	x1,8,1c0018ec <__jpeg_encoder_process_pe_entry+0x1b0>
            if (i >= y || j >= x)
1c0018e2:	01055963          	ble	a6,a0,1c0018f4 <__jpeg_encoder_process_pe_entry+0x1b8>
1c0018e6:	01165763          	ble	a7,a2,1c0018f4 <__jpeg_encoder_process_pe_entry+0x1b8>
          for (int j=0; j<8; j++)
1c0018ea:	0605                	addi	a2,a2,1
1c0018ec:	0685                	addi	a3,a3,1
        for (int i=0; i<8; i++)
1c0018ee:	0505                	addi	a0,a0,1
1c0018f0:	0e21                	addi	t3,t3,8
1c0018f2:	b789                	j	1c001834 <__jpeg_encoder_process_pe_entry+0xf8>
              data[i*8+j] = 0x1;
1c0018f4:	01268023          	sb	s2,0(a3)
1c0018f8:	bfcd                	j	1c0018ea <__jpeg_encoder_process_pe_entry+0x1ae>
          x = enc->width - block->x;
1c0018fa:	411708b3          	sub	a7,a4,a7
        int y = 8;
1c0018fe:	4821                	li	a6,8
1c001900:	bfc9                	j	1c0018d2 <__jpeg_encoder_process_pe_entry+0x196>

1c001902 <__jpeg_encoder_process_cl_entry>:
  cl_enc.height = enc->height;
1c001902:	4950                	lw	a2,20(a0)
  cl_enc.width = enc->width;
1c001904:	490c                	lw	a1,16(a0)
{
1c001906:	d4010113          	addi	sp,sp,-704
  cl_enc.image = (uint32_t)enc->cl_image->data;
1c00190a:	0d852803          	lw	a6,216(a0)
  cl_enc.nb_block = ((cl_enc.width + 7) / 8) * ((cl_enc.height + 7) / 8);
1c00190e:	00760693          	addi	a3,a2,7
{
1c001912:	2b412423          	sw	s4,680(sp)
1c001916:	8a2a                	mv	s4,a0
  cl_enc.nb_block = ((cl_enc.width + 7) / 8) * ((cl_enc.height + 7) / 8);
1c001918:	00758513          	addi	a0,a1,7
1c00191c:	41f55713          	srai	a4,a0,0x1f
1c001920:	41f6d793          	srai	a5,a3,0x1f
1c001924:	f8373733          	p.bclr	a4,a4,28,3
1c001928:	f837b7b3          	p.bclr	a5,a5,28,3
1c00192c:	06d7a7db          	p.addn	a5,a5,a3,3
1c001930:	06a7275b          	p.addn	a4,a4,a0,3
1c001934:	02f70733          	mul	a4,a4,a5
  cl_enc.image = (uint32_t)enc->cl_image->data;
1c001938:	00482e83          	lw	t4,4(a6) # 328004 <__L2+0x2a8004>
  cl_enc.bitstream = enc->bitstream;
1c00193c:	0dca2683          	lw	a3,220(s4)
  int pending_bits = enc->pending_bits;
1c001940:	008a2803          	lw	a6,8(s4)
  cl_enc.current_du_y = enc->current_du_y;
1c001944:	004a2303          	lw	t1,4(s4)
  cl_enc.prev_du = enc->prev_du;
1c001948:	00ca5883          	lhu	a7,12(s4)
  cl_enc.blocks = enc->cl_blocks;
1c00194c:	0d4a2783          	lw	a5,212(s4)
  cl_enc.current_du_x = enc->current_du_x;
1c001950:	000a2e03          	lw	t3,0(s4)
  cl_enc.constants = enc->l1_constants;
1c001954:	0e8a2503          	lw	a0,232(s4)
  cl_enc.width = enc->width;
1c001958:	de2e                	sw	a1,60(sp)
  cl_enc.height = enc->height;
1c00195a:	c0b2                	sw	a2,64(sp)
  cl_enc.nb_block = ((cl_enc.width + 7) / 8) * ((cl_enc.height + 7) / 8);
1c00195c:	d83a                	sw	a4,48(sp)
  cl_enc.current_du_y = enc->current_du_y;
1c00195e:	c69a                	sw	t1,76(sp)
  cl_enc.prev_du = enc->prev_du;
1c001960:	05110823          	sb	a7,80(sp)
  cl_enc.BitStreamIndex = nb_bits;
1c001964:	cec2                	sw	a6,92(sp)
  cl_enc.bitstream = enc->bitstream;
1c001966:	ccb6                	sw	a3,88(sp)
  cl_enc.nb_block_done = cl_enc.nb_block;
1c001968:	dc3a                	sw	a4,56(sp)
{
1c00196a:	2a112e23          	sw	ra,700(sp)
1c00196e:	2a812c23          	sw	s0,696(sp)
1c001972:	2a912a23          	sw	s1,692(sp)
1c001976:	2b212823          	sw	s2,688(sp)
1c00197a:	2b312623          	sw	s3,684(sp)
  cl_enc.blocks = enc->cl_blocks;
1c00197e:	d43e                	sw	a5,40(sp)
  cl_enc.nb_fetched_block = 0;
1c001980:	da02                	sw	zero,52(sp)
  cl_enc.image = (uint32_t)enc->cl_image->data;
1c001982:	c2f6                	sw	t4,68(sp)
  cl_enc.current_du_x = enc->current_du_x;
1c001984:	c4f2                	sw	t3,72(sp)
  cl_enc.current_du = NULL;
1c001986:	d602                	sw	zero,44(sp)
  cl_enc.bitstream_lock = 0;
1c001988:	ca82                	sw	zero,84(sp)
  cl_enc.ready_blocks_waiting_cores = 0;
1c00198a:	d282                	sw	zero,100(sp)
  cl_enc.current_bitstream = &cl_enc.l1_bitstream[0][0];
1c00198c:	1898                	addi	a4,sp,112
  for (unsigned int i=0; i<pi_cl_cluster_nb_pe_cores() * 2; i++)
1c00198e:	6811                	lui	a6,0x4
  cl_enc.current_bitstream_block = 0;
1c001990:	d482                	sw	zero,104(sp)
  queue->first = NULL;
1c001992:	4581                	li	a1,0
  cl_enc.constants = enc->l1_constants;
1c001994:	d6aa                	sw	a0,108(sp)
  cl_enc.current_ext_bitstream = cl_enc.bitstream;
1c001996:	26d12c23          	sw	a3,632(sp)
  cl_enc.l1_bitstream_id = 0;
1c00199a:	26012823          	sw	zero,624(sp)
  cl_enc.current_bitstream = &cl_enc.l1_bitstream[0][0];
1c00199e:	26e12a23          	sw	a4,628(sp)
  cl_enc.pending_dma = 0;
1c0019a2:	28012e23          	sw	zero,668(sp)
  queue->first = NULL;
1c0019a6:	c602                	sw	zero,12(sp)
1c0019a8:	4681                	li	a3,0
1c0019aa:	ca02                	sw	zero,20(sp)
1c0019ac:	ce02                	sw	zero,28(sp)
1c0019ae:	4501                	li	a0,0
1c0019b0:	4601                	li	a2,0
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c0019b2:	4885                	li	a7,1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (event << 2), coreSet);
1c0019b4:	00204337          	lui	t1,0x204
  for (unsigned int i=0; i<pi_cl_cluster_nb_pe_cores() * 2; i++)
1c0019b8:	c4080813          	addi	a6,a6,-960 # 3c40 <__rt_stack_size+0x3440>
1c0019bc:	a029                	j	1c0019c6 <__jpeg_encoder_process_cl_entry+0xc4>
1c0019be:	57a2                	lw	a5,40(sp)
1c0019c0:	5606                	lw	a2,96(sp)
1c0019c2:	5596                	lw	a1,100(sp)
1c0019c4:	5512                	lw	a0,36(sp)
    cl_enc_block_t *block = &cl_enc.blocks[i];
1c0019c6:	97b6                	add	a5,a5,a3
    int core = __FL1(waiting_cores);
1c0019c8:	10059733          	p.fl1	a4,a1
  block->next = list->first;
1c0019cc:	cbc8                	sw	a0,20(a5)
    block->state = BLOCK_STATE_FREE;
1c0019ce:	0007ac23          	sw	zero,24(a5)
    block->next_du = NULL;
1c0019d2:	0007a823          	sw	zero,16(a5)
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c0019d6:	00e89733          	sll	a4,a7,a4
    block->next_vc_done = 0;
1c0019da:	0207a023          	sw	zero,32(a5)
  enc->ready_blocks++;
1c0019de:	0605                	addi	a2,a2,1
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c0019e0:	fff74513          	not	a0,a4
  list->first = block;
1c0019e4:	d23e                	sw	a5,36(sp)
  enc->ready_blocks++;
1c0019e6:	d0b2                	sw	a2,96(sp)
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c0019e8:	8d6d                	and	a0,a0,a1
  if (waiting_cores)
1c0019ea:	c581                	beqz	a1,1c0019f2 <__jpeg_encoder_process_cl_entry+0xf0>
    enc->ready_blocks_waiting_cores = waiting_cores & ~(1<<core);
1c0019ec:	d2aa                	sw	a0,100(sp)
1c0019ee:	10e32c23          	sw	a4,280(t1) # 204118 <__L2+0x184118>
1c0019f2:	3c468693          	addi	a3,a3,964
  for (unsigned int i=0; i<pi_cl_cluster_nb_pe_cores() * 2; i++)
1c0019f6:	fd0694e3          	bne	a3,a6,1c0019be <__jpeg_encoder_process_cl_entry+0xbc>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0019fa:	002047b7          	lui	a5,0x204
1c0019fe:	0c07e703          	p.elw	a4,192(a5) # 2040c0 <__L2+0x1840c0>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c001a02:	01402973          	csrr	s2,uhartid
    enc->ready_blocks_waiting_cores |= 1 << pi_core_id();
1c001a06:	4785                	li	a5,1
1c001a08:	00c10993          	addi	s3,sp,12
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c001a0c:	00204437          	lui	s0,0x204
1c001a10:	01279933          	sll	s2,a5,s2
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a14:	04000493          	li	s1,64
    if (check_fetch_block(&cl_enc))
1c001a18:	854e                	mv	a0,s3
1c001a1a:	91aff0ef          	jal	ra,1c000b34 <check_fetch_block>
1c001a1e:	e121                	bnez	a0,1c001a5e <__jpeg_encoder_process_cl_entry+0x15c>
  while(enc->ready_blocks == 0 && enc->nb_block_done)
1c001a20:	5786                	lw	a5,96(sp)
1c001a22:	5762                	lw	a4,56(sp)
1c001a24:	e795                	bnez	a5,1c001a50 <__jpeg_encoder_process_cl_entry+0x14e>
1c001a26:	e701                	bnez	a4,1c001a2e <__jpeg_encoder_process_cl_entry+0x12c>
1c001a28:	bfc5                	j	1c001a18 <__jpeg_encoder_process_cl_entry+0x116>
1c001a2a:	57e2                	lw	a5,56(sp)
1c001a2c:	d7f5                	beqz	a5,1c001a18 <__jpeg_encoder_process_cl_entry+0x116>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c001a2e:	0c042023          	sw	zero,192(s0) # 2040c0 <__L2+0x1840c0>
    enc->ready_blocks_waiting_cores |= 1 << pi_core_id();
1c001a32:	5796                	lw	a5,100(sp)
1c001a34:	0127e7b3          	or	a5,a5,s2
1c001a38:	d2be                	sw	a5,100(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a3a:	00942423          	sw	s1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a3e:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a42:	00942223          	sw	s1,4(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a46:	0c046783          	p.elw	a5,192(s0)
  while(enc->ready_blocks == 0 && enc->nb_block_done)
1c001a4a:	5786                	lw	a5,96(sp)
1c001a4c:	dff9                	beqz	a5,1c001a2a <__jpeg_encoder_process_cl_entry+0x128>
1c001a4e:	5762                	lw	a4,56(sp)
  if (!enc->nb_block_done)
1c001a50:	d761                	beqz	a4,1c001a18 <__jpeg_encoder_process_cl_entry+0x116>
  enc->ready_blocks--;
1c001a52:	17fd                	addi	a5,a5,-1
    if (check_fetch_block(&cl_enc))
1c001a54:	854e                	mv	a0,s3
  enc->ready_blocks--;
1c001a56:	d0be                	sw	a5,96(sp)
    if (check_fetch_block(&cl_enc))
1c001a58:	8dcff0ef          	jal	ra,1c000b34 <check_fetch_block>
1c001a5c:	d171                	beqz	a0,1c001a20 <__jpeg_encoder_process_cl_entry+0x11e>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_MUTEX_DEMUX_OFFSET + (id<<2), 0);
1c001a5e:	002047b7          	lui	a5,0x204
1c001a62:	0c07a023          	sw	zero,192(a5) # 2040c0 <__L2+0x1840c0>
#endif
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001a66:	0ff00713          	li	a4,255
1c001a6a:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001a6e:	20078413          	addi	s0,a5,512
1c001a72:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001a76:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001a7a:	1c001737          	lui	a4,0x1c001
1c001a7e:	73c70713          	addi	a4,a4,1852 # 1c00173c <__jpeg_encoder_process_pe_entry>
1c001a82:	08e7a023          	sw	a4,128(a5)
1c001a86:	0937a023          	sw	s3,128(a5)
#endif

  if (nb_cores) __rt_team_config(nb_cores);
  eu_dispatch_push((int)entry);
  eu_dispatch_push((int)arg);
  entry(arg);
1c001a8a:	854e                	mv	a0,s3
1c001a8c:	3945                	jal	1c00173c <__jpeg_encoder_process_pe_entry>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a8e:	01c46783          	p.elw	a5,28(s0)
  AppendBytes_cl(&cl_enc, cl_enc.current_bitstream, 1);
1c001a92:	4605                	li	a2,1
  nb_bits = cl_enc.BitStreamIndex;
1c001a94:	47f6                	lw	a5,92(sp)
  enc->prev_du = cl_enc.prev_du;
1c001a96:	05014703          	lbu	a4,80(sp)
  AppendBytes_cl(&cl_enc, cl_enc.current_bitstream, 1);
1c001a9a:	27412583          	lw	a1,628(sp)
  unsigned int rounded_nb_bits = nb_bits & ~7;
1c001a9e:	c407b433          	p.bclr	s0,a5,2,0
  pending_bits = nb_bits - rounded_nb_bits;
1c001aa2:	408784b3          	sub	s1,a5,s0
  enc->current_du_x = cl_enc.current_du_x;
1c001aa6:	47a6                	lw	a5,72(sp)
  enc->prev_du = cl_enc.prev_du;
1c001aa8:	00ea1623          	sh	a4,12(s4)
  AppendBytes_cl(&cl_enc, cl_enc.current_bitstream, 1);
1c001aac:	854e                	mv	a0,s3
  enc->current_du_x = cl_enc.current_du_x;
1c001aae:	00fa2023          	sw	a5,0(s4)
  enc->current_du_y = cl_enc.current_du_y;
1c001ab2:	47b6                	lw	a5,76(sp)
  unsigned int result = rounded_nb_bits >> 3;
1c001ab4:	800d                	srli	s0,s0,0x3
  enc->current_du_y = cl_enc.current_du_y;
1c001ab6:	00fa2223          	sw	a5,4(s4)
  AppendBytes_cl(&cl_enc, cl_enc.current_bitstream, 1);
1c001aba:	ac6ff0ef          	jal	ra,1c000d80 <AppendBytes_cl>
  if (pending_bits)
1c001abe:	cc91                	beqz	s1,1c001ada <__jpeg_encoder_process_cl_entry+0x1d8>
      cl_enc.bitstream[result] = *cl_enc.current_bitstream << (8 - pending_bits);
1c001ac0:	27412783          	lw	a5,628(sp)
1c001ac4:	4721                	li	a4,8
1c001ac6:	409704b3          	sub	s1,a4,s1
1c001aca:	0007c783          	lbu	a5,0(a5)
1c001ace:	4766                	lw	a4,88(sp)
1c001ad0:	009797b3          	sll	a5,a5,s1
1c001ad4:	00f74423          	p.sb	a5,s0(a4)
      result++;
1c001ad8:	0405                	addi	s0,s0,1
  enc->end_task->arg[2] = result;
1c001ada:	0e4a2783          	lw	a5,228(s4)
  enc->pending_bits = pending_bits;
1c001ade:	000a2423          	sw	zero,8(s4)
}
1c001ae2:	2bc12083          	lw	ra,700(sp)
  enc->end_task->arg[2] = result;
1c001ae6:	c7c0                	sw	s0,12(a5)
}
1c001ae8:	2b812403          	lw	s0,696(sp)
  enc->end_task->arg[3] = 0;
1c001aec:	0007a823          	sw	zero,16(a5)
}
1c001af0:	2b412483          	lw	s1,692(sp)
1c001af4:	2b012903          	lw	s2,688(sp)
1c001af8:	2ac12983          	lw	s3,684(sp)
1c001afc:	2a812a03          	lw	s4,680(sp)
1c001b00:	2c010113          	addi	sp,sp,704
1c001b04:	8082                	ret

1c001b06 <__jpeg_encoder_process_cl>:
  enc->bitstream_size = encoded_bitstream->size;
1c001b06:	4e1c                	lw	a5,24(a2)
  enc->bitstream = encoded_bitstream->data;
1c001b08:	4258                	lw	a4,4(a2)
  enc->cl_image = image;
1c001b0a:	0cb52c23          	sw	a1,216(a0)
  enc->bitstream_size = encoded_bitstream->size;
1c001b0e:	0ef52023          	sw	a5,224(a0)
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c001b12:	1c0027b7          	lui	a5,0x1c002
1c001b16:	90278793          	addi	a5,a5,-1790 # 1c001902 <__jpeg_encoder_process_cl_entry>
  enc->bitstream = encoded_bitstream->data;
1c001b1a:	0ce52e23          	sw	a4,220(a0)
  enc->end_task = task;
1c001b1e:	0ed52223          	sw	a3,228(a0)
1c001b22:	d51c                	sw	a5,40(a0)
    task->arg = arg;
1c001b24:	d548                	sw	a0,44(a0)
    task->stacks = (void *)0;
1c001b26:	02052823          	sw	zero,48(a0)
    task->stack_size = 0;
1c001b2a:	02052a23          	sw	zero,52(a0)
    task->nb_cores = 0;
1c001b2e:	02052e23          	sw	zero,60(a0)
  pi_cluster_send_task_to_cl_async(&enc->cluster_dev, &enc->cluster_task, task);
1c001b32:	02850593          	addi	a1,a0,40
1c001b36:	8636                	mv	a2,a3
1c001b38:	0571                	addi	a0,a0,28
1c001b3a:	4130506f          	j	1c00774c <pi_cluster_send_task_to_cl_async>

1c001b3e <__jpeg_encoder_start_cl>:



int32_t __jpeg_encoder_start_cl(jpeg_encoder_t *enc)
{
1c001b3e:	7179                	addi	sp,sp,-48
1c001b40:	d422                	sw	s0,40(sp)
1c001b42:	842a                	mv	s0,a0
    // Allocate all L1 resources so that the encoding can be quickly launched
    struct pi_cluster_conf conf;

    pi_cluster_conf_init(&conf);
1c001b44:	0028                	addi	a0,sp,8
{
1c001b46:	d606                	sw	ra,44(sp)
1c001b48:	d226                	sw	s1,36(sp)
    pi_cluster_conf_init(&conf);
1c001b4a:	11f050ef          	jal	ra,1c007468 <pi_cluster_conf_init>

    pi_open_from_conf(&enc->cluster_dev, &conf);
1c001b4e:	01c40493          	addi	s1,s0,28
1c001b52:	8526                	mv	a0,s1
1c001b54:	002c                	addi	a1,sp,8
1c001b56:	418040ef          	jal	ra,1c005f6e <pi_open_from_conf>
    
    if (pi_cluster_open(&enc->cluster_dev))
1c001b5a:	8526                	mv	a0,s1
1c001b5c:	113050ef          	jal	ra,1c00746e <pi_cluster_open>
1c001b60:	e529                	bnez	a0,1c001baa <__jpeg_encoder_start_cl+0x6c>
      goto error0;

    void *l1_mem = pi_l1_malloc(&enc->cluster_dev, sizeof(cl_enc_block_t) * pi_cl_cluster_nb_pe_cores() * 2 + sizeof(JpegConstants));
1c001b62:	6591                	lui	a1,0x4
1c001b64:	3b458593          	addi	a1,a1,948 # 43b4 <__rt_stack_size+0x3bb4>
1c001b68:	8526                	mv	a0,s1
1c001b6a:	5d5040ef          	jal	ra,1c00693e <pi_cl_l1_malloc>
    if (l1_mem == NULL)
1c001b6e:	c121                	beqz	a0,1c001bae <__jpeg_encoder_start_cl+0x70>
      goto error1;

    enc->cl_blocks = (void *)((uint32_t)l1_mem + sizeof(JpegConstants));
1c001b70:	77450793          	addi	a5,a0,1908
1c001b74:	0cf42a23          	sw	a5,212(s0)
    task->entry = entry;
1c001b78:	1c0017b7          	lui	a5,0x1c001
1c001b7c:	cd078793          	addi	a5,a5,-816 # 1c000cd0 <__jpeg_encoder_init_constants>

    enc->l1_constants = l1_mem;
1c001b80:	0ea42423          	sw	a0,232(s0)
1c001b84:	d41c                	sw	a5,40(s0)
    task->arg = arg;
1c001b86:	d440                	sw	s0,44(s0)
    task->stacks = (void *)0;
1c001b88:	02042823          	sw	zero,48(s0)
    task->stack_size = 0;
1c001b8c:	02042a23          	sw	zero,52(s0)
    task->nb_cores = 0;
1c001b90:	02042e23          	sw	zero,60(s0)

    pi_cluster_send_task_to_cl(&enc->cluster_dev, pi_cluster_task(&enc->cluster_task, __jpeg_encoder_init_constants, enc));
1c001b94:	02840593          	addi	a1,s0,40
1c001b98:	8526                	mv	a0,s1
1c001b9a:	4ad050ef          	jal	ra,1c007846 <pi_cluster_send_task_to_cl>

    return 0;
1c001b9e:	4501                	li	a0,0

error1:
    pi_cluster_close(&enc->cluster_dev);
error0:
    return -1;
}
1c001ba0:	50b2                	lw	ra,44(sp)
1c001ba2:	5422                	lw	s0,40(sp)
1c001ba4:	5492                	lw	s1,36(sp)
1c001ba6:	6145                	addi	sp,sp,48
1c001ba8:	8082                	ret
    return -1;
1c001baa:	557d                	li	a0,-1
1c001bac:	bfd5                	j	1c001ba0 <__jpeg_encoder_start_cl+0x62>
    pi_cluster_close(&enc->cluster_dev);
1c001bae:	8526                	mv	a0,s1
1c001bb0:	197050ef          	jal	ra,1c007546 <pi_cluster_close>
    return -1;
1c001bb4:	557d                	li	a0,-1
1c001bb6:	b7ed                	j	1c001ba0 <__jpeg_encoder_start_cl+0x62>

1c001bb8 <__jpeg_encoder_stop_cl>:



void __jpeg_encoder_stop_cl(jpeg_encoder_t *enc)
{
1c001bb8:	1141                	addi	sp,sp,-16
    // Free all L1 resources
    pi_l1_free(&enc->cluster_dev, enc->l1_constants, sizeof(cl_enc_block_t) * pi_cl_cluster_nb_pe_cores() * 2 + sizeof(JpegConstants));
1c001bba:	0e852583          	lw	a1,232(a0)
{
1c001bbe:	c422                	sw	s0,8(sp)
    pi_l1_free(&enc->cluster_dev, enc->l1_constants, sizeof(cl_enc_block_t) * pi_cl_cluster_nb_pe_cores() * 2 + sizeof(JpegConstants));
1c001bc0:	6611                	lui	a2,0x4
1c001bc2:	01c50413          	addi	s0,a0,28
1c001bc6:	8522                	mv	a0,s0
1c001bc8:	3b460613          	addi	a2,a2,948 # 43b4 <__rt_stack_size+0x3bb4>
{
1c001bcc:	c606                	sw	ra,12(sp)
    pi_l1_free(&enc->cluster_dev, enc->l1_constants, sizeof(cl_enc_block_t) * pi_cl_cluster_nb_pe_cores() * 2 + sizeof(JpegConstants));
1c001bce:	577040ef          	jal	ra,1c006944 <pi_cl_l1_free>
    pi_cluster_close(&enc->cluster_dev);
1c001bd2:	8522                	mv	a0,s0
}
1c001bd4:	4422                	lw	s0,8(sp)
1c001bd6:	40b2                	lw	ra,12(sp)
1c001bd8:	0141                	addi	sp,sp,16
    pi_cluster_close(&enc->cluster_dev);
1c001bda:	16d0506f          	j	1c007546 <pi_cluster_close>

1c001bde <Dct8x8>:
#define FP2FIX(Val, Precision)                      ((int)((Val)*((1 << (Precision))-1)))

#define DCTSIZE  8

void Dct8x8(short int *__restrict__ data, const short int *__restrict__ ftab)
{
1c001bde:	1101                	addi	sp,sp,-32
        tmp12 = tmp6 + tmp7;

        /* The rotator is modified from fig 4-8 to avoid extra negations. */
        z5 = __builtin_pulp_mulfsN(tmp10 - tmp12, FP2FIX(0.382683433f, Q11), Q11);       /* c6 */
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001be0:	6f05                	lui	t5,0x1
{
1c001be2:	ce22                	sw	s0,28(sp)
1c001be4:	cc26                	sw	s1,24(sp)
1c001be6:	ca4a                	sw	s2,20(sp)
1c001be8:	c84e                	sw	s3,16(sp)
1c001bea:	c652                	sw	s4,12(sp)
1c001bec:	c456                	sw	s5,8(sp)
1c001bee:	08050713          	addi	a4,a0,128
    dataptr = data;
1c001bf2:	87aa                	mv	a5,a0
        z1 = __builtin_pulp_mulfsN(tmp12 + tmp13, FP2FIX(0.707106781f, Q11), Q11);
1c001bf4:	5a700e93          	li	t4,1447
        z5 = __builtin_pulp_mulfsN(tmp10 - tmp12, FP2FIX(0.382683433f, Q11), Q11);       /* c6 */
1c001bf8:	30f00293          	li	t0,783
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
1c001bfc:	45300f93          	li	t6,1107
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001c00:	a72f0f13          	addi	t5,t5,-1422 # a72 <__rt_stack_size+0x272>
1c001c04:	4e21                	li	t3,8
1c001c06:	05de40fb          	lp.setup	x1,t3,1c001cc0 <Dct8x8+0xe2>
        tmp0 = dataptr[0] + dataptr[7];
1c001c0a:	00079a03          	lh	s4,0(a5)
        tmp3 = dataptr[3] + dataptr[4];
1c001c0e:	00879383          	lh	t2,8(a5)
        tmp1 = dataptr[1] + dataptr[6];
1c001c12:	00279903          	lh	s2,2(a5)
        tmp2 = dataptr[2] + dataptr[5];
1c001c16:	00a79403          	lh	s0,10(a5)
        tmp0 = dataptr[0] + dataptr[7];
1c001c1a:	00e79603          	lh	a2,14(a5)
        tmp1 = dataptr[1] + dataptr[6];
1c001c1e:	00c79303          	lh	t1,12(a5)
        tmp2 = dataptr[2] + dataptr[5];
1c001c22:	00479483          	lh	s1,4(a5)
        tmp3 = dataptr[3] + dataptr[4];
1c001c26:	00679983          	lh	s3,6(a5)
        tmp7 = dataptr[0] - dataptr[7];
1c001c2a:	40ca0833          	sub	a6,s4,a2
        tmp6 = dataptr[1] - dataptr[6];
1c001c2e:	40690ab3          	sub	s5,s2,t1
        tmp5 = dataptr[2] - dataptr[5];
1c001c32:	408486b3          	sub	a3,s1,s0
        tmp4 = dataptr[3] - dataptr[4];
1c001c36:	407988b3          	sub	a7,s3,t2
        tmp0 = dataptr[0] + dataptr[7];
1c001c3a:	9652                	add	a2,a2,s4
        tmp10 = tmp4 + tmp5;  /* phase 2 */
1c001c3c:	98b6                	add	a7,a7,a3
        tmp12 = tmp6 + tmp7;
1c001c3e:	01580a33          	add	s4,a6,s5
        tmp1 = dataptr[1] + dataptr[6];
1c001c42:	934a                	add	t1,t1,s2
        tmp11 = tmp5 + tmp6;
1c001c44:	96d6                	add	a3,a3,s5
        z5 = __builtin_pulp_mulfsN(tmp10 - tmp12, FP2FIX(0.382683433f, Q11), Q11);       /* c6 */
1c001c46:	41488933          	sub	s2,a7,s4
1c001c4a:	9659095b          	p.mulsn	s2,s2,t0,11
        tmp2 = dataptr[2] + dataptr[5];
1c001c4e:	94a2                	add	s1,s1,s0
        tmp3 = dataptr[3] + dataptr[4];
1c001c50:	999e                	add	s3,s3,t2
        tmp13 = tmp0 - tmp3;
1c001c52:	413603b3          	sub	t2,a2,s3
        tmp12 = tmp1 - tmp2;
1c001c56:	40930433          	sub	s0,t1,s1
        tmp10 = tmp0 + tmp3;  /* phase 2 */
1c001c5a:	964e                	add	a2,a2,s3
        tmp11 = tmp1 + tmp2;
1c001c5c:	9326                	add	t1,t1,s1
        dataptr[0] = __builtin_pulp_trunch(tmp10 + tmp11);  /* phase 3 */
1c001c5e:	006604b3          	add	s1,a2,t1
        dataptr[4] = __builtin_pulp_trunch(tmp10 - tmp11);
1c001c62:	40660633          	sub	a2,a2,t1
        dataptr[0] = __builtin_pulp_trunch(tmp10 + tmp11);  /* phase 3 */
1c001c66:	8326                	mv	t1,s1
        z3 = __builtin_pulp_mulfsN(tmp11,       FP2FIX(0.707106781f, Q11), Q11);            /* c4 */
1c001c68:	97d686db          	p.mulsn	a3,a3,t4,11
        dataptr[0] = __builtin_pulp_trunch(tmp10 + tmp11);  /* phase 3 */
1c001c6c:	00679023          	sh	t1,0(a5)
        dataptr[4] = __builtin_pulp_trunch(tmp10 - tmp11);
1c001c70:	00c79423          	sh	a2,8(a5)
        z1 = __builtin_pulp_mulfsN(tmp12 + tmp13, FP2FIX(0.707106781f, Q11), Q11);
1c001c74:	941e                	add	s0,s0,t2
        dataptr[5] = __builtin_pulp_trunch(z13 + z2);  /* phase 6 */
        dataptr[3] = __builtin_pulp_trunch(z13 - z2);
        dataptr[1] = __builtin_pulp_trunch(z11 + z4);
        dataptr[7] = __builtin_pulp_trunch(z11 - z4);

        dataptr += DCTSIZE;     /* advance pointer to next row */
1c001c76:	07c1                	addi	a5,a5,16
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
1c001c78:	97f888db          	p.mulsn	a7,a7,t6,11
        z11 = tmp7 + z3;        /* phase 5 */
1c001c7c:	00d80333          	add	t1,a6,a3
        z13 = tmp7 - z3;
1c001c80:	40d806b3          	sub	a3,a6,a3
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001c84:	97ea065b          	p.mulsn	a2,s4,t5,11
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
1c001c88:	01288833          	add	a6,a7,s2
        dataptr[5] = __builtin_pulp_trunch(z13 + z2);  /* phase 6 */
1c001c8c:	00d808b3          	add	a7,a6,a3
        dataptr[3] = __builtin_pulp_trunch(z13 - z2);
1c001c90:	410686b3          	sub	a3,a3,a6
1c001c94:	fed79b23          	sh	a3,-10(a5)
        dataptr[5] = __builtin_pulp_trunch(z13 + z2);  /* phase 6 */
1c001c98:	8846                	mv	a6,a7
1c001c9a:	ff079d23          	sh	a6,-6(a5)
        z1 = __builtin_pulp_mulfsN(tmp12 + tmp13, FP2FIX(0.707106781f, Q11), Q11);
1c001c9e:	97d406db          	p.mulsn	a3,s0,t4,11
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001ca2:	964a                	add	a2,a2,s2
        dataptr[1] = __builtin_pulp_trunch(z11 + z4);
1c001ca4:	00660833          	add	a6,a2,t1
        dataptr[7] = __builtin_pulp_trunch(z11 - z4);
1c001ca8:	40c30633          	sub	a2,t1,a2
1c001cac:	fec79f23          	sh	a2,-2(a5)
        dataptr[1] = __builtin_pulp_trunch(z11 + z4);
1c001cb0:	ff079923          	sh	a6,-14(a5)
        dataptr[2] = __builtin_pulp_trunch(tmp13 + z1);  /* phase 5 */
1c001cb4:	00d38633          	add	a2,t2,a3
        dataptr[6] = __builtin_pulp_trunch(tmp13 - z1);
1c001cb8:	40d386b3          	sub	a3,t2,a3
        dataptr[2] = __builtin_pulp_trunch(tmp13 + z1);  /* phase 5 */
1c001cbc:	fec79a23          	sh	a2,-12(a5)
        dataptr[6] = __builtin_pulp_trunch(tmp13 - z1);
1c001cc0:	fed79e23          	sh	a3,-4(a5)
        tmp12 = tmp6 + tmp7;

        /* The rotator is modified from fig 4-8 to avoid extra negations. */
        z5 = __builtin_pulp_mulfsN(tmp10 - tmp12, FP2FIX(0.382683433f, Q11), Q11);       /* c6 */
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001cc4:	6f05                	lui	t5,0x1
    dataptr = data;
1c001cc6:	87aa                	mv	a5,a0
        z1 = __builtin_pulp_mulfsN(tmp12 + tmp13, FP2FIX(0.707106781f, Q11), Q11);       /* c4 */
1c001cc8:	5a700e93          	li	t4,1447
        z5 = __builtin_pulp_mulfsN(tmp10 - tmp12, FP2FIX(0.382683433f, Q11), Q11);       /* c6 */
1c001ccc:	30f00293          	li	t0,783
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
1c001cd0:	45300f93          	li	t6,1107
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001cd4:	a72f0f13          	addi	t5,t5,-1422 # a72 <__rt_stack_size+0x272>
1c001cd8:	4e21                	li	t3,8
1c001cda:	05ee40fb          	lp.setup	x1,t3,1c001d96 <Dct8x8+0x1b8>
        tmp0 = dataptr[DCTSIZE * 0] + dataptr[DCTSIZE * 7];
1c001cde:	00079a03          	lh	s4,0(a5)
        tmp3 = dataptr[DCTSIZE * 3] + dataptr[DCTSIZE * 4];
1c001ce2:	04079383          	lh	t2,64(a5)
        tmp1 = dataptr[DCTSIZE * 1] + dataptr[DCTSIZE * 6];
1c001ce6:	01079983          	lh	s3,16(a5)
        tmp2 = dataptr[DCTSIZE * 2] + dataptr[DCTSIZE * 5];
1c001cea:	02079903          	lh	s2,32(a5)
1c001cee:	05079483          	lh	s1,80(a5)
        tmp0 = dataptr[DCTSIZE * 0] + dataptr[DCTSIZE * 7];
1c001cf2:	07079603          	lh	a2,112(a5)
        tmp1 = dataptr[DCTSIZE * 1] + dataptr[DCTSIZE * 6];
1c001cf6:	06079303          	lh	t1,96(a5)
        tmp3 = dataptr[DCTSIZE * 3] + dataptr[DCTSIZE * 4];
1c001cfa:	03079403          	lh	s0,48(a5)
        tmp7 = dataptr[DCTSIZE * 0] - dataptr[DCTSIZE * 7];
1c001cfe:	40ca0833          	sub	a6,s4,a2
        tmp6 = dataptr[DCTSIZE * 1] - dataptr[DCTSIZE * 6];
1c001d02:	406986b3          	sub	a3,s3,t1
        tmp5 = dataptr[DCTSIZE * 2] - dataptr[DCTSIZE * 5];
1c001d06:	40990ab3          	sub	s5,s2,s1
        tmp4 = dataptr[DCTSIZE * 3] - dataptr[DCTSIZE * 4];
1c001d0a:	407408b3          	sub	a7,s0,t2
        tmp1 = dataptr[DCTSIZE * 1] + dataptr[DCTSIZE * 6];
1c001d0e:	934e                	add	t1,t1,s3
        tmp10 = tmp4 + tmp5;  /* phase 2 */
1c001d10:	98d6                	add	a7,a7,s5
        tmp12 = tmp6 + tmp7;
1c001d12:	00d809b3          	add	s3,a6,a3
        tmp0 = dataptr[DCTSIZE * 0] + dataptr[DCTSIZE * 7];
1c001d16:	9652                	add	a2,a2,s4
        tmp11 = tmp5 + tmp6;
1c001d18:	9ab6                	add	s5,s5,a3
        tmp2 = dataptr[DCTSIZE * 2] + dataptr[DCTSIZE * 5];
1c001d1a:	00990a33          	add	s4,s2,s1
        z5 = __builtin_pulp_mulfsN(tmp10 - tmp12, FP2FIX(0.382683433f, Q11), Q11);       /* c6 */
1c001d1e:	413884b3          	sub	s1,a7,s3
1c001d22:	965484db          	p.mulsn	s1,s1,t0,11
        tmp3 = dataptr[DCTSIZE * 3] + dataptr[DCTSIZE * 4];
1c001d26:	941e                	add	s0,s0,t2
        tmp13 = tmp0 - tmp3;
1c001d28:	408603b3          	sub	t2,a2,s0
        tmp12 = tmp1 - tmp2;
1c001d2c:	41430933          	sub	s2,t1,s4
        tmp10 = tmp0 + tmp3;  /* phase 2 */
1c001d30:	9622                	add	a2,a2,s0
        tmp11 = tmp1 + tmp2;
1c001d32:	9352                	add	t1,t1,s4
        dataptr[DCTSIZE * 0] = __builtin_pulp_trunch(tmp10 + tmp11);  /* phase 3 */
1c001d34:	00660433          	add	s0,a2,t1
        dataptr[DCTSIZE * 4] = __builtin_pulp_trunch(tmp10 - tmp11);
1c001d38:	40660633          	sub	a2,a2,t1
        dataptr[DCTSIZE * 0] = __builtin_pulp_trunch(tmp10 + tmp11);  /* phase 3 */
1c001d3c:	8322                	mv	t1,s0
        z3 = __builtin_pulp_mulfsN(tmp11,       FP2FIX(0.707106781f, Q11), Q11);            /* c4 */
1c001d3e:	97da86db          	p.mulsn	a3,s5,t4,11
        dataptr[DCTSIZE * 0] = __builtin_pulp_trunch(tmp10 + tmp11);  /* phase 3 */
1c001d42:	00679023          	sh	t1,0(a5)
        dataptr[DCTSIZE * 4] = __builtin_pulp_trunch(tmp10 - tmp11);
1c001d46:	04c79023          	sh	a2,64(a5)
        z1 = __builtin_pulp_mulfsN(tmp12 + tmp13, FP2FIX(0.707106781f, Q11), Q11);       /* c4 */
1c001d4a:	991e                	add	s2,s2,t2
        dataptr[DCTSIZE * 5] = __builtin_pulp_trunch(z13 + z2); /* phase 6 */
        dataptr[DCTSIZE * 3] = __builtin_pulp_trunch(z13 - z2);
        dataptr[DCTSIZE * 1] = __builtin_pulp_trunch(z11 + z4);
        dataptr[DCTSIZE * 7] = __builtin_pulp_trunch(z11 - z4);

        dataptr++;  /* advance pointer to next column */
1c001d4c:	0789                	addi	a5,a5,2
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
1c001d4e:	97f888db          	p.mulsn	a7,a7,t6,11
        z11 = tmp7 + z3;  /* phase 5 */
1c001d52:	00d80333          	add	t1,a6,a3
        z13 = tmp7 - z3;
1c001d56:	40d806b3          	sub	a3,a6,a3
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001d5a:	97e9865b          	p.mulsn	a2,s3,t5,11
        z2 = __builtin_pulp_mulfsN(tmp10,       FP2FIX(0.541196100f, Q11), Q11) + z5;   /* c2-c6 */
1c001d5e:	00988833          	add	a6,a7,s1
        dataptr[DCTSIZE * 5] = __builtin_pulp_trunch(z13 + z2); /* phase 6 */
1c001d62:	00d808b3          	add	a7,a6,a3
        dataptr[DCTSIZE * 3] = __builtin_pulp_trunch(z13 - z2);
1c001d66:	410686b3          	sub	a3,a3,a6
1c001d6a:	02d79723          	sh	a3,46(a5)
        dataptr[DCTSIZE * 5] = __builtin_pulp_trunch(z13 + z2); /* phase 6 */
1c001d6e:	8846                	mv	a6,a7
1c001d70:	05079723          	sh	a6,78(a5)
        z1 = __builtin_pulp_mulfsN(tmp12 + tmp13, FP2FIX(0.707106781f, Q11), Q11);       /* c4 */
1c001d74:	97d906db          	p.mulsn	a3,s2,t4,11
        z4 = __builtin_pulp_mulfsN(tmp12,       FP2FIX(1.306562965f, Q11), Q11) + z5;   /* c2+c6 */
1c001d78:	9626                	add	a2,a2,s1
        dataptr[DCTSIZE * 1] = __builtin_pulp_trunch(z11 + z4);
1c001d7a:	00660833          	add	a6,a2,t1
        dataptr[DCTSIZE * 7] = __builtin_pulp_trunch(z11 - z4);
1c001d7e:	40c30633          	sub	a2,t1,a2
1c001d82:	06c79723          	sh	a2,110(a5)
        dataptr[DCTSIZE * 1] = __builtin_pulp_trunch(z11 + z4);
1c001d86:	01079723          	sh	a6,14(a5)
        dataptr[DCTSIZE * 2] = __builtin_pulp_trunch(tmp13 + z1);  /* phase 5 */
1c001d8a:	00d38633          	add	a2,t2,a3
        dataptr[DCTSIZE * 6] = __builtin_pulp_trunch(tmp13 - z1);
1c001d8e:	40d386b3          	sub	a3,t2,a3
        dataptr[DCTSIZE * 2] = __builtin_pulp_trunch(tmp13 + z1);  /* phase 5 */
1c001d92:	00c79f23          	sh	a2,30(a5)
        dataptr[DCTSIZE * 6] = __builtin_pulp_trunch(tmp13 - z1);
1c001d96:	04d79f23          	sh	a3,94(a5)
        dataptr++;  /* advance pointer to next column */
1c001d9a:	8f09                	sub	a4,a4,a0
1c001d9c:	1779                	addi	a4,a4,-2
1c001d9e:	8305                	srli	a4,a4,0x1
1c001da0:	0705                	addi	a4,a4,1
1c001da2:	008740fb          	lp.setup	x1,a4,1c001db2 <Dct8x8+0x1d4>
    }

    for (ctr = 0; ctr < 64; ctr++) data[ctr]  = __builtin_pulp_mulfsN(data[ctr], ftab[ctr], Q11 + 2);
1c001da6:	00051783          	lh	a5,0(a0)
1c001daa:	0025968b          	p.lh	a3,2(a1!)
1c001dae:	9ad787db          	p.mulsn	a5,a5,a3,13
1c001db2:	00f5112b          	p.sh	a5,2(a0!)
}
1c001db6:	4472                	lw	s0,28(sp)
1c001db8:	44e2                	lw	s1,24(sp)
1c001dba:	4952                	lw	s2,20(sp)
1c001dbc:	49c2                	lw	s3,16(sp)
1c001dbe:	4a32                	lw	s4,12(sp)
1c001dc0:	4aa2                	lw	s5,8(sp)
1c001dc2:	6105                	addi	sp,sp,32
1c001dc4:	8082                	ret

1c001dc6 <__rt_i2c_handle_tx_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_i2c_handle_tx_copy
__rt_i2c_handle_tx_copy:

  slli   x8, x10, 2
1c001dc6:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c001dca:	30842403          	lw	s0,776(s0)

  lw  	x11, PI_I2C_T_PENDING_STEP(x8)
1c001dce:	4c0c                	lw	a1,24(s0)
  jr    x11
1c001dd0:	8582                	jr	a1

1c001dd2 <__rt_i2c_step1>:

  .global __rt_i2c_step1
__rt_i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x12, PI_I2C_T_PENDING_BASE(x8)
1c001dd2:	4450                	lw	a2,12(s0)
  lw          x10, PI_I2C_T_PENDING_DATA(x8)
1c001dd4:	4808                	lw	a0,16(s0)
  lw          x11, PI_I2C_T_PENDING_LENGTH(x8)
1c001dd6:	484c                	lw	a1,20(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c001dd8:	c208                	sw	a0,0(a2)
  sw          x11, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c001dda:	c24c                	sw	a1,4(a2)
  lw          x11, PI_I2C_T_PENDING_NEXT_STEP(x8)
1c001ddc:	4c4c                	lw	a1,28(s0)
  li          x10, UDMA_CHANNEL_CFG_EN
1c001dde:	4541                	li	a0,16
  sw          x11, PI_I2C_T_PENDING_STEP(x8)
1c001de0:	cc0c                	sw	a1,24(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c001de2:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c001de4:	43e0006f          	j	1c002222 <udma_event_handler_end>

1c001de8 <__rt_i2c_step2>:

  .global __rt_i2c_step2
__rt_i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  la          x10, __rt_i2c_step3
1c001de8:	00000517          	auipc	a0,0x0
1c001dec:	01e50513          	addi	a0,a0,30 # 1c001e06 <__rt_i2c_step3>
  sw          x10, PI_I2C_T_PENDING_STEP(x8)
1c001df0:	cc08                	sw	a0,24(s0)
  
  lw          x12, PI_I2C_T_PENDING_BASE(x8)
1c001df2:	4450                	lw	a2,12(s0)
  addi        x10, x8, PI_I2C_T_UDMA_STOP_CMD
1c001df4:	02040513          	addi	a0,s0,32
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c001df8:	c208                	sw	a0,0(a2)
  li          x10, 1
1c001dfa:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c001dfc:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c001dfe:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c001e00:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c001e02:	4200006f          	j	1c002222 <udma_event_handler_end>

1c001e06 <__rt_i2c_step3>:

  .global __rt_i2c_step3
__rt_i2c_step3:
  lw        x11, PI_I2C_T_PENDING_COPY(x8)
1c001e06:	400c                	lw	a1,0(s0)
  sw        x0, PI_I2C_T_PENDING_COPY(x8)
1c001e08:	00042023          	sw	zero,0(s0)
  //beqz      x11, __rt_hyper_handle_emu_task
  jal       x9, __rt_event_enqueue
1c001e0c:	080004ef          	jal	s1,1c001e8c <__rt_event_enqueue>

  j           udma_event_handler_end
1c001e10:	4120006f          	j	1c002222 <udma_event_handler_end>

1c001e14 <__rt_i2c_handle_rx_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_i2c_handle_rx_copy
__rt_i2c_handle_rx_copy:

  slli   x8, x10, 2
1c001e14:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c001e18:	30842403          	lw	s0,776(s0)

  j      __rt_i2c_step3
1c001e1c:	b7ed                	j	1c001e06 <__rt_i2c_step3>

1c001e1e <_entry>:
  csrw    0x7A1, x0
1c001e1e:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c001e22:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c001e26:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c001e2a:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c001e2c:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c001e30:	00c50463          	beq	a0,a2,1c001e38 <_entry+0x1a>
1c001e34:	1a50806f          	j	1c00a7d8 <__cluster_text_start>
  la      t0, _bss_start
1c001e38:	0000a297          	auipc	t0,0xa
1c001e3c:	25828293          	addi	t0,t0,600 # 1c00c090 <_bss_start>
  la      t1, _bss_end
1c001e40:	0000a317          	auipc	t1,0xa
1c001e44:	59830313          	addi	t1,t1,1432 # 1c00c3d8 <_bss_end>
  sw      zero,0(t0)
1c001e48:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c001e4c:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c001e4e:	fe62ede3          	bltu	t0,t1,1c001e48 <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c001e52:	00009517          	auipc	a0,0x9
1c001e56:	70e50513          	addi	a0,a0,1806 # 1c00b560 <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c001e5a:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c001e5c:	feffe117          	auipc	sp,0xfeffe
1c001e60:	58c10113          	addi	sp,sp,1420 # 1b0003e8 <__rt_fc_stack>
  add  x2, x2, a0
1c001e64:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c001e66:	77b030ef          	jal	ra,1c005de0 <__rt_init>
  addi  a0, x0, 0
1c001e6a:	00000513          	li	a0,0
  addi  a1, x0, 0
1c001e6e:	00000593          	li	a1,0
  la    t2, main
1c001e72:	00001397          	auipc	t2,0x1
1c001e76:	06a38393          	addi	t2,t2,106 # 1c002edc <main>
  jalr  x1, t2
1c001e7a:	000380e7          	jalr	t2
  mv    s0, a0
1c001e7e:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c001e80:	0c6040ef          	jal	ra,1c005f46 <__rt_deinit>
  mv   a0, s0
1c001e84:	8522                	mv	a0,s0
  jal  x1, exit
1c001e86:	195070ef          	jal	ra,1c00981a <exit>

1c001e8a <_fini>:
  ret
1c001e8a:	8082                	ret

1c001e8c <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c001e8c:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c001e90:	02051063          	bnez	a0,1c001eb0 <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c001e94:	e3ffe517          	auipc	a0,0xe3ffe
1c001e98:	18850513          	addi	a0,a0,392 # 1c <_l1_preload_size>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c001e9c:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c001ea0:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c001ea2:	c601                	beqz	a2,1c001eaa <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c001ea4:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c001ea6:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c001ea8:	a011                	j	1c001eac <__rt_common>

1c001eaa <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c001eaa:	c10c                	sw	a1,0(a0)

1c001eac <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c001eac:	c14c                	sw	a1,4(a0)

1c001eae <enqueue_end>:

enqueue_end:
  jr          x9
1c001eae:	8482                	jr	s1

1c001eb0 <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c001eb0:	5571                	li	a0,-4
  and     x11, x11, x10
1c001eb2:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c001eb4:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c001eb6:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c001eb8:	a0d9                	j	1c001f7e <__rt_call_external_c_function>

1c001eba <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c001eba:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c001ebe:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c001ec2:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c001ec6:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c001eca:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c001ece:	00004617          	auipc	a2,0x4
1c001ed2:	3f660613          	addi	a2,a2,1014 # 1c0062c4 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c001ed6:	0a8004ef          	jal	s1,1c001f7e <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c001eda:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c001ede:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c001ee2:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c001ee6:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c001eea:	fec12603          	lw	a2,-20(sp)

    mret
1c001eee:	30200073          	mret

1c001ef2 <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c001ef2:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c001ef6:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c001efa:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c001efe:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c001f02:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c001f06:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c001f08:	0000a497          	auipc	s1,0xa
1c001f0c:	4a848493          	addi	s1,s1,1192 # 1c00c3b0 <__rt_fc_cluster_data>

1c001f10 <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c001f10:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c001f12:	02058d63          	beqz	a1,1c001f4c <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c001f16:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c001f18:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c001f1a:	00050e63          	beqz	a0,1c001f36 <__rt_cluster_pool_update_end>

1c001f1e <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c001f1e:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c001f20:	e219                	bnez	a2,1c001f26 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c001f22:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c001f24:	fd6d                	bnez	a0,1c001f1e <__rt_cluster_pool_update_loop>

1c001f26 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c001f26:	c501                	beqz	a0,1c001f2e <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c001f28:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c001f2a:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c001f2c:	a029                	j	1c001f36 <__rt_cluster_pool_update_end>

1c001f2e <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c001f2e:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c001f32:	0005a423          	sw	zero,8(a1)

1c001f36 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c001f36:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c001f38:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c001f3a:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c001f3e:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c001f42:	00000497          	auipc	s1,0x0
1c001f46:	00a48493          	addi	s1,s1,10 # 1c001f4c <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c001f4a:	b789                	j	1c001e8c <__rt_event_enqueue>

1c001f4c <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c001f4c:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c001f4e:	00804e63          	bgtz	s0,1c001f6a <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c001f52:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c001f56:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c001f5a:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c001f5e:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c001f62:	fec12603          	lw	a2,-20(sp)

    mret
1c001f66:	30200073          	mret

1c001f6a <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c001f6a:	0000a497          	auipc	s1,0xa
1c001f6e:	44648493          	addi	s1,s1,1094 # 1c00c3b0 <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c001f72:	02800593          	li	a1,40
    mul  a1, x8, a1
1c001f76:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c001f7a:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c001f7c:	bf51                	j	1c001f10 <__rt_remote_enqueue_event_loop_cluster>

1c001f7e <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c001f7e:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c001f80:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c001f82:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c001f84:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c001f86:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c001f88:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c001f8a:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c001f8c:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c001f8e:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c001f90:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c001f92:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c001f94:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c001f96:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c001f98:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c001f9a:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c001f9c:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c001f9e:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c001fa2:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c001fa4:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c001fa6:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c001fa8:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c001faa:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c001fac:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c001fae:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c001fb0:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c001fb2:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c001fb4:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c001fb6:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c001fb8:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c001fba:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c001fbc:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c001fbe:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c001fc0:	6109                	addi	sp,sp,128

    jr   x9
1c001fc2:	8482                	jr	s1

1c001fc4 <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c001fc4:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c001fc8:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c001fcc:	00004517          	auipc	a0,0x4
1c001fd0:	ff450513          	addi	a0,a0,-12 # 1c005fc0 <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c001fd4:	010000ef          	jal	ra,1c001fe4 <__rt_call_c_function>
    lw   ra, -4(sp)
1c001fd8:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c001fdc:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c001fe0:	30200073          	mret

1c001fe4 <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c001fe4:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c001fe6:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c001fe8:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c001fea:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c001fec:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c001fee:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c001ff0:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c001ff2:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c001ff4:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c001ff6:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c001ff8:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c001ffa:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c001ffc:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c001ffe:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c002000:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c002002:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c002004:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c002006:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c002008:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c00200c:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c00200e:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c002010:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c002012:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c002014:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c002016:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c002018:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c00201a:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c00201c:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c00201e:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c002020:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c002022:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c002024:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c002026:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c002028:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c00202a:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c00202c:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c00202e:	6109                	addi	sp,sp,128

    jr   ra
1c002030:	8082                	ret

1c002032 <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c002032:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c002034:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c002036:	08040f63          	beqz	s0,1c0020d4 <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c00203a:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00203c:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c00203e:	04061f63          	bnez	a2,1c00209c <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c002042:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c002044:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c002046:	e15d                	bnez	a0,1c0020ec <handle_special_end>

1c002048 <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c002048:	02058f63          	beqz	a1,1c002086 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c00204c:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c00204e:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c002050:	c611                	beqz	a2,1c00205c <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c002052:	00000497          	auipc	s1,0x0
1c002056:	00a48493          	addi	s1,s1,10 # 1c00205c <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c00205a:	8602                	jr	a2

1c00205c <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00205c:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c00205e:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c002060:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c002062:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c002064:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c002066:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c002068:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c00206a:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c00206c:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c00206e:	00a4ca63          	blt	s1,a0,1c002082 <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c002072:	0064a463          	p.beqimm	s1,6,1c00207a <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c002076:	0074a263          	p.beqimm	s1,7,1c00207a <dual>

1c00207a <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c00207a:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c00207c:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c002080:	d088                	sw	a0,32(s1)

1c002082 <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c002082:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c002084:	c608                	sw	a0,8(a2)

1c002086 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c002086:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c002088:	00000497          	auipc	s1,0x0
1c00208c:	19a48493          	addi	s1,s1,410 # 1c002222 <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c002090:	00058463          	beqz	a1,1c002098 <checkTask+0x12>
1c002094:	df9ff06f          	j	1c001e8c <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c002098:	18a0006f          	j	1c002222 <udma_event_handler_end>

1c00209c <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00209c:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c00209e:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0020a0:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c0020a4:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0020a6:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c0020a8:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0020aa:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c0020ac:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c0020ae:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c0020b0:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c0020b2:	00964963          	blt	a2,s1,1c0020c4 <not_last>
  mv      x12, x9
1c0020b6:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c0020b8:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c0020bc:	00061463          	bnez	a2,1c0020c4 <not_last>
1c0020c0:	1620006f          	j	1c002222 <udma_event_handler_end>

1c0020c4 <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0020c4:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c0020c6:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0020c8:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0020ca:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c0020cc:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0020ce:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c0020d0:	1520006f          	j	1c002222 <udma_event_handler_end>

1c0020d4 <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c0020d4:	e3ffe497          	auipc	s1,0xe3ffe
1c0020d8:	1dc48493          	addi	s1,s1,476 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c0020dc:	4080                	lw	s0,0(s1)
  li      x11, 1
1c0020de:	4585                	li	a1,1
  sll     x10, x11, x10
1c0020e0:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c0020e4:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c0020e6:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c0020e8:	13a0006f          	j	1c002222 <udma_event_handler_end>

1c0020ec <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c0020ec:	04352463          	p.beqimm	a0,3,1c002134 <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c0020f0:	06452063          	p.beqimm	a0,4,1c002150 <i2c_step2>
#endif

  j           resume_after_special_end
1c0020f4:	bf91                	j	1c002048 <resume_after_special_end>

1c0020f6 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0020f6:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0020f8:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0020fa:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0020fc:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0020fe:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c002100:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c002102:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c002104:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c002106:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c002108:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c00210a:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00210c:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c00210e:	1140006f          	j	1c002222 <udma_event_handler_end>

1c002112 <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c002112:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c002116:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c002118:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00211a:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00211c:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c00211e:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c002122:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c002124:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c002126:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c002128:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c00212a:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c00212c:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00212e:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c002130:	0f20006f          	j	1c002222 <udma_event_handler_end>

1c002134 <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c002134:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c002136:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c002138:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00213a:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00213c:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00213e:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c002140:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c002142:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c002144:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c002146:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c002148:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00214a:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c00214c:	0d60006f          	j	1c002222 <udma_event_handler_end>

1c002150 <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c002150:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c002154:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c002156:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c002158:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00215a:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c00215c:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c002160:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c002162:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c002164:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c002166:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c002168:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c00216a:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00216c:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c00216e:	0b40006f          	j	1c002222 <udma_event_handler_end>

1c002172 <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c002172:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c002174:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c002176:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c002178:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c00217a:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c00217c:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c00217e:	00201437          	lui	s0,0x201
1c002182:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c002186:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c002188:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c00218c:	00204537          	lui	a0,0x204
1c002190:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c002194:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c002196:	35802603          	lw	a2,856(zero) # 358 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c00219a:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c00219e:	00653363          	p.bneimm	a0,6,1c0021a4 <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c0021a2:	8602                	jr	a2

1c0021a4 <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c0021a4:	00753363          	p.bneimm	a0,7,1c0021aa <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c0021a8:	8602                	jr	a2

1c0021aa <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c0021aa:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c0021ac:	00955c63          	ble	s1,a0,1c0021c4 <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c0021b0:	e3ffe417          	auipc	s0,0xe3ffe
1c0021b4:	e8040413          	addi	s0,s0,-384 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c0021b8:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c0021bc:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c0021be:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0021c0:	4080                	lw	s0,0(s1)

  jr   x11
1c0021c2:	8582                	jr	a1

1c0021c4 <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c0021c4:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c0021c6:	00955b63          	ble	s1,a0,1c0021dc <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c0021ca:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c0021ce:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c0021d2:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c0021d6:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c0021da:	8602                	jr	a2

1c0021dc <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c0021dc:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c0021e0:	00951463          	bne	a0,s1,1c0021e8 <__rt_soc_evt_no_udma+0xc>
1c0021e4:	1860006f          	j	1c00236a <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c0021e8:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c0021ec:	04a48363          	beq	s1,a0,1c002232 <rtc_event_handler>

1c0021f0 <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c0021f0:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c0021f2:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c0021f6:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c0021f8:	0095c663          	blt	a1,s1,1c002204 <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c0021fc:	0004c463          	bltz	s1,1c002204 <__rt_soc_evt_store>
  j pwm_event_handler
1c002200:	06e0006f          	j	1c00226e <pwm_event_handler>

1c002204 <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c002204:	e3ffe497          	auipc	s1,0xe3ffe
1c002208:	0ac48493          	addi	s1,s1,172 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c00220c:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c002210:	00b54463          	blt	a0,a1,1c002218 <socevents_set>
  addi    x9, x9, 4
1c002214:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c002216:	1501                	addi	a0,a0,-32

1c002218 <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c002218:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c00221a:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c00221e:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c002220:	a009                	j	1c002222 <udma_event_handler_end>

1c002222 <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c002222:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c002224:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c002226:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c002228:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c00222a:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c00222c:	6109                	addi	sp,sp,128
  mret
1c00222e:	30200073          	mret

1c002232 <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c002232:	e3ffe597          	auipc	a1,0xe3ffe
1c002236:	1ae5a583          	lw	a1,430(a1) # 3e0 <__rtc_handler>
  la    x9, udma_event_handler_end
1c00223a:	00000497          	auipc	s1,0x0
1c00223e:	fe848493          	addi	s1,s1,-24 # 1c002222 <udma_event_handler_end>
  j   __rt_event_enqueue
1c002242:	c4bff06f          	j	1c001e8c <__rt_event_enqueue>

1c002246 <__rt_udma_handle_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_udma_handle_copy
__rt_udma_handle_copy:

  slli   x8, x10, 2
1c002246:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c00224a:	30842403          	lw	s0,776(s0)

  // First update all the queues
  lw     x12, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c00224e:	4050                	lw	a2,4(s0)
  lw     x11, RT_UDMA_CHANNEL_T_PENDINGS_0(x8)
1c002250:	400c                	lw	a1,0(s0)
  lw     x9, RT_UDMA_CHANNEL_T_PENDINGS_FIRST(x8)
1c002252:	4404                	lw	s1,8(s0)
  sw     x12, RT_UDMA_CHANNEL_T_PENDINGS_0(x8)
1c002254:	c010                	sw	a2,0(s0)


  bnez   x9, __rt_udma_handle_pending
1c002256:	e889                	bnez	s1,1c002268 <__rt_udma_handle_pending>

  sw     x0, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c002258:	00042223          	sw	zero,4(s0)
  la     x9, udma_event_handler_end
1c00225c:	00000497          	auipc	s1,0x0
1c002260:	fc648493          	addi	s1,s1,-58 # 1c002222 <udma_event_handler_end>
  j      __rt_event_enqueue
1c002264:	c29ff06f          	j	1c001e8c <__rt_event_enqueue>

1c002268 <__rt_udma_handle_pending>:




__rt_udma_handle_pending:
  sw     x9, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c002268:	c044                	sw	s1,4(s0)
  lw     x11, PI_TASK_T_NEXT(x9)
1c00226a:	4ccc                	lw	a1,28(s1)
  sw     x11, RT_UDMA_CHANNEL_T_PENDINGS_FIRST(x8)
1c00226c:	c40c                	sw	a1,8(s0)

1c00226e <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c00226e:	e3ffe517          	auipc	a0,0xe3ffe
1c002272:	13650513          	addi	a0,a0,310 # 3a4 <pwmEventsStatus>
  addi  x11, x0, 1
1c002276:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c00227a:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c00227c:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c002280:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c002282:	002044b7          	lui	s1,0x204
1c002286:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c00228a:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c00228c:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c00228e:	f95ff06f          	j	1c002222 <udma_event_handler_end>

1c002292 <__pi_spim_handle_eot>:
__pi_spim_handle_eot:
	
  // End of transfer notified through EOT, just compute the corresponding
  // event so that we can get the SPI context as for events

  addi   x8, x10, (- ARCHI_SOC_EVENT_SPIM0_EOT + ARCHI_UDMA_SPIM_ID(0))
1c002292:	feb50413          	addi	s0,a0,-21
  slli   x10, x8, UDMA_NB_PERIPH_EVENTS_LOG2
1c002296:	00141513          	slli	a0,s0,0x1

1c00229a <__pi_spim_handle_copy>:
  // x9: channel, x10: event, x8,x11,x12:temp
  .global __pi_spim_handle_copy
__pi_spim_handle_copy:

  // Get the SPI context
  slli   x8, x10, 2  
1c00229a:	00251413          	slli	s0,a0,0x2
#ifdef CONFIG_NO_FC_TINY
  la     x12, __rt_udma_channels
  p.lw   x8, x8(x12)
#else
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c00229e:	30842403          	lw	s0,776(s0)
#endif

  // Check if we have to repeat the current transfer
  lw     x11, PI_SPIM_T_REPEAT_LEN(x8)
1c0022a2:	444c                	lw	a1,12(s0)
  beqz   x11, __rt_spim_no_repeat
1c0022a4:	cd81                	beqz	a1,1c0022bc <__rt_spim_no_repeat>

  la     x9, udma_event_handler_end
1c0022a6:	00000497          	auipc	s1,0x0
1c0022aa:	f7c48493          	addi	s1,s1,-132 # 1c002222 <udma_event_handler_end>
  la     x12, __rt_spi_handle_repeat
1c0022ae:	00006617          	auipc	a2,0x6
1c0022b2:	daa60613          	addi	a2,a2,-598 # 1c008058 <__rt_spi_handle_repeat>
  mv     x10, x8
1c0022b6:	8522                	mv	a0,s0

  j      __rt_call_external_c_function
1c0022b8:	cc7ff06f          	j	1c001f7e <__rt_call_external_c_function>

1c0022bc <__rt_spim_no_repeat>:

__rt_spim_no_repeat:
  // Check if we have to handle a waiting copy
  lw     x11, PI_SPIM_T_WAITING_FIRST(x8)
1c0022bc:	404c                	lw	a1,4(s0)
  bnez   x11, __rt_spim_handle_waiting
1c0022be:	e991                	bnez	a1,1c0022d2 <__rt_spim_handle_waiting>

  // And handle the end-of-transfer task
  lw     x11, PI_SPIM_T_PENDING_COPY(x8)
1c0022c0:	400c                	lw	a1,0(s0)
  sw     x0, PI_SPIM_T_PENDING_COPY(x8)
1c0022c2:	00042023          	sw	zero,0(s0)

  la     x9, udma_event_handler_end
1c0022c6:	00000497          	auipc	s1,0x0
1c0022ca:	f5c48493          	addi	s1,s1,-164 # 1c002222 <udma_event_handler_end>
  j      __rt_event_enqueue
1c0022ce:	bbfff06f          	j	1c001e8c <__rt_event_enqueue>

1c0022d2 <__rt_spim_handle_waiting>:


__rt_spim_handle_waiting:
  lw     x11, PI_SPIM_T_PENDING_COPY(x8)
1c0022d2:	400c                	lw	a1,0(s0)
  sw     x0, PI_SPIM_T_PENDING_COPY(x8)
1c0022d4:	00042023          	sw	zero,0(s0)
  jal    x9, __rt_event_enqueue
1c0022d8:	bb5ff4ef          	jal	s1,1c001e8c <__rt_event_enqueue>

  // Get the current and move the first waiting one to current one
  lw     x10, PI_SPIM_T_WAITING_FIRST(x8)
1c0022dc:	4048                	lw	a0,4(s0)
  lw     x12, PI_TASK_T_NEXT(x10)
1c0022de:	4d50                	lw	a2,28(a0)
  sw     x12, PI_SPIM_T_WAITING_FIRST(x8)
1c0022e0:	c050                	sw	a2,4(s0)

  la     x9, udma_event_handler_end
1c0022e2:	00000497          	auipc	s1,0x0
1c0022e6:	f4048493          	addi	s1,s1,-192 # 1c002222 <udma_event_handler_end>
  la     x12, __pi_handle_waiting_copy
1c0022ea:	00007617          	auipc	a2,0x7
1c0022ee:	96c60613          	addi	a2,a2,-1684 # 1c008c56 <__pi_handle_waiting_copy>

  j      __rt_call_external_c_function
1c0022f2:	c8dff06f          	j	1c001f7e <__rt_call_external_c_function>

1c0022f6 <__rt_spim_handle_tx_copy>:
  // This handler is only used for CS keep mode where
  // EOT can not be used for the termination
  // TX soc event was temporarly activated due to that, now we
  // have to deactivate it

  li     x12, ARCHI_SOC_EU_ADDR
1c0022f6:	1a106637          	lui	a2,0x1a106
  lw     x11, SOC_FC_MASK_LSB(x12)
1c0022fa:	460c                	lw	a1,8(a2)
  li     x8, 1
1c0022fc:	4405                	li	s0,1
  sll    x8, x8, x10
1c0022fe:	00a41433          	sll	s0,s0,a0
  or     x8, x8, x11
1c002302:	8c4d                	or	s0,s0,a1
  sw     x8, SOC_FC_MASK_LSB(x12)
1c002304:	c600                	sw	s0,8(a2)

  j      __pi_spim_handle_copy
1c002306:	bf51                	j	1c00229a <__pi_spim_handle_copy>

1c002308 <__rt_spim_handle_rx_copy>:
  // This handler is only used for CS keep mode where
  // EOT can not be used for the termination
  // TX soc event was temporarly activated due to that, now we
  // have to deactivate it

  li     x12, ARCHI_SOC_EU_ADDR
1c002308:	1a106637          	lui	a2,0x1a106
  lw     x11, SOC_FC_MASK_LSB(x12)
1c00230c:	460c                	lw	a1,8(a2)
  li     x8, 1
1c00230e:	4405                	li	s0,1
  sll    x8, x8, x10
1c002310:	00a41433          	sll	s0,s0,a0
  or     x8, x8, x11
1c002314:	8c4d                	or	s0,s0,a1
  sw     x8, SOC_FC_MASK_LSB(x12)
1c002316:	c600                	sw	s0,8(a2)

  j      __pi_spim_handle_copy
1c002318:	b749                	j	1c00229a <__pi_spim_handle_copy>

1c00231a <__pos_spim_receive_handle_temp_buffer>:



  .global __pos_spim_receive_handle_temp_buffer
__pos_spim_receive_handle_temp_buffer:
  la     x9, udma_event_handler_end
1c00231a:	00000497          	auipc	s1,0x0
1c00231e:	f0848493          	addi	s1,s1,-248 # 1c002222 <udma_event_handler_end>
  la     x12, pos_spim_receive_handle_temp_buffer
1c002322:	00007617          	auipc	a2,0x7
1c002326:	9e060613          	addi	a2,a2,-1568 # 1c008d02 <pos_spim_receive_handle_temp_buffer>

  j      __rt_call_external_c_function
1c00232a:	c55ff06f          	j	1c001f7e <__rt_call_external_c_function>

1c00232e <__pos_spim_receive_enqueue_transfer>:


  .global __pos_spim_receive_enqueue_transfer
__pos_spim_receive_enqueue_transfer:
  la     x9, udma_event_handler_end
1c00232e:	00000497          	auipc	s1,0x0
1c002332:	ef448493          	addi	s1,s1,-268 # 1c002222 <udma_event_handler_end>
  la     x12, pos_spim_receive_enqueue_transfer
1c002336:	00006617          	auipc	a2,0x6
1c00233a:	58a60613          	addi	a2,a2,1418 # 1c0088c0 <pos_spim_receive_enqueue_transfer>

  j      __rt_call_external_c_function
1c00233e:	c41ff06f          	j	1c001f7e <__rt_call_external_c_function>

1c002342 <__pos_spim_send_enqueue_transfer>:


  .global __pos_spim_send_enqueue_transfer
__pos_spim_send_enqueue_transfer:
  la     x9, udma_event_handler_end
1c002342:	00000497          	auipc	s1,0x0
1c002346:	ee048493          	addi	s1,s1,-288 # 1c002222 <udma_event_handler_end>
  la     x12, pos_spim_send_enqueue_transfer
1c00234a:	00006617          	auipc	a2,0x6
1c00234e:	38460613          	addi	a2,a2,900 # 1c0086ce <pos_spim_send_enqueue_transfer>

  j      __rt_call_external_c_function
1c002352:	c2dff06f          	j	1c001f7e <__rt_call_external_c_function>

1c002356 <__pos_spim_handle_copy_eot>:


  .global __pos_spim_handle_copy_eot
__pos_spim_handle_copy_eot:
  la     x9, udma_event_handler_end
1c002356:	00000497          	auipc	s1,0x0
1c00235a:	ecc48493          	addi	s1,s1,-308 # 1c002222 <udma_event_handler_end>
  la     x12, pos_spim_handle_copy_eot
1c00235e:	00007617          	auipc	a2,0x7
1c002362:	95e60613          	addi	a2,a2,-1698 # 1c008cbc <pos_spim_handle_copy_eot>

  j      __rt_call_external_c_function
1c002366:	c19ff06f          	j	1c001f7e <__rt_call_external_c_function>

1c00236a <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c00236a:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c00236c:	00007617          	auipc	a2,0x7
1c002370:	a6260613          	addi	a2,a2,-1438 # 1c008dce <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c002374:	00000497          	auipc	s1,0x0
1c002378:	00c48493          	addi	s1,s1,12 # 1c002380 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c00237c:	c03ff06f          	j	1c001f7e <__rt_call_external_c_function>

1c002380 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c002380:	ea3ff06f          	j	1c002222 <udma_event_handler_end>

1c002384 <__udivdi3>:
1c002384:	87b2                	mv	a5,a2
1c002386:	8736                	mv	a4,a3
1c002388:	88aa                	mv	a7,a0
1c00238a:	882e                	mv	a6,a1
1c00238c:	1e069d63          	bnez	a3,1c002586 <__udivdi3+0x202>
1c002390:	1c00b337          	lui	t1,0x1c00b
1c002394:	a3c30313          	addi	t1,t1,-1476 # 1c00aa3c <__clz_tab>
1c002398:	0ac5fd63          	bleu	a2,a1,1c002452 <__udivdi3+0xce>
1c00239c:	6741                	lui	a4,0x10
1c00239e:	0ae67363          	bleu	a4,a2,1c002444 <__udivdi3+0xc0>
1c0023a2:	0ff00693          	li	a3,255
1c0023a6:	00c6b6b3          	sltu	a3,a3,a2
1c0023aa:	068e                	slli	a3,a3,0x3
1c0023ac:	00d65733          	srl	a4,a2,a3
1c0023b0:	933a                	add	t1,t1,a4
1c0023b2:	00034703          	lbu	a4,0(t1)
1c0023b6:	02000313          	li	t1,32
1c0023ba:	96ba                	add	a3,a3,a4
1c0023bc:	40d30333          	sub	t1,t1,a3
1c0023c0:	00030c63          	beqz	t1,1c0023d8 <__udivdi3+0x54>
1c0023c4:	00659733          	sll	a4,a1,t1
1c0023c8:	00d556b3          	srl	a3,a0,a3
1c0023cc:	006617b3          	sll	a5,a2,t1
1c0023d0:	00e6e833          	or	a6,a3,a4
1c0023d4:	006518b3          	sll	a7,a0,t1
1c0023d8:	0107d513          	srli	a0,a5,0x10
1c0023dc:	02a85733          	divu	a4,a6,a0
1c0023e0:	1007d5b3          	p.exthz	a1,a5
1c0023e4:	0108d693          	srli	a3,a7,0x10
1c0023e8:	02a87633          	remu	a2,a6,a0
1c0023ec:	02e58833          	mul	a6,a1,a4
1c0023f0:	0642                	slli	a2,a2,0x10
1c0023f2:	8ed1                	or	a3,a3,a2
1c0023f4:	863a                	mv	a2,a4
1c0023f6:	0106fc63          	bleu	a6,a3,1c00240e <__udivdi3+0x8a>
1c0023fa:	96be                	add	a3,a3,a5
1c0023fc:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x1f>
1c002400:	00f6e763          	bltu	a3,a5,1c00240e <__udivdi3+0x8a>
1c002404:	0106f563          	bleu	a6,a3,1c00240e <__udivdi3+0x8a>
1c002408:	ffe70613          	addi	a2,a4,-2
1c00240c:	96be                	add	a3,a3,a5
1c00240e:	410686b3          	sub	a3,a3,a6
1c002412:	02a6f833          	remu	a6,a3,a0
1c002416:	02a6d6b3          	divu	a3,a3,a0
1c00241a:	df0828b3          	p.insert	a7,a6,15,16
1c00241e:	02d58733          	mul	a4,a1,a3
1c002422:	8536                	mv	a0,a3
1c002424:	00e8fb63          	bleu	a4,a7,1c00243a <__udivdi3+0xb6>
1c002428:	98be                	add	a7,a7,a5
1c00242a:	fff68513          	addi	a0,a3,-1
1c00242e:	00f8e663          	bltu	a7,a5,1c00243a <__udivdi3+0xb6>
1c002432:	00e8f463          	bleu	a4,a7,1c00243a <__udivdi3+0xb6>
1c002436:	ffe68513          	addi	a0,a3,-2
1c00243a:	01061793          	slli	a5,a2,0x10
1c00243e:	8fc9                	or	a5,a5,a0
1c002440:	4801                	li	a6,0
1c002442:	a06d                	j	1c0024ec <__udivdi3+0x168>
1c002444:	01000737          	lui	a4,0x1000
1c002448:	46c1                	li	a3,16
1c00244a:	f6e661e3          	bltu	a2,a4,1c0023ac <__udivdi3+0x28>
1c00244e:	46e1                	li	a3,24
1c002450:	bfb1                	j	1c0023ac <__udivdi3+0x28>
1c002452:	e601                	bnez	a2,1c00245a <__udivdi3+0xd6>
1c002454:	4685                	li	a3,1
1c002456:	02c6d7b3          	divu	a5,a3,a2
1c00245a:	66c1                	lui	a3,0x10
1c00245c:	08d7fb63          	bleu	a3,a5,1c0024f2 <__udivdi3+0x16e>
1c002460:	0ff00693          	li	a3,255
1c002464:	00f6f363          	bleu	a5,a3,1c00246a <__udivdi3+0xe6>
1c002468:	4721                	li	a4,8
1c00246a:	00e7d6b3          	srl	a3,a5,a4
1c00246e:	9336                	add	t1,t1,a3
1c002470:	00034683          	lbu	a3,0(t1)
1c002474:	02000613          	li	a2,32
1c002478:	96ba                	add	a3,a3,a4
1c00247a:	8e15                	sub	a2,a2,a3
1c00247c:	e251                	bnez	a2,1c002500 <__udivdi3+0x17c>
1c00247e:	40f58733          	sub	a4,a1,a5
1c002482:	4805                	li	a6,1
1c002484:	0107d513          	srli	a0,a5,0x10
1c002488:	1007d5b3          	p.exthz	a1,a5
1c00248c:	0108d693          	srli	a3,a7,0x10
1c002490:	02a77633          	remu	a2,a4,a0
1c002494:	02a75733          	divu	a4,a4,a0
1c002498:	0642                	slli	a2,a2,0x10
1c00249a:	8ed1                	or	a3,a3,a2
1c00249c:	02e58333          	mul	t1,a1,a4
1c0024a0:	863a                	mv	a2,a4
1c0024a2:	0066fc63          	bleu	t1,a3,1c0024ba <__udivdi3+0x136>
1c0024a6:	96be                	add	a3,a3,a5
1c0024a8:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c0024ac:	00f6e763          	bltu	a3,a5,1c0024ba <__udivdi3+0x136>
1c0024b0:	0066f563          	bleu	t1,a3,1c0024ba <__udivdi3+0x136>
1c0024b4:	ffe70613          	addi	a2,a4,-2
1c0024b8:	96be                	add	a3,a3,a5
1c0024ba:	406686b3          	sub	a3,a3,t1
1c0024be:	02a6f333          	remu	t1,a3,a0
1c0024c2:	02a6d6b3          	divu	a3,a3,a0
1c0024c6:	df0328b3          	p.insert	a7,t1,15,16
1c0024ca:	02d58733          	mul	a4,a1,a3
1c0024ce:	8536                	mv	a0,a3
1c0024d0:	00e8fb63          	bleu	a4,a7,1c0024e6 <__udivdi3+0x162>
1c0024d4:	98be                	add	a7,a7,a5
1c0024d6:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x1f>
1c0024da:	00f8e663          	bltu	a7,a5,1c0024e6 <__udivdi3+0x162>
1c0024de:	00e8f463          	bleu	a4,a7,1c0024e6 <__udivdi3+0x162>
1c0024e2:	ffe68513          	addi	a0,a3,-2
1c0024e6:	01061793          	slli	a5,a2,0x10
1c0024ea:	8fc9                	or	a5,a5,a0
1c0024ec:	853e                	mv	a0,a5
1c0024ee:	85c2                	mv	a1,a6
1c0024f0:	8082                	ret
1c0024f2:	010006b7          	lui	a3,0x1000
1c0024f6:	4741                	li	a4,16
1c0024f8:	f6d7e9e3          	bltu	a5,a3,1c00246a <__udivdi3+0xe6>
1c0024fc:	4761                	li	a4,24
1c0024fe:	b7b5                	j	1c00246a <__udivdi3+0xe6>
1c002500:	00c797b3          	sll	a5,a5,a2
1c002504:	00d5d333          	srl	t1,a1,a3
1c002508:	0107de13          	srli	t3,a5,0x10
1c00250c:	00c59733          	sll	a4,a1,a2
1c002510:	00c518b3          	sll	a7,a0,a2
1c002514:	00d555b3          	srl	a1,a0,a3
1c002518:	03c35533          	divu	a0,t1,t3
1c00251c:	8dd9                	or	a1,a1,a4
1c00251e:	1007d733          	p.exthz	a4,a5
1c002522:	0105d693          	srli	a3,a1,0x10
1c002526:	03c37633          	remu	a2,t1,t3
1c00252a:	882a                	mv	a6,a0
1c00252c:	02a70333          	mul	t1,a4,a0
1c002530:	0642                	slli	a2,a2,0x10
1c002532:	8ed1                	or	a3,a3,a2
1c002534:	0066fc63          	bleu	t1,a3,1c00254c <__udivdi3+0x1c8>
1c002538:	96be                	add	a3,a3,a5
1c00253a:	fff50813          	addi	a6,a0,-1
1c00253e:	00f6e763          	bltu	a3,a5,1c00254c <__udivdi3+0x1c8>
1c002542:	0066f563          	bleu	t1,a3,1c00254c <__udivdi3+0x1c8>
1c002546:	ffe50813          	addi	a6,a0,-2
1c00254a:	96be                	add	a3,a3,a5
1c00254c:	406686b3          	sub	a3,a3,t1
1c002550:	03c6f633          	remu	a2,a3,t3
1c002554:	03c6d6b3          	divu	a3,a3,t3
1c002558:	df0625b3          	p.insert	a1,a2,15,16
1c00255c:	02d70733          	mul	a4,a4,a3
1c002560:	8636                	mv	a2,a3
1c002562:	00e5fc63          	bleu	a4,a1,1c00257a <__udivdi3+0x1f6>
1c002566:	95be                	add	a1,a1,a5
1c002568:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c00256c:	00f5e763          	bltu	a1,a5,1c00257a <__udivdi3+0x1f6>
1c002570:	00e5f563          	bleu	a4,a1,1c00257a <__udivdi3+0x1f6>
1c002574:	ffe68613          	addi	a2,a3,-2
1c002578:	95be                	add	a1,a1,a5
1c00257a:	0842                	slli	a6,a6,0x10
1c00257c:	40e58733          	sub	a4,a1,a4
1c002580:	00c86833          	or	a6,a6,a2
1c002584:	b701                	j	1c002484 <__udivdi3+0x100>
1c002586:	12d5ea63          	bltu	a1,a3,1c0026ba <__udivdi3+0x336>
1c00258a:	67c1                	lui	a5,0x10
1c00258c:	02f6fd63          	bleu	a5,a3,1c0025c6 <__udivdi3+0x242>
1c002590:	0ff00793          	li	a5,255
1c002594:	00d7b8b3          	sltu	a7,a5,a3
1c002598:	088e                	slli	a7,a7,0x3
1c00259a:	1c00b737          	lui	a4,0x1c00b
1c00259e:	0116d7b3          	srl	a5,a3,a7
1c0025a2:	a3c70713          	addi	a4,a4,-1476 # 1c00aa3c <__clz_tab>
1c0025a6:	97ba                	add	a5,a5,a4
1c0025a8:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c0025ac:	02000813          	li	a6,32
1c0025b0:	97c6                	add	a5,a5,a7
1c0025b2:	40f80833          	sub	a6,a6,a5
1c0025b6:	00081f63          	bnez	a6,1c0025d4 <__udivdi3+0x250>
1c0025ba:	4785                	li	a5,1
1c0025bc:	f2b6e8e3          	bltu	a3,a1,1c0024ec <__udivdi3+0x168>
1c0025c0:	04a637b3          	p.sletu	a5,a2,a0
1c0025c4:	b725                	j	1c0024ec <__udivdi3+0x168>
1c0025c6:	010007b7          	lui	a5,0x1000
1c0025ca:	48c1                	li	a7,16
1c0025cc:	fcf6e7e3          	bltu	a3,a5,1c00259a <__udivdi3+0x216>
1c0025d0:	48e1                	li	a7,24
1c0025d2:	b7e1                	j	1c00259a <__udivdi3+0x216>
1c0025d4:	00f658b3          	srl	a7,a2,a5
1c0025d8:	010696b3          	sll	a3,a3,a6
1c0025dc:	00d8e6b3          	or	a3,a7,a3
1c0025e0:	00f5d333          	srl	t1,a1,a5
1c0025e4:	0106de13          	srli	t3,a3,0x10
1c0025e8:	00f55733          	srl	a4,a0,a5
1c0025ec:	03c377b3          	remu	a5,t1,t3
1c0025f0:	1006d8b3          	p.exthz	a7,a3
1c0025f4:	010595b3          	sll	a1,a1,a6
1c0025f8:	8f4d                	or	a4,a4,a1
1c0025fa:	01075593          	srli	a1,a4,0x10
1c0025fe:	01061633          	sll	a2,a2,a6
1c002602:	03c35333          	divu	t1,t1,t3
1c002606:	07c2                	slli	a5,a5,0x10
1c002608:	8ddd                	or	a1,a1,a5
1c00260a:	02688eb3          	mul	t4,a7,t1
1c00260e:	879a                	mv	a5,t1
1c002610:	01d5fc63          	bleu	t4,a1,1c002628 <__udivdi3+0x2a4>
1c002614:	95b6                	add	a1,a1,a3
1c002616:	fff30793          	addi	a5,t1,-1
1c00261a:	00d5e763          	bltu	a1,a3,1c002628 <__udivdi3+0x2a4>
1c00261e:	01d5f563          	bleu	t4,a1,1c002628 <__udivdi3+0x2a4>
1c002622:	ffe30793          	addi	a5,t1,-2
1c002626:	95b6                	add	a1,a1,a3
1c002628:	41d585b3          	sub	a1,a1,t4
1c00262c:	03c5f333          	remu	t1,a1,t3
1c002630:	03c5d5b3          	divu	a1,a1,t3
1c002634:	df032733          	p.insert	a4,t1,15,16
1c002638:	02b888b3          	mul	a7,a7,a1
1c00263c:	832e                	mv	t1,a1
1c00263e:	01177c63          	bleu	a7,a4,1c002656 <__udivdi3+0x2d2>
1c002642:	9736                	add	a4,a4,a3
1c002644:	fff58313          	addi	t1,a1,-1
1c002648:	00d76763          	bltu	a4,a3,1c002656 <__udivdi3+0x2d2>
1c00264c:	01177563          	bleu	a7,a4,1c002656 <__udivdi3+0x2d2>
1c002650:	ffe58313          	addi	t1,a1,-2
1c002654:	9736                	add	a4,a4,a3
1c002656:	07c2                	slli	a5,a5,0x10
1c002658:	6e41                	lui	t3,0x10
1c00265a:	0067e7b3          	or	a5,a5,t1
1c00265e:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x1f>
1c002662:	00b7f6b3          	and	a3,a5,a1
1c002666:	41170733          	sub	a4,a4,a7
1c00266a:	8df1                	and	a1,a1,a2
1c00266c:	0107d893          	srli	a7,a5,0x10
1c002670:	02b68333          	mul	t1,a3,a1
1c002674:	8241                	srli	a2,a2,0x10
1c002676:	02b885b3          	mul	a1,a7,a1
1c00267a:	8eae                	mv	t4,a1
1c00267c:	42c68eb3          	p.mac	t4,a3,a2
1c002680:	01035693          	srli	a3,t1,0x10
1c002684:	96f6                	add	a3,a3,t4
1c002686:	02c888b3          	mul	a7,a7,a2
1c00268a:	00b6f363          	bleu	a1,a3,1c002690 <__udivdi3+0x30c>
1c00268e:	98f2                	add	a7,a7,t3
1c002690:	0106d613          	srli	a2,a3,0x10
1c002694:	98b2                	add	a7,a7,a2
1c002696:	03176063          	bltu	a4,a7,1c0026b6 <__udivdi3+0x332>
1c00269a:	db1713e3          	bne	a4,a7,1c002440 <__udivdi3+0xbc>
1c00269e:	6741                	lui	a4,0x10
1c0026a0:	177d                	addi	a4,a4,-1
1c0026a2:	8ef9                	and	a3,a3,a4
1c0026a4:	06c2                	slli	a3,a3,0x10
1c0026a6:	00e37333          	and	t1,t1,a4
1c0026aa:	01051533          	sll	a0,a0,a6
1c0026ae:	969a                	add	a3,a3,t1
1c0026b0:	4801                	li	a6,0
1c0026b2:	e2d57de3          	bleu	a3,a0,1c0024ec <__udivdi3+0x168>
1c0026b6:	17fd                	addi	a5,a5,-1
1c0026b8:	b361                	j	1c002440 <__udivdi3+0xbc>
1c0026ba:	4801                	li	a6,0
1c0026bc:	4781                	li	a5,0
1c0026be:	b53d                	j	1c0024ec <__udivdi3+0x168>

1c0026c0 <__umoddi3>:
1c0026c0:	88b2                	mv	a7,a2
1c0026c2:	8736                	mv	a4,a3
1c0026c4:	87aa                	mv	a5,a0
1c0026c6:	882e                	mv	a6,a1
1c0026c8:	1a069963          	bnez	a3,1c00287a <__umoddi3+0x1ba>
1c0026cc:	1c00b6b7          	lui	a3,0x1c00b
1c0026d0:	a3c68693          	addi	a3,a3,-1476 # 1c00aa3c <__clz_tab>
1c0026d4:	0ac5f463          	bleu	a2,a1,1c00277c <__umoddi3+0xbc>
1c0026d8:	6341                	lui	t1,0x10
1c0026da:	08667a63          	bleu	t1,a2,1c00276e <__umoddi3+0xae>
1c0026de:	0ff00313          	li	t1,255
1c0026e2:	00c37363          	bleu	a2,t1,1c0026e8 <__umoddi3+0x28>
1c0026e6:	4721                	li	a4,8
1c0026e8:	00e65333          	srl	t1,a2,a4
1c0026ec:	969a                	add	a3,a3,t1
1c0026ee:	0006c683          	lbu	a3,0(a3)
1c0026f2:	02000313          	li	t1,32
1c0026f6:	9736                	add	a4,a4,a3
1c0026f8:	40e30333          	sub	t1,t1,a4
1c0026fc:	00030c63          	beqz	t1,1c002714 <__umoddi3+0x54>
1c002700:	006595b3          	sll	a1,a1,t1
1c002704:	00e55733          	srl	a4,a0,a4
1c002708:	006618b3          	sll	a7,a2,t1
1c00270c:	00b76833          	or	a6,a4,a1
1c002710:	006517b3          	sll	a5,a0,t1
1c002714:	0108d613          	srli	a2,a7,0x10
1c002718:	02c87733          	remu	a4,a6,a2
1c00271c:	1008d533          	p.exthz	a0,a7
1c002720:	0107d693          	srli	a3,a5,0x10
1c002724:	02c85833          	divu	a6,a6,a2
1c002728:	0742                	slli	a4,a4,0x10
1c00272a:	8ed9                	or	a3,a3,a4
1c00272c:	03050833          	mul	a6,a0,a6
1c002730:	0106f863          	bleu	a6,a3,1c002740 <__umoddi3+0x80>
1c002734:	96c6                	add	a3,a3,a7
1c002736:	0116e563          	bltu	a3,a7,1c002740 <__umoddi3+0x80>
1c00273a:	0106f363          	bleu	a6,a3,1c002740 <__umoddi3+0x80>
1c00273e:	96c6                	add	a3,a3,a7
1c002740:	410686b3          	sub	a3,a3,a6
1c002744:	02c6f733          	remu	a4,a3,a2
1c002748:	02c6d6b3          	divu	a3,a3,a2
1c00274c:	df0727b3          	p.insert	a5,a4,15,16
1c002750:	02d506b3          	mul	a3,a0,a3
1c002754:	00d7f863          	bleu	a3,a5,1c002764 <__umoddi3+0xa4>
1c002758:	97c6                	add	a5,a5,a7
1c00275a:	0117e563          	bltu	a5,a7,1c002764 <__umoddi3+0xa4>
1c00275e:	00d7f363          	bleu	a3,a5,1c002764 <__umoddi3+0xa4>
1c002762:	97c6                	add	a5,a5,a7
1c002764:	8f95                	sub	a5,a5,a3
1c002766:	0067d533          	srl	a0,a5,t1
1c00276a:	4581                	li	a1,0
1c00276c:	8082                	ret
1c00276e:	01000337          	lui	t1,0x1000
1c002772:	4741                	li	a4,16
1c002774:	f6666ae3          	bltu	a2,t1,1c0026e8 <__umoddi3+0x28>
1c002778:	4761                	li	a4,24
1c00277a:	b7bd                	j	1c0026e8 <__umoddi3+0x28>
1c00277c:	e601                	bnez	a2,1c002784 <__umoddi3+0xc4>
1c00277e:	4605                	li	a2,1
1c002780:	031658b3          	divu	a7,a2,a7
1c002784:	6641                	lui	a2,0x10
1c002786:	06c8ff63          	bleu	a2,a7,1c002804 <__umoddi3+0x144>
1c00278a:	0ff00613          	li	a2,255
1c00278e:	01167363          	bleu	a7,a2,1c002794 <__umoddi3+0xd4>
1c002792:	4721                	li	a4,8
1c002794:	00e8d633          	srl	a2,a7,a4
1c002798:	96b2                	add	a3,a3,a2
1c00279a:	0006c603          	lbu	a2,0(a3)
1c00279e:	02000313          	li	t1,32
1c0027a2:	963a                	add	a2,a2,a4
1c0027a4:	40c30333          	sub	t1,t1,a2
1c0027a8:	06031563          	bnez	t1,1c002812 <__umoddi3+0x152>
1c0027ac:	411585b3          	sub	a1,a1,a7
1c0027b0:	0108d713          	srli	a4,a7,0x10
1c0027b4:	1008d533          	p.exthz	a0,a7
1c0027b8:	0107d613          	srli	a2,a5,0x10
1c0027bc:	02e5f6b3          	remu	a3,a1,a4
1c0027c0:	02e5d5b3          	divu	a1,a1,a4
1c0027c4:	06c2                	slli	a3,a3,0x10
1c0027c6:	8ed1                	or	a3,a3,a2
1c0027c8:	02b505b3          	mul	a1,a0,a1
1c0027cc:	00b6f863          	bleu	a1,a3,1c0027dc <__umoddi3+0x11c>
1c0027d0:	96c6                	add	a3,a3,a7
1c0027d2:	0116e563          	bltu	a3,a7,1c0027dc <__umoddi3+0x11c>
1c0027d6:	00b6f363          	bleu	a1,a3,1c0027dc <__umoddi3+0x11c>
1c0027da:	96c6                	add	a3,a3,a7
1c0027dc:	40b685b3          	sub	a1,a3,a1
1c0027e0:	02e5f6b3          	remu	a3,a1,a4
1c0027e4:	02e5d5b3          	divu	a1,a1,a4
1c0027e8:	df06a7b3          	p.insert	a5,a3,15,16
1c0027ec:	02b505b3          	mul	a1,a0,a1
1c0027f0:	00b7f863          	bleu	a1,a5,1c002800 <__umoddi3+0x140>
1c0027f4:	97c6                	add	a5,a5,a7
1c0027f6:	0117e563          	bltu	a5,a7,1c002800 <__umoddi3+0x140>
1c0027fa:	00b7f363          	bleu	a1,a5,1c002800 <__umoddi3+0x140>
1c0027fe:	97c6                	add	a5,a5,a7
1c002800:	8f8d                	sub	a5,a5,a1
1c002802:	b795                	j	1c002766 <__umoddi3+0xa6>
1c002804:	01000637          	lui	a2,0x1000
1c002808:	4741                	li	a4,16
1c00280a:	f8c8e5e3          	bltu	a7,a2,1c002794 <__umoddi3+0xd4>
1c00280e:	4761                	li	a4,24
1c002810:	b751                	j	1c002794 <__umoddi3+0xd4>
1c002812:	006898b3          	sll	a7,a7,t1
1c002816:	00c5d733          	srl	a4,a1,a2
1c00281a:	006517b3          	sll	a5,a0,t1
1c00281e:	00c55633          	srl	a2,a0,a2
1c002822:	006595b3          	sll	a1,a1,t1
1c002826:	0108d513          	srli	a0,a7,0x10
1c00282a:	8dd1                	or	a1,a1,a2
1c00282c:	02a77633          	remu	a2,a4,a0
1c002830:	1008d833          	p.exthz	a6,a7
1c002834:	0105d693          	srli	a3,a1,0x10
1c002838:	02a75733          	divu	a4,a4,a0
1c00283c:	0642                	slli	a2,a2,0x10
1c00283e:	8ed1                	or	a3,a3,a2
1c002840:	02e80733          	mul	a4,a6,a4
1c002844:	00e6f863          	bleu	a4,a3,1c002854 <__umoddi3+0x194>
1c002848:	96c6                	add	a3,a3,a7
1c00284a:	0116e563          	bltu	a3,a7,1c002854 <__umoddi3+0x194>
1c00284e:	00e6f363          	bleu	a4,a3,1c002854 <__umoddi3+0x194>
1c002852:	96c6                	add	a3,a3,a7
1c002854:	8e99                	sub	a3,a3,a4
1c002856:	02a6f733          	remu	a4,a3,a0
1c00285a:	02a6d6b3          	divu	a3,a3,a0
1c00285e:	df0725b3          	p.insert	a1,a4,15,16
1c002862:	02d806b3          	mul	a3,a6,a3
1c002866:	00d5f863          	bleu	a3,a1,1c002876 <__umoddi3+0x1b6>
1c00286a:	95c6                	add	a1,a1,a7
1c00286c:	0115e563          	bltu	a1,a7,1c002876 <__umoddi3+0x1b6>
1c002870:	00d5f363          	bleu	a3,a1,1c002876 <__umoddi3+0x1b6>
1c002874:	95c6                	add	a1,a1,a7
1c002876:	8d95                	sub	a1,a1,a3
1c002878:	bf25                	j	1c0027b0 <__umoddi3+0xf0>
1c00287a:	eed5e9e3          	bltu	a1,a3,1c00276c <__umoddi3+0xac>
1c00287e:	6741                	lui	a4,0x10
1c002880:	04e6f563          	bleu	a4,a3,1c0028ca <__umoddi3+0x20a>
1c002884:	0ff00e93          	li	t4,255
1c002888:	00deb733          	sltu	a4,t4,a3
1c00288c:	070e                	slli	a4,a4,0x3
1c00288e:	1c00b337          	lui	t1,0x1c00b
1c002892:	00e6d8b3          	srl	a7,a3,a4
1c002896:	a3c30313          	addi	t1,t1,-1476 # 1c00aa3c <__clz_tab>
1c00289a:	989a                	add	a7,a7,t1
1c00289c:	0008ce83          	lbu	t4,0(a7)
1c0028a0:	02000e13          	li	t3,32
1c0028a4:	9eba                	add	t4,t4,a4
1c0028a6:	41de0e33          	sub	t3,t3,t4
1c0028aa:	020e1763          	bnez	t3,1c0028d8 <__umoddi3+0x218>
1c0028ae:	00b6e463          	bltu	a3,a1,1c0028b6 <__umoddi3+0x1f6>
1c0028b2:	00c56963          	bltu	a0,a2,1c0028c4 <__umoddi3+0x204>
1c0028b6:	40c507b3          	sub	a5,a0,a2
1c0028ba:	8d95                	sub	a1,a1,a3
1c0028bc:	00f53533          	sltu	a0,a0,a5
1c0028c0:	40a58833          	sub	a6,a1,a0
1c0028c4:	853e                	mv	a0,a5
1c0028c6:	85c2                	mv	a1,a6
1c0028c8:	b555                	j	1c00276c <__umoddi3+0xac>
1c0028ca:	010008b7          	lui	a7,0x1000
1c0028ce:	4741                	li	a4,16
1c0028d0:	fb16efe3          	bltu	a3,a7,1c00288e <__umoddi3+0x1ce>
1c0028d4:	4761                	li	a4,24
1c0028d6:	bf65                	j	1c00288e <__umoddi3+0x1ce>
1c0028d8:	01d65733          	srl	a4,a2,t4
1c0028dc:	01c696b3          	sll	a3,a3,t3
1c0028e0:	8ed9                	or	a3,a3,a4
1c0028e2:	01d5d7b3          	srl	a5,a1,t4
1c0028e6:	0106d813          	srli	a6,a3,0x10
1c0028ea:	0307f333          	remu	t1,a5,a6
1c0028ee:	1006d733          	p.exthz	a4,a3
1c0028f2:	01d558b3          	srl	a7,a0,t4
1c0028f6:	01c595b3          	sll	a1,a1,t3
1c0028fa:	00b8e5b3          	or	a1,a7,a1
1c0028fe:	0105d893          	srli	a7,a1,0x10
1c002902:	01c61633          	sll	a2,a2,t3
1c002906:	01c51533          	sll	a0,a0,t3
1c00290a:	0307d7b3          	divu	a5,a5,a6
1c00290e:	0342                	slli	t1,t1,0x10
1c002910:	011368b3          	or	a7,t1,a7
1c002914:	02f70f33          	mul	t5,a4,a5
1c002918:	833e                	mv	t1,a5
1c00291a:	01e8fc63          	bleu	t5,a7,1c002932 <__umoddi3+0x272>
1c00291e:	98b6                	add	a7,a7,a3
1c002920:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c002924:	00d8e763          	bltu	a7,a3,1c002932 <__umoddi3+0x272>
1c002928:	01e8f563          	bleu	t5,a7,1c002932 <__umoddi3+0x272>
1c00292c:	ffe78313          	addi	t1,a5,-2
1c002930:	98b6                	add	a7,a7,a3
1c002932:	41e888b3          	sub	a7,a7,t5
1c002936:	0308f7b3          	remu	a5,a7,a6
1c00293a:	0308d8b3          	divu	a7,a7,a6
1c00293e:	df07a5b3          	p.insert	a1,a5,15,16
1c002942:	03170733          	mul	a4,a4,a7
1c002946:	87c6                	mv	a5,a7
1c002948:	00e5fc63          	bleu	a4,a1,1c002960 <__umoddi3+0x2a0>
1c00294c:	95b6                	add	a1,a1,a3
1c00294e:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c002952:	00d5e763          	bltu	a1,a3,1c002960 <__umoddi3+0x2a0>
1c002956:	00e5f563          	bleu	a4,a1,1c002960 <__umoddi3+0x2a0>
1c00295a:	ffe88793          	addi	a5,a7,-2
1c00295e:	95b6                	add	a1,a1,a3
1c002960:	0342                	slli	t1,t1,0x10
1c002962:	6f41                	lui	t5,0x10
1c002964:	00f36333          	or	t1,t1,a5
1c002968:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x1f>
1c00296c:	00f37833          	and	a6,t1,a5
1c002970:	01035313          	srli	t1,t1,0x10
1c002974:	8ff1                	and	a5,a5,a2
1c002976:	02f808b3          	mul	a7,a6,a5
1c00297a:	8d99                	sub	a1,a1,a4
1c00297c:	01065713          	srli	a4,a2,0x10
1c002980:	02f307b3          	mul	a5,t1,a5
1c002984:	8fbe                	mv	t6,a5
1c002986:	42e80fb3          	p.mac	t6,a6,a4
1c00298a:	0108d813          	srli	a6,a7,0x10
1c00298e:	987e                	add	a6,a6,t6
1c002990:	02e30333          	mul	t1,t1,a4
1c002994:	00f87363          	bleu	a5,a6,1c00299a <__umoddi3+0x2da>
1c002998:	937a                	add	t1,t1,t5
1c00299a:	01085713          	srli	a4,a6,0x10
1c00299e:	933a                	add	t1,t1,a4
1c0029a0:	6741                	lui	a4,0x10
1c0029a2:	177d                	addi	a4,a4,-1
1c0029a4:	00e87833          	and	a6,a6,a4
1c0029a8:	0842                	slli	a6,a6,0x10
1c0029aa:	00e8f733          	and	a4,a7,a4
1c0029ae:	9742                	add	a4,a4,a6
1c0029b0:	0065e663          	bltu	a1,t1,1c0029bc <__umoddi3+0x2fc>
1c0029b4:	00659d63          	bne	a1,t1,1c0029ce <__umoddi3+0x30e>
1c0029b8:	00e57b63          	bleu	a4,a0,1c0029ce <__umoddi3+0x30e>
1c0029bc:	40c70633          	sub	a2,a4,a2
1c0029c0:	00c73733          	sltu	a4,a4,a2
1c0029c4:	40d30333          	sub	t1,t1,a3
1c0029c8:	40e30333          	sub	t1,t1,a4
1c0029cc:	8732                	mv	a4,a2
1c0029ce:	40e50733          	sub	a4,a0,a4
1c0029d2:	00e53533          	sltu	a0,a0,a4
1c0029d6:	406585b3          	sub	a1,a1,t1
1c0029da:	8d89                	sub	a1,a1,a0
1c0029dc:	01d597b3          	sll	a5,a1,t4
1c0029e0:	01c75733          	srl	a4,a4,t3
1c0029e4:	00e7e533          	or	a0,a5,a4
1c0029e8:	01c5d5b3          	srl	a1,a1,t3
1c0029ec:	b341                	j	1c00276c <__umoddi3+0xac>

1c0029ee <streamer_handler>:



static void streamer_handler(void *arg)
{
  *(int *)arg = 1;
1c0029ee:	4805                	li	a6,1
  if (stream1_done) // && stream2_done)
1c0029f0:	1c00c7b7          	lui	a5,0x1c00c
  *(int *)arg = 1;
1c0029f4:	01052023          	sw	a6,0(a0)
  if (stream1_done) // && stream2_done)
1c0029f8:	3547a783          	lw	a5,852(a5) # 1c00c354 <stream1_done>
1c0029fc:	c7ad                	beqz	a5,1c002a66 <streamer_handler+0x78>
{
1c0029fe:	1141                	addi	sp,sp,-16
1c002a00:	c422                	sw	s0,8(sp)
}

static inline void pi_camera_capture_async(struct pi_device *device, void *buffer, uint32_t bufferlen, pi_task_t *task)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  api->capture_async(device, buffer, bufferlen, task);
1c002a02:	1c00c437          	lui	s0,0x1c00c
1c002a06:	c226                	sw	s1,4(sp)
1c002a08:	0b040493          	addi	s1,s0,176 # 1c00c0b0 <camera>
1c002a0c:	4098                	lw	a4,0(s1)
}


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
1c002a0e:	1c00c6b7          	lui	a3,0x1c00c
1c002a12:	c606                	sw	ra,12(sp)
1c002a14:	14868793          	addi	a5,a3,328 # 1c00c148 <task1>
  task->done = 0;
1c002a18:	00078a23          	sb	zero,20(a5)
  {
    pi_camera_capture_async(&camera, imgBuff0, CAM_WIDTH*CAM_HEIGHT, pi_task_callback(&task1, cam_handler, NULL));
1c002a1c:	1c00c637          	lui	a2,0x1c00c
1c002a20:	00c72883          	lw	a7,12(a4) # 1000c <__L1Cl+0xc>
1c002a24:	34862583          	lw	a1,840(a2) # 1c00c348 <imgBuff0>
  task->arg[0] = (uint32_t)callback;
1c002a28:	1c003737          	lui	a4,0x1c003
1c002a2c:	ac670713          	addi	a4,a4,-1338 # 1c002ac6 <cam_handler>
1c002a30:	6629                	lui	a2,0xa
1c002a32:	0b040513          	addi	a0,s0,176
1c002a36:	c4060613          	addi	a2,a2,-960 # 9c40 <__rt_stack_size+0x9440>
  task->id = PI_TASK_CALLBACK_ID;
1c002a3a:	0007ac23          	sw	zero,24(a5)
  task->arg[0] = (uint32_t)callback;
1c002a3e:	c3d8                	sw	a4,4(a5)
  task->arg[1] = (uint32_t)arg;
1c002a40:	0007a423          	sw	zero,8(a5)
  task->implem.keep = 1;
1c002a44:	0307a423          	sw	a6,40(a5)
1c002a48:	14868693          	addi	a3,a3,328
1c002a4c:	9882                	jalr	a7
  return api->control(device, cmd, arg);
1c002a4e:	409c                	lw	a5,0(s1)
1c002a50:	0b040513          	addi	a0,s0,176
    pi_camera_control(&camera, PI_CAMERA_CMD_START, 0);
  }
}
1c002a54:	4422                	lw	s0,8(sp)
1c002a56:	40b2                	lw	ra,12(sp)
1c002a58:	4492                	lw	s1,4(sp)
1c002a5a:	0087a303          	lw	t1,8(a5)
1c002a5e:	4601                	li	a2,0
1c002a60:	4589                	li	a1,2
1c002a62:	0141                	addi	sp,sp,16
1c002a64:	8302                	jr	t1
1c002a66:	8082                	ret

1c002a68 <led_handle>:
}
static pi_task_t led_task;
static int led_val = 0;
static struct pi_device gpio_device;
static void led_handle(void *arg)
{
1c002a68:	1141                	addi	sp,sp,-16
1c002a6a:	c422                	sw	s0,8(sp)
  pi_gpio_pin_write(&gpio_device, 2, led_val);
1c002a6c:	1c00c437          	lui	s0,0x1c00c
1c002a70:	35040413          	addi	s0,s0,848 # 1c00c350 <led_val>
1c002a74:	4010                	lw	a2,0(s0)
1c002a76:	1c00c537          	lui	a0,0x1c00c
1c002a7a:	4589                	li	a1,2
1c002a7c:	0bc50513          	addi	a0,a0,188 # 1c00c0bc <gpio_device>
{
1c002a80:	c606                	sw	ra,12(sp)
  pi_gpio_pin_write(&gpio_device, 2, led_val);
1c002a82:	43c060ef          	jal	ra,1c008ebe <pi_gpio_pin_write>
  led_val ^= 1;
1c002a86:	4018                	lw	a4,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c002a88:	1c00c537          	lui	a0,0x1c00c
1c002a8c:	0c850793          	addi	a5,a0,200 # 1c00c0c8 <led_task>
1c002a90:	00174713          	xori	a4,a4,1
1c002a94:	c018                	sw	a4,0(s0)
1c002a96:	00078a23          	sb	zero,20(a5)
  task->arg[0] = (uint32_t)callback;
1c002a9a:	1c003737          	lui	a4,0x1c003
1c002a9e:	a6870713          	addi	a4,a4,-1432 # 1c002a68 <led_handle>
  pi_task_push_delayed_us(pi_task_callback(&led_task, led_handle, NULL), 500000);
}
1c002aa2:	4422                	lw	s0,8(sp)
1c002aa4:	c3d8                	sw	a4,4(a5)
1c002aa6:	40b2                	lw	ra,12(sp)
  task->implem.keep = 1;
1c002aa8:	4705                	li	a4,1
  pi_task_push_delayed_us(pi_task_callback(&led_task, led_handle, NULL), 500000);
1c002aaa:	0007a5b7          	lui	a1,0x7a
  task->id = PI_TASK_CALLBACK_ID;
1c002aae:	0007ac23          	sw	zero,24(a5)
  task->arg[1] = (uint32_t)arg;
1c002ab2:	0007a423          	sw	zero,8(a5)
  task->implem.keep = 1;
1c002ab6:	d798                	sw	a4,40(a5)
1c002ab8:	12058593          	addi	a1,a1,288 # 7a120 <__L1Cl+0x6a120>
1c002abc:	0c850513          	addi	a0,a0,200
}
1c002ac0:	0141                	addi	sp,sp,16
  pi_task_push_delayed_us(pi_task_callback(&led_task, led_handle, NULL), 500000);
1c002ac2:	3cd0306f          	j	1c00668e <pi_task_push_delayed_us>

1c002ac6 <cam_handler>:
1c002ac6:	1c00c537          	lui	a0,0x1c00c
1c002aca:	0b052783          	lw	a5,176(a0) # 1c00c0b0 <camera>
{
1c002ace:	7139                	addi	sp,sp,-64
1c002ad0:	de06                	sw	ra,60(sp)
1c002ad2:	479c                	lw	a5,8(a5)
1c002ad4:	dc22                	sw	s0,56(sp)
1c002ad6:	4601                	li	a2,0
1c002ad8:	458d                	li	a1,3
1c002ada:	0b050513          	addi	a0,a0,176
1c002ade:	9782                	jalr	a5
  stream1_done = 0;
1c002ae0:	1c00c437          	lui	s0,0x1c00c
  printf("Calling cluster.\n");
1c002ae4:	1c00b537          	lui	a0,0x1c00b
  stream1_done = 0;
1c002ae8:	35440413          	addi	s0,s0,852 # 1c00c354 <stream1_done>
  printf("Calling cluster.\n");
1c002aec:	b3c50513          	addi	a0,a0,-1220 # 1c00ab3c <__clz_tab+0x100>
  stream1_done = 0;
1c002af0:	00042023          	sw	zero,0(s0)
  printf("Calling cluster.\n");
1c002af4:	4b9060ef          	jal	ra,1c0097ac <puts>
  pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c002af8:	0068                	addi	a0,sp,12
1c002afa:	082c                	addi	a1,sp,24
1c002afc:	472030ef          	jal	ra,1c005f6e <pi_open_from_conf>
  if (pi_cluster_open(&cluster_dev))
1c002b00:	0068                	addi	a0,sp,12
1c002b02:	16d040ef          	jal	ra,1c00746e <pi_cluster_open>
1c002b06:	e921                	bnez	a0,1c002b56 <cam_handler+0x90>
  pi_cluster_send_task_to_cl(&cluster_dev, task);
1c002b08:	1c00b7b7          	lui	a5,0x1c00b
1c002b0c:	5747a583          	lw	a1,1396(a5) # 1c00b574 <task>
1c002b10:	0068                	addi	a0,sp,12
1c002b12:	535040ef          	jal	ra,1c007846 <pi_cluster_send_task_to_cl>
  frame_streamer_send_async(streamer1, &buffer_inv, pi_task_callback(&task1, streamer_handler, (void *)&stream1_done));
1c002b16:	1c00c7b7          	lui	a5,0x1c00c
1c002b1a:	3587a503          	lw	a0,856(a5) # 1c00c358 <streamer1>
  task->id = PI_TASK_CALLBACK_ID;
1c002b1e:	1c00c637          	lui	a2,0x1c00c
  task->arg[0] = (uint32_t)callback;
1c002b22:	1c003737          	lui	a4,0x1c003
  task->id = PI_TASK_CALLBACK_ID;
1c002b26:	14860793          	addi	a5,a2,328 # 1c00c148 <task1>
  task->arg[0] = (uint32_t)callback;
1c002b2a:	9ee70713          	addi	a4,a4,-1554 # 1c0029ee <streamer_handler>
1c002b2e:	1c00c5b7          	lui	a1,0x1c00c
1c002b32:	c3d8                	sw	a4,4(a5)
1c002b34:	14860613          	addi	a2,a2,328
  task->implem.keep = 1;
1c002b38:	4705                	li	a4,1
1c002b3a:	09058593          	addi	a1,a1,144 # 1c00c090 <_bss_start>
1c002b3e:	00078a23          	sb	zero,20(a5)
  task->arg[1] = (uint32_t)arg;
1c002b42:	c780                	sw	s0,8(a5)
  task->id = PI_TASK_CALLBACK_ID;
1c002b44:	0007ac23          	sw	zero,24(a5)
  task->implem.keep = 1;
1c002b48:	d798                	sw	a4,40(a5)
1c002b4a:	f22fd0ef          	jal	ra,1c00026c <frame_streamer_send_async>
}
1c002b4e:	50f2                	lw	ra,60(sp)
1c002b50:	5462                	lw	s0,56(sp)
1c002b52:	6121                	addi	sp,sp,64
1c002b54:	8082                	ret
      printf("Cluster open failed !\n");
1c002b56:	1c00b537          	lui	a0,0x1c00b
1c002b5a:	b5050513          	addi	a0,a0,-1200 # 1c00ab50 <__clz_tab+0x114>
1c002b5e:	44f060ef          	jal	ra,1c0097ac <puts>
  return -1;
}

static inline void pmsis_exit(int err)
{
  exit(err);
1c002b62:	557d                	li	a0,-1
1c002b64:	4b7060ef          	jal	ra,1c00981a <exit>

1c002b68 <main_task>:

int main_task(void) {

  printf("Entering main controller...\n");
1c002b68:	1c00b537          	lui	a0,0x1c00b
int main_task(void) {
1c002b6c:	715d                	addi	sp,sp,-80
  printf("Entering main controller...\n");
1c002b6e:	b9450513          	addi	a0,a0,-1132 # 1c00ab94 <__clz_tab+0x158>
int main_task(void) {
1c002b72:	c686                	sw	ra,76(sp)
1c002b74:	c4a2                	sw	s0,72(sp)
1c002b76:	c2a6                	sw	s1,68(sp)
1c002b78:	de4e                	sw	s3,60(sp)
1c002b7a:	c0ca                	sw	s2,64(sp)
1c002b7c:	dc52                	sw	s4,56(sp)
  printf("Entering main controller...\n");
1c002b7e:	42f060ef          	jal	ra,1c0097ac <puts>
    return rt_freq_set_and_get(__pi_freq_get_domain(domain), freq, NULL);
1c002b82:	08f0d5b7          	lui	a1,0x8f0d
1c002b86:	4601                	li	a2,0
1c002b88:	18058593          	addi	a1,a1,384 # 8f0d180 <__L2+0x8e8d180>
1c002b8c:	4501                	li	a0,0
1c002b8e:	216040ef          	jal	ra,1c006da4 <rt_freq_set_and_get>

  pi_freq_set(PI_FREQ_DOMAIN_FC, 150000000);

  pi_gpio_pin_configure(&gpio_device, 2, PI_GPIO_OUTPUT);
1c002b92:	1c00c537          	lui	a0,0x1c00c
1c002b96:	4611                	li	a2,4
1c002b98:	4589                	li	a1,2
1c002b9a:	0bc50513          	addi	a0,a0,188 # 1c00c0bc <gpio_device>
1c002b9e:	464060ef          	jal	ra,1c009002 <pi_gpio_pin_configure>
  task->id = PI_TASK_CALLBACK_ID;
1c002ba2:	1c00c537          	lui	a0,0x1c00c
1c002ba6:	0c850793          	addi	a5,a0,200 # 1c00c0c8 <led_task>

  pi_task_push_delayed_us(pi_task_callback(&led_task, led_handle, NULL), 500000);
1c002baa:	0007a5b7          	lui	a1,0x7a
  task->arg[0] = (uint32_t)callback;
1c002bae:	1c003737          	lui	a4,0x1c003
1c002bb2:	a6870713          	addi	a4,a4,-1432 # 1c002a68 <led_handle>
1c002bb6:	12058593          	addi	a1,a1,288 # 7a120 <__L1Cl+0x6a120>
1c002bba:	0c850513          	addi	a0,a0,200
1c002bbe:	00078a23          	sb	zero,20(a5)
  task->implem.keep = 1;
1c002bc2:	4485                	li	s1,1
  task->id = PI_TASK_CALLBACK_ID;
1c002bc4:	0007ac23          	sw	zero,24(a5)
  task->arg[0] = (uint32_t)callback;
1c002bc8:	c3d8                	sw	a4,4(a5)
  task->arg[1] = (uint32_t)arg;
1c002bca:	0007a423          	sw	zero,8(a5)
  task->implem.keep = 1;
1c002bce:	d784                	sw	s1,40(a5)

  imgBuff0 = (unsigned char *)pmsis_l2_malloc((CAM_WIDTH*CAM_HEIGHT)*sizeof(unsigned char));
1c002bd0:	6429                	lui	s0,0xa
  pi_task_push_delayed_us(pi_task_callback(&led_task, led_handle, NULL), 500000);
1c002bd2:	2bd030ef          	jal	ra,1c00668e <pi_task_push_delayed_us>
  imgBuff0 = (unsigned char *)pmsis_l2_malloc((CAM_WIDTH*CAM_HEIGHT)*sizeof(unsigned char));
1c002bd6:	c4040513          	addi	a0,s0,-960 # 9c40 <__rt_stack_size+0x9440>
1c002bda:	1c00c9b7          	lui	s3,0x1c00c
1c002bde:	573030ef          	jal	ra,1c006950 <pi_l2_malloc>
1c002be2:	34898993          	addi	s3,s3,840 # 1c00c348 <imgBuff0>
1c002be6:	00a9a023          	sw	a0,0(s3)
  if (imgBuff0 == NULL) {
1c002bea:	28050963          	beqz	a0,1c002e7c <main_task+0x314>
      printf("Failed to allocate Memory for Image \n");
      return 1;
  }
  printf("Allocated Memory for Image\n");
1c002bee:	1c00b537          	lui	a0,0x1c00b
1c002bf2:	bd850513          	addi	a0,a0,-1064 # 1c00abd8 <__clz_tab+0x19c>
1c002bf6:	3b7060ef          	jal	ra,1c0097ac <puts>

#if (defined(INVERTING_KERNEL_FC) || defined(INVERTING_KERNEL_CLUSTER))
  imgBuff0_gateDetection = pmsis_l2_malloc(CAM_WIDTH*CAM_HEIGHT);
1c002bfa:	c4040513          	addi	a0,s0,-960
1c002bfe:	553030ef          	jal	ra,1c006950 <pi_l2_malloc>
static inline void pi_buffer_set_format(pi_buffer_t *buffer, uint32_t width, uint32_t height, uint32_t channels, pi_buffer_format_e format);


static inline void pi_buffer_init(pi_buffer_t *buffer, pi_buffer_type_e type, void *data)
{
  buffer->type = type;
1c002c02:	1c00c7b7          	lui	a5,0x1c00c
1c002c06:	1c00ca37          	lui	s4,0x1c00c
1c002c0a:	09078793          	addi	a5,a5,144 # 1c00c090 <_bss_start>
}

static inline void pi_buffer_set_format(pi_buffer_t *buffer, uint32_t width, uint32_t height, uint32_t channels, pi_buffer_format_e format)
{
  buffer->format = format;
  buffer->width = width;
1c002c0e:	0c800713          	li	a4,200
1c002c12:	34ca0a13          	addi	s4,s4,844 # 1c00c34c <imgBuff0_gateDetection>
1c002c16:	00aa2023          	sw	a0,0(s4)
  buffer->type = type;
1c002c1a:	0007a023          	sw	zero,0(a5)
  buffer->stride = 0;
1c002c1e:	0007aa23          	sw	zero,20(a5)
  buffer->data = data;
1c002c22:	c3c8                	sw	a0,4(a5)
  buffer->format = format;
1c002c24:	0007ae23          	sw	zero,28(a5)
  buffer->width = width;
1c002c28:	c798                	sw	a4,8(a5)
  buffer->height = height;
1c002c2a:	c7d8                	sw	a4,12(a5)
  buffer->channels = channels;
1c002c2c:	cb84                	sw	s1,16(a5)
  pi_buffer_init(&buffer_inv, PI_BUFFER_TYPE_L2, imgBuff0_gateDetection);
  pi_buffer_set_format(&buffer_inv, CAM_WIDTH, CAM_HEIGHT, 1, PI_BUFFER_FORMAT_GRAY);
  if (imgBuff0_gateDetection == NULL){ return -1;}
1c002c2e:	2a050563          	beqz	a0,1c002ed8 <main_task+0x370>
  printf("Allocated Memory for inverting filter buffer\n");
1c002c32:	1c00b537          	lui	a0,0x1c00b
1c002c36:	bf450513          	addi	a0,a0,-1036 # 1c00abf4 <__clz_tab+0x1b8>
1c002c3a:	373060ef          	jal	ra,1c0097ac <puts>
#endif

  originalImage = pmsis_l2_malloc(sizeof(PGMImage));
1c002c3e:	4519                	li	a0,6
1c002c40:	1c00b437          	lui	s0,0x1c00b
1c002c44:	50d030ef          	jal	ra,1c006950 <pi_l2_malloc>
1c002c48:	57440413          	addi	s0,s0,1396 # 1c00b574 <task>
1c002c4c:	c048                	sw	a0,4(s0)
  NULL_CHECK(originalImage);
1c002c4e:	26050c63          	beqz	a0,1c002ec6 <main_task+0x35e>
  originalImage->data = imgBuff0;
1c002c52:	0009a783          	lw	a5,0(s3)
1c002c56:	00f52123          	sw	a5,2(a0)
  NULL_CHECK(originalImage->data);
1c002c5a:	26078663          	beqz	a5,1c002ec6 <main_task+0x35e>
  originalImage->x = CAM_WIDTH;
1c002c5e:	7975                	lui	s2,0xffffd
1c002c60:	8c890913          	addi	s2,s2,-1848 # ffffc8c8 <pulp__FC+0xffffc8c9>
1c002c64:	01251023          	sh	s2,0(a0)
  originalImage->y = CAM_HEIGHT;

  outputImage = pmsis_l2_malloc(sizeof(PGMImage));
1c002c68:	4519                	li	a0,6
1c002c6a:	4e7030ef          	jal	ra,1c006950 <pi_l2_malloc>
1c002c6e:	87aa                	mv	a5,a0
  NULL_CHECK(outputImage);
1c002c70:	24050b63          	beqz	a0,1c002ec6 <main_task+0x35e>
  outputImage->data = imgBuff0_gateDetection;
1c002c74:	000a2703          	lw	a4,0(s4)
1c002c78:	00e52123          	sw	a4,2(a0)
  NULL_CHECK(outputImage->data);
1c002c7c:	24070563          	beqz	a4,1c002ec6 <main_task+0x35e>
  outputImage->x = CAM_WIDTH;
  outputImage->y = CAM_HEIGHT;

  /* cluster call arguments */
  PGMImage * args[2];
  args[0] = originalImage;
1c002c80:	4058                	lw	a4,4(s0)
  outputImage->x = CAM_WIDTH;
1c002c82:	01251023          	sh	s2,0(a0)
  args[1] = outputImage;

  task = pmsis_l2_malloc(sizeof(struct pi_cluster_task));
1c002c86:	02c00513          	li	a0,44
  args[1] = outputImage;
1c002c8a:	c43e                	sw	a5,8(sp)
  args[0] = originalImage;
1c002c8c:	c23a                	sw	a4,4(sp)
  task = pmsis_l2_malloc(sizeof(struct pi_cluster_task));
1c002c8e:	4c3030ef          	jal	ra,1c006950 <pi_l2_malloc>
1c002c92:	c008                	sw	a0,0(s0)
1c002c94:	87aa                	mv	a5,a0
  NULL_CHECK(task);
1c002c96:	22050863          	beqz	a0,1c002ec6 <main_task+0x35e>
  memset(task, 0, sizeof(struct pi_cluster_task));
  task->entry = masterFindGate;
1c002c9a:	1c003737          	lui	a4,0x1c003
1c002c9e:	62c70713          	addi	a4,a4,1580 # 1c00362c <masterFindGate>
  task->arg = (void *)args;
  task->stack_size = (uint32_t) STACK_SIZE;
1c002ca2:	6a05                	lui	s4,0x1
1c002ca4:	800a0693          	addi	a3,s4,-2048 # 800 <__rt_stack_size>
  task->entry = masterFindGate;
1c002ca8:	c398                	sw	a4,0(a5)
  task->arg = (void *)args;
1c002caa:	0058                	addi	a4,sp,4
1c002cac:	c3d8                	sw	a4,4(a5)
  task->stack_size = (uint32_t) STACK_SIZE;
1c002cae:	c7d4                	sw	a3,12(a5)
  pi_himax_conf_init(&cam_conf);
1c002cb0:	0068                	addi	a0,sp,12
  memset(task, 0, sizeof(struct pi_cluster_task));
1c002cb2:	0007a423          	sw	zero,8(a5)
1c002cb6:	0007a823          	sw	zero,16(a5)
1c002cba:	0007aa23          	sw	zero,20(a5)
1c002cbe:	0007ac23          	sw	zero,24(a5)
1c002cc2:	0007ae23          	sw	zero,28(a5)
1c002cc6:	0207a023          	sw	zero,32(a5)
1c002cca:	0207a223          	sw	zero,36(a5)
1c002cce:	0207a423          	sw	zero,40(a5)
  pi_himax_conf_init(&cam_conf);
1c002cd2:	309020ef          	jal	ra,1c0057da <pi_himax_conf_init>
  cam_conf.roi.x = 0; /* 320 / 2 - 100 */
1c002cd6:	1c00b7b7          	lui	a5,0x1c00b
1c002cda:	b907a783          	lw	a5,-1136(a5) # 1c00ab90 <__clz_tab+0x154>
  pi_open_from_conf(device, &cam_conf);
1c002cde:	1c00c437          	lui	s0,0x1c00c
1c002ce2:	0b040513          	addi	a0,s0,176 # 1c00c0b0 <camera>
  cam_conf.roi.x = 0; /* 320 / 2 - 100 */
1c002ce6:	00006757          	pv.add.sci.h	a4,zero,0
  pi_open_from_conf(device, &cam_conf);
1c002cea:	006c                	addi	a1,sp,12
  cam_conf.format = PI_CAMERA_QVGA;
1c002cec:	d026                	sw	s1,32(sp)
  cam_conf.roi.slice_en = 1;
1c002cee:	02910623          	sb	s1,44(sp)
  cam_conf.roi.x = 0; /* 320 / 2 - 100 */
1c002cf2:	d23a                	sw	a4,36(sp)
1c002cf4:	d43e                	sw	a5,40(sp)
  pi_open_from_conf(device, &cam_conf);
1c002cf6:	278030ef          	jal	ra,1c005f6e <pi_open_from_conf>
  if (pi_camera_open(device))
1c002cfa:	0b040513          	addi	a0,s0,176
  pi_open_from_conf(device, &cam_conf);
1c002cfe:	0b040913          	addi	s2,s0,176
  if (pi_camera_open(device))
1c002d02:	640020ef          	jal	ra,1c005342 <pi_camera_open>
1c002d06:	1a051863          	bnez	a0,1c002eb6 <main_task+0x34e>
}

static inline int32_t pi_camera_reg_set(struct pi_device *device, uint32_t addr, uint8_t *value)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->reg_set(device, addr, value);
1c002d0a:	00092783          	lw	a5,0(s2)
  uint8_t set_value=3;
1c002d0e:	470d                	li	a4,3
1c002d10:	00e10123          	sb	a4,2(sp)
1c002d14:	4bdc                	lw	a5,20(a5)
1c002d16:	00210613          	addi	a2,sp,2
1c002d1a:	10100593          	li	a1,257
1c002d1e:	0b040513          	addi	a0,s0,176
1c002d22:	9782                	jalr	a5
}

static inline int32_t pi_camera_reg_get(struct pi_device *device, uint32_t addr, uint8_t *value)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->reg_get(device, addr, value);
1c002d24:	00092783          	lw	a5,0(s2)
1c002d28:	00310613          	addi	a2,sp,3
1c002d2c:	10100593          	li	a1,257
1c002d30:	4b9c                	lw	a5,16(a5)
1c002d32:	0b040513          	addi	a0,s0,176
1c002d36:	9782                	jalr	a5
  if (set_value!=reg_value)
1c002d38:	00214703          	lbu	a4,2(sp)
1c002d3c:	00314783          	lbu	a5,3(sp)
1c002d40:	16f71563          	bne	a4,a5,1c002eaa <main_task+0x342>
  printf("Rotated camera image\n");
1c002d44:	1c00b537          	lui	a0,0x1c00b
1c002d48:	c6c50513          	addi	a0,a0,-916 # 1c00ac6c <__clz_tab+0x230>
1c002d4c:	261060ef          	jal	ra,1c0097ac <puts>
  return api->control(device, cmd, arg);
1c002d50:	00092783          	lw	a5,0(s2)
1c002d54:	4601                	li	a2,0
1c002d56:	459d                	li	a1,7
1c002d58:	479c                	lw	a5,8(a5)
1c002d5a:	0b040513          	addi	a0,s0,176
  pi_open_from_conf(device, &nina_conf);
1c002d5e:	1c00c4b7          	lui	s1,0x1c00c
1c002d62:	9782                	jalr	a5
  if (open_camera(&camera))
  {
    printf("Failed to open camera\n");
    return -1;
  }
  printf("Opened Camera\n");
1c002d64:	1c00b537          	lui	a0,0x1c00b
1c002d68:	c8450513          	addi	a0,a0,-892 # 1c00ac84 <__clz_tab+0x248>
1c002d6c:	241060ef          	jal	ra,1c0097ac <puts>
  pi_nina_w10_conf_init(&nina_conf);
1c002d70:	0068                	addi	a0,sp,12
1c002d72:	7b7020ef          	jal	ra,1c005d28 <pi_nina_w10_conf_init>
  nina_conf.ssid = "skyrats";
1c002d76:	1c00b7b7          	lui	a5,0x1c00b
1c002d7a:	c9478793          	addi	a5,a5,-876 # 1c00ac94 <__clz_tab+0x258>
1c002d7e:	cc3e                	sw	a5,24(sp)
  nina_conf.passwd = "pontestresolavy123";
1c002d80:	1c00b7b7          	lui	a5,0x1c00b
1c002d84:	c9c78793          	addi	a5,a5,-868 # 1c00ac9c <__clz_tab+0x260>
1c002d88:	ce3e                	sw	a5,28(sp)
  nina_conf.ip_addr = "192.168.4.1";
1c002d8a:	1c00b7b7          	lui	a5,0x1c00b
  pi_open_from_conf(device, &nina_conf);
1c002d8e:	1c848513          	addi	a0,s1,456 # 1c00c1c8 <wifi>
  nina_conf.ip_addr = "192.168.4.1";
1c002d92:	cb078793          	addi	a5,a5,-848 # 1c00acb0 <__clz_tab+0x274>
  nina_conf.port = 5000;
1c002d96:	388a0a13          	addi	s4,s4,904
  pi_open_from_conf(device, &nina_conf);
1c002d9a:	006c                	addi	a1,sp,12
  nina_conf.ip_addr = "192.168.4.1";
1c002d9c:	d03e                	sw	a5,32(sp)
  nina_conf.port = 5000;
1c002d9e:	d252                	sw	s4,36(sp)
  pi_open_from_conf(device, &nina_conf);
1c002da0:	1ce030ef          	jal	ra,1c005f6e <pi_open_from_conf>
  if (pi_transport_open(device))
1c002da4:	1c848513          	addi	a0,s1,456
1c002da8:	291020ef          	jal	ra,1c005838 <pi_transport_open>
1c002dac:	0e051763          	bnez	a0,1c002e9a <main_task+0x332>
  if (open_wifi(&wifi))
  {
    printf("Failed to open wifi\n");
    return -1;
  }
  printf("Opened WIFI\n");
1c002db0:	1c00b537          	lui	a0,0x1c00b
1c002db4:	cd450513          	addi	a0,a0,-812 # 1c00acd4 <__clz_tab+0x298>
1c002db8:	1f5060ef          	jal	ra,1c0097ac <puts>
  frame_streamer_conf_init(&frame_streamer_conf);
1c002dbc:	0068                	addi	a0,sp,12
1c002dbe:	ae2fd0ef          	jal	ra,1c0000a0 <frame_streamer_conf_init>
  frame_streamer_conf.width = CAM_WIDTH;
1c002dc2:	0c800793          	li	a5,200
1c002dc6:	ca3e                	sw	a5,20(sp)
  frame_streamer_conf.height = CAM_HEIGHT;
1c002dc8:	cc3e                	sw	a5,24(sp)
  frame_streamer_conf.name = name;
1c002dca:	1c00b7b7          	lui	a5,0x1c00b
1c002dce:	ce078793          	addi	a5,a5,-800 # 1c00ace0 <__clz_tab+0x2a4>
  frame_streamer_conf.format = FRAME_STREAMER_FORMAT_JPEG;
1c002dd2:	4a05                	li	s4,1
  frame_streamer_conf.transport = &wifi;
1c002dd4:	1c848493          	addi	s1,s1,456
  return frame_streamer_open(&frame_streamer_conf);
1c002dd8:	0068                	addi	a0,sp,12
  frame_streamer_conf.name = name;
1c002dda:	d03e                	sw	a5,32(sp)
  frame_streamer_conf.transport = &wifi;
1c002ddc:	c626                	sw	s1,12(sp)
  frame_streamer_conf.format = FRAME_STREAMER_FORMAT_JPEG;
1c002dde:	c852                	sw	s4,16(sp)
  frame_streamer_conf.depth = 1;
1c002de0:	ce52                	sw	s4,28(sp)
  return frame_streamer_open(&frame_streamer_conf);
1c002de2:	ad4fd0ef          	jal	ra,1c0000b6 <frame_streamer_open>



  streamer1 = open_streamer("camera");
1c002de6:	1c00c7b7          	lui	a5,0x1c00c
1c002dea:	34a7ac23          	sw	a0,856(a5) # 1c00c358 <streamer1>
  if (streamer1 == NULL)
1c002dee:	0e050563          	beqz	a0,1c002ed8 <main_task+0x370>
    return -1;

  printf("Opened streamer\n");
1c002df2:	1c00b537          	lui	a0,0x1c00b
1c002df6:	cfc50513          	addi	a0,a0,-772 # 1c00acfc <__clz_tab+0x2c0>
1c002dfa:	1b3060ef          	jal	ra,1c0097ac <puts>
1c002dfe:	00092783          	lw	a5,0(s2)
1c002e02:	4601                	li	a2,0
1c002e04:	458d                	li	a1,3
1c002e06:	479c                	lw	a5,8(a5)
1c002e08:	0b040513          	addi	a0,s0,176
1c002e0c:	9782                	jalr	a5
  api->capture_async(device, buffer, bufferlen, task);
1c002e0e:	00092703          	lw	a4,0(s2)
  task->id = PI_TASK_CALLBACK_ID;
1c002e12:	1c00c6b7          	lui	a3,0x1c00c
1c002e16:	14868793          	addi	a5,a3,328 # 1c00c148 <task1>
1c002e1a:	00078a23          	sb	zero,20(a5)
1c002e1e:	00c72803          	lw	a6,12(a4)

  pi_buffer_init(&buffer, PI_BUFFER_TYPE_L2, imgBuff0);
  pi_buffer_set_format(&buffer, CAM_WIDTH, CAM_HEIGHT, 1, PI_BUFFER_FORMAT_GRAY);

  pi_camera_control(&camera, PI_CAMERA_CMD_STOP, 0);
  pi_camera_capture_async(&camera, imgBuff0, CAM_WIDTH*CAM_HEIGHT, pi_task_callback(&task1, cam_handler, NULL));
1c002e22:	0009a583          	lw	a1,0(s3)
  task->arg[0] = (uint32_t)callback;
1c002e26:	1c003737          	lui	a4,0x1c003
1c002e2a:	ac670713          	addi	a4,a4,-1338 # 1c002ac6 <cam_handler>
1c002e2e:	6629                	lui	a2,0xa
1c002e30:	c3d8                	sw	a4,4(a5)
1c002e32:	14868693          	addi	a3,a3,328
1c002e36:	c4060613          	addi	a2,a2,-960 # 9c40 <__rt_stack_size+0x9440>
1c002e3a:	0b040513          	addi	a0,s0,176
  task->id = PI_TASK_CALLBACK_ID;
1c002e3e:	0007ac23          	sw	zero,24(a5)
  task->arg[1] = (uint32_t)arg;
1c002e42:	0007a423          	sw	zero,8(a5)
  task->implem.keep = 1;
1c002e46:	0347a423          	sw	s4,40(a5)
1c002e4a:	9802                	jalr	a6
  return api->control(device, cmd, arg);
1c002e4c:	00092783          	lw	a5,0(s2)
1c002e50:	4601                	li	a2,0
1c002e52:	4589                	li	a1,2
1c002e54:	479c                	lw	a5,8(a5)
1c002e56:	0b040513          	addi	a0,s0,176
1c002e5a:	9782                	jalr	a5
  pi_camera_control(&camera, PI_CAMERA_CMD_START, 0);
  printf("Transmission started\n");
1c002e5c:	1c00b537          	lui	a0,0x1c00b
1c002e60:	d0c50513          	addi	a0,a0,-756 # 1c00ad0c <__clz_tab+0x2d0>
1c002e64:	149060ef          	jal	ra,1c0097ac <puts>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e68:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002e6c:	4585                	li	a1,1
1c002e6e:	01c00513          	li	a0,28
1c002e72:	762030ef          	jal	ra,1c0065d4 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002e76:	30041073          	csrw	mstatus,s0
1c002e7a:	b7fd                	j	1c002e68 <main_task+0x300>
      printf("Failed to allocate Memory for Image \n");
1c002e7c:	1c00b537          	lui	a0,0x1c00b
1c002e80:	bb050513          	addi	a0,a0,-1104 # 1c00abb0 <__clz_tab+0x174>
1c002e84:	129060ef          	jal	ra,1c0097ac <puts>
      return 1;
1c002e88:	4505                	li	a0,1
  {
    pi_yield();
  }

  return 0;
}
1c002e8a:	40b6                	lw	ra,76(sp)
1c002e8c:	4426                	lw	s0,72(sp)
1c002e8e:	4496                	lw	s1,68(sp)
1c002e90:	4906                	lw	s2,64(sp)
1c002e92:	59f2                	lw	s3,60(sp)
1c002e94:	5a62                	lw	s4,56(sp)
1c002e96:	6161                	addi	sp,sp,80
1c002e98:	8082                	ret
    printf("Failed to open wifi\n");
1c002e9a:	1c00b537          	lui	a0,0x1c00b
1c002e9e:	ce850513          	addi	a0,a0,-792 # 1c00ace8 <__clz_tab+0x2ac>
1c002ea2:	10b060ef          	jal	ra,1c0097ac <puts>
    return -1;
1c002ea6:	557d                	li	a0,-1
1c002ea8:	b7cd                	j	1c002e8a <main_task+0x322>
    printf("Failed to rotate camera image\n");
1c002eaa:	1c00b537          	lui	a0,0x1c00b
1c002eae:	c4c50513          	addi	a0,a0,-948 # 1c00ac4c <__clz_tab+0x210>
1c002eb2:	0fb060ef          	jal	ra,1c0097ac <puts>
    printf("Failed to open camera\n");
1c002eb6:	1c00b537          	lui	a0,0x1c00b
1c002eba:	cbc50513          	addi	a0,a0,-836 # 1c00acbc <__clz_tab+0x280>
1c002ebe:	0ef060ef          	jal	ra,1c0097ac <puts>
    return -1;
1c002ec2:	557d                	li	a0,-1
1c002ec4:	b7d9                	j	1c002e8a <main_task+0x322>
  NULL_CHECK(originalImage);
1c002ec6:	1c00b537          	lui	a0,0x1c00b
1c002eca:	c2450513          	addi	a0,a0,-988 # 1c00ac24 <__clz_tab+0x1e8>
1c002ece:	23f060ef          	jal	ra,1c00990c <printf>
1c002ed2:	557d                	li	a0,-1
1c002ed4:	147060ef          	jal	ra,1c00981a <exit>
  if (imgBuff0_gateDetection == NULL){ return -1;}
1c002ed8:	557d                	li	a0,-1
1c002eda:	bf45                	j	1c002e8a <main_task+0x322>

1c002edc <main>:


/* Program Entry. */
int main(void) {

	printf("\n\n\t *** PMSIS Kickoff trasmission ***\n\n");
1c002edc:	1c00b537          	lui	a0,0x1c00b
int main(void) {
1c002ee0:	1141                	addi	sp,sp,-16
	printf("\n\n\t *** PMSIS Kickoff trasmission ***\n\n");
1c002ee2:	b6850513          	addi	a0,a0,-1176 # 1c00ab68 <__clz_tab+0x12c>
int main(void) {
1c002ee6:	c606                	sw	ra,12(sp)
	printf("\n\n\t *** PMSIS Kickoff trasmission ***\n\n");
1c002ee8:	0c5060ef          	jal	ra,1c0097ac <puts>
  ((void (*)())arg)();
1c002eec:	39b5                	jal	1c002b68 <main_task>
	return pmsis_kickoff((int *) main_task);
}
1c002eee:	40b2                	lw	ra,12(sp)
1c002ef0:	557d                	li	a0,-1
1c002ef2:	0141                	addi	sp,sp,16
1c002ef4:	8082                	ret

1c002ef6 <pi_cl_team_barrier>:
1c002ef6:	002047b7          	lui	a5,0x204
1c002efa:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c002efe:	01c7e703          	p.elw	a4,28(a5)
}
1c002f02:	8082                	ret

1c002f04 <clusterMain>:
    SEGMENTING,
    END
} imageProcessingState;

void clusterMain(void * args)
{
1c002f04:	711d                	addi	sp,sp,-96
1c002f06:	87aa                	mv	a5,a0
    uint8_t erosionCount = 1;
    PQueue * labels;
    bool copy = false;

    /* initializing cluster argument structure */
    clusterCallArgs * clusterArgs = pmsis_l1_malloc(sizeof(clusterCallArgs));
1c002f08:	45a5                	li	a1,9
1c002f0a:	4501                	li	a0,0
{
1c002f0c:	c8ca                	sw	s2,80(sp)
1c002f0e:	c6ce                	sw	s3,76(sp)
1c002f10:	ce86                	sw	ra,92(sp)
1c002f12:	cca2                	sw	s0,88(sp)
1c002f14:	caa6                	sw	s1,84(sp)
1c002f16:	c4d2                	sw	s4,72(sp)
1c002f18:	c2d6                	sw	s5,68(sp)
1c002f1a:	c0da                	sw	s6,64(sp)
1c002f1c:	de5e                	sw	s7,60(sp)
    PGMImage * restrict outputImage = *((PGMImage **)args + 1);
1c002f1e:	0047a983          	lw	s3,4(a5)
    PGMImage * restrict inputImage = *((PGMImage **)args + 2);
1c002f22:	0087a903          	lw	s2,8(a5)
    clusterCallArgs * clusterArgs = pmsis_l1_malloc(sizeof(clusterCallArgs));
1c002f26:	219030ef          	jal	ra,1c00693e <pi_cl_l1_malloc>
    NULL_CHECK(clusterArgs);
1c002f2a:	6a050963          	beqz	a0,1c0035dc <clusterMain+0x6d8>
    clusterArgs->inputImage = inputImage;
    clusterArgs->outputImage = outputImage;
    clusterArgs->numOfCores = gap8_ncore();
1c002f2e:	47a1                	li	a5,8
    clusterArgs->inputImage = inputImage;
1c002f30:	01252023          	sw	s2,0(a0)
    clusterArgs->outputImage = outputImage;
1c002f34:	01352223          	sw	s3,4(a0)
    clusterArgs->numOfCores = gap8_ncore();
1c002f38:	00f50423          	sb	a5,8(a0)
1c002f3c:	842a                	mv	s0,a0
    printf("Entering state machine\n");
1c002f3e:	1c00b537          	lui	a0,0x1c00b
1c002f42:	d2450513          	addi	a0,a0,-732 # 1c00ad24 <__clz_tab+0x2e8>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c002f46:	01402973          	csrr	s2,uhartid
#endif
#else
  asm("csrr %0, 0xF10" : "=r" (hart_id) : );
#endif
  // in PULP the hart id is {22'b0, cluster_id, core_id}
  return hart_id & 0x01f;
1c002f4a:	f4593933          	p.bclr	s2,s2,26,5
1c002f4e:	05f060ef          	jal	ra,1c0097ac <puts>
    imageProcessingState state = FILTERING;
1c002f52:	4b81                	li	s7,0
1c002f54:	8b4a                	mv	s6,s2
1c002f56:	8aca                	mv	s5,s2
1c002f58:	8a4a                	mv	s4,s2

    while(state != END)
    {
        switch(state)
1c002f5a:	0e3bbd63          	p.bneimm	s7,3,1c003054 <clusterMain+0x150>
                state = DILATING;
                #endif
                break;

            case ERODING:
                cl_maskErosion((void *)clusterArgs);
1c002f5e:	8522                	mv	a0,s0
1c002f60:	59e010ef          	jal	ra,1c0044fe <cl_maskErosion>
            default:
                //printf("State does not exist!\n");
                break;
        }

        pi_cl_team_barrier(0);
1c002f64:	4501                	li	a0,0
1c002f66:	3f41                	jal	1c002ef6 <pi_cl_team_barrier>

        if(pi_core_id() == 0 && copy)
1c002f68:	340b0863          	beqz	s6,1c0032b8 <clusterMain+0x3b4>

            /* wait for transfer to end */
            pi_cl_dma_cmd_wait(&dmaCopyStatus);
        }

        pi_cl_team_barrier(0);
1c002f6c:	4501                	li	a0,0
1c002f6e:	3761                	jal	1c002ef6 <pi_cl_team_barrier>
                cl_maskDilation((void *)clusterArgs);
1c002f70:	8522                	mv	a0,s0
1c002f72:	720010ef          	jal	ra,1c004692 <cl_maskDilation>
        pi_cl_team_barrier(0);
1c002f76:	4501                	li	a0,0
1c002f78:	3fbd                	jal	1c002ef6 <pi_cl_team_barrier>
        if(pi_core_id() == 0 && copy)
1c002f7a:	10090163          	beqz	s2,1c00307c <clusterMain+0x178>
        pi_cl_team_barrier(0);
1c002f7e:	4501                	li	a0,0
1c002f80:	3f9d                	jal	1c002ef6 <pi_cl_team_barrier>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c002f82:	014027f3          	csrr	a5,uhartid
  return hart_id & 0x01f;
1c002f86:	f457b7b3          	p.bclr	a5,a5,26,5
                if(pi_core_id() == 0)
1c002f8a:	30078e63          	beqz	a5,1c0032a6 <clusterMain+0x3a2>
        pi_cl_team_barrier(0);
1c002f8e:	4501                	li	a0,0
1c002f90:	379d                	jal	1c002ef6 <pi_cl_team_barrier>
        pi_cl_team_barrier(0);
1c002f92:	4501                	li	a0,0
1c002f94:	378d                	jal	1c002ef6 <pi_cl_team_barrier>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c002f96:	014027f3          	csrr	a5,uhartid
  return hart_id & 0x01f;
1c002f9a:	f457b7b3          	p.bclr	a5,a5,26,5

    }

    if(pi_core_id() == 0)
1c002f9e:	c785                	beqz	a5,1c002fc6 <clusterMain+0xc2>
1c002fa0:	a879                	j	1c00303e <clusterMain+0x13a>
    {
        Point squareCenter;
        PQueueNode label;
        while(!pQueueIsEmpty(labels))
        {
            label = pDequeue(labels);
1c002fa2:	8526                	mv	a0,s1
1c002fa4:	19d010ef          	jal	ra,1c004940 <pDequeue>

            squareCenter = findGate(clusterArgs->inputImage, label.pQueueItem);
1c002fa8:	0ff57593          	andi	a1,a0,255
1c002fac:	4008                	lw	a0,0(s0)
1c002fae:	517010ef          	jal	ra,1c004cc4 <findGate>
1c002fb2:	ce851733          	p.extractu	a4,a0,7,8
1c002fb6:	cf0517b3          	p.extractu	a5,a0,7,16
1c002fba:	00a10623          	sb	a0,12(sp)
1c002fbe:	00e106a3          	sb	a4,13(sp)
1c002fc2:	00f10723          	sb	a5,14(sp)
        while(!pQueueIsEmpty(labels))
1c002fc6:	8526                	mv	a0,s1
1c002fc8:	0af010ef          	jal	ra,1c004876 <pQueueIsEmpty>
1c002fcc:	d979                	beqz	a0,1c002fa2 <clusterMain+0x9e>
        }

        #if SEGMENTATION_METHOD == 0
        /* copying output from L1 to L2 */
        pi_cl_dma_cmd((uint32_t) outputImage->data, (uint32_t) clusterArgs->inputImage->data, 40000*sizeof(uint8_t), PI_CL_DMA_DIR_LOC2EXT, &dmaCopyStatus);
1c002fce:	401c                	lw	a5,0(s0)
1c002fd0:	0029a683          	lw	a3,2(s3)
1c002fd4:	0027a603          	lw	a2,2(a5)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fd8:	300475f3          	csrrci	a1,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c002fdc:	003207b7          	lui	a5,0x320
1c002fe0:	ca3e                	sw	a5,20(sp)
    cmd->size = len;
1c002fe2:	67a9                	lui	a5,0xa
1c002fe4:	c4078793          	addi	a5,a5,-960 # 9c40 <__rt_stack_size+0x9440>
    if (__rt_dma_first_pending)
1c002fe8:	01402503          	lw	a0,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002fec:	6721                	lui	a4,0x8
    cmd->size = len;
1c002fee:	cc3e                	sw	a5,24(sp)
    cmd->id = tid;
1c002ff0:	57fd                	li	a5,-1
    cmd->loc_addr = loc;
1c002ff2:	d232                	sw	a2,36(sp)
    cmd->ext_addr = ext;
1c002ff4:	d436                	sw	a3,40(sp)
    cmd->stride = stride;
1c002ff6:	ce3a                	sw	a4,28(sp)
    cmd->length = length;
1c002ff8:	d03a                	sw	a4,32(sp)
    cmd->id = tid;
1c002ffa:	c83e                	sw	a5,16(sp)
    cmd->next = NULL;
1c002ffc:	d602                	sw	zero,44(sp)
    if (__rt_dma_first_pending)
1c002ffe:	40050c63          	beqz	a0,1c003416 <clusterMain+0x512>
        __rt_dma_last_pending->next = cmd;
1c003002:	01002703          	lw	a4,16(zero) # 10 <__rt_bridge_flash_cs>
1c003006:	081c                	addi	a5,sp,16
1c003008:	cf5c                	sw	a5,28(a4)
    __rt_dma_last_pending = cmd;
1c00300a:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
  __builtin_pulp_spr_write(reg, val);
1c00300e:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c003012:	5782                	lw	a5,32(sp)
1c003014:	36078863          	beqz	a5,1c003384 <clusterMain+0x480>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003018:	56a2                	lw	a3,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00301a:	02000713          	li	a4,32
1c00301e:	002047b7          	lui	a5,0x204
1c003022:	ca89                	beqz	a3,1c003034 <clusterMain+0x130>
1c003024:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003028:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00302c:	00e7a223          	sw	a4,4(a5)
1c003030:	56a2                	lw	a3,40(sp)
1c003032:	faed                	bnez	a3,1c003024 <clusterMain+0x120>

        /* wait for transfer to end */
        pi_cl_dma_cmd_wait(&dmaCopyStatus);
        #endif

        pmsis_l1_malloc_free(clusterArgs, sizeof(clusterCallArgs));
1c003034:	4625                	li	a2,9
1c003036:	85a2                	mv	a1,s0
1c003038:	4501                	li	a0,0
1c00303a:	10b030ef          	jal	ra,1c006944 <pi_cl_l1_free>
    }
}
1c00303e:	40f6                	lw	ra,92(sp)
1c003040:	4466                	lw	s0,88(sp)
1c003042:	44d6                	lw	s1,84(sp)
1c003044:	4946                	lw	s2,80(sp)
1c003046:	49b6                	lw	s3,76(sp)
1c003048:	4a26                	lw	s4,72(sp)
1c00304a:	4a96                	lw	s5,68(sp)
1c00304c:	4b06                	lw	s6,64(sp)
1c00304e:	5bf2                	lw	s7,60(sp)
1c003050:	6125                	addi	sp,sp,96
1c003052:	8082                	ret
        switch(state)
1c003054:	478d                	li	a5,3
1c003056:	1b77e163          	bltu	a5,s7,1c0031f8 <clusterMain+0x2f4>
1c00305a:	161bac63          	p.beqimm	s7,1,1c0031d2 <clusterMain+0x2ce>
1c00305e:	1a2bb163          	p.bneimm	s7,2,1c003200 <clusterMain+0x2fc>
                if(pi_core_id() == 0)
1c003062:	180a8363          	beqz	s5,1c0031e8 <clusterMain+0x2e4>
        pi_cl_team_barrier(0);
1c003066:	4501                	li	a0,0
1c003068:	3579                	jal	1c002ef6 <pi_cl_team_barrier>
        pi_cl_team_barrier(0);
1c00306a:	4501                	li	a0,0
1c00306c:	3569                	jal	1c002ef6 <pi_cl_team_barrier>
                cl_maskDilation((void *)clusterArgs);
1c00306e:	8522                	mv	a0,s0
1c003070:	622010ef          	jal	ra,1c004692 <cl_maskDilation>
        pi_cl_team_barrier(0);
1c003074:	4501                	li	a0,0
1c003076:	3541                	jal	1c002ef6 <pi_cl_team_barrier>
        if(pi_core_id() == 0 && copy)
1c003078:	f00913e3          	bnez	s2,1c002f7e <clusterMain+0x7a>
            pi_cl_dma_cmd((uint32_t) clusterArgs->outputImage->data, (uint32_t) clusterArgs->inputImage->data, 40000*sizeof(uint8_t), PI_CL_DMA_DIR_EXT2LOC, &dmaCopyStatus);
1c00307c:	4058                	lw	a4,4(s0)
1c00307e:	401c                	lw	a5,0(s0)
1c003080:	00272683          	lw	a3,2(a4) # 8002 <__rt_stack_size+0x7802>
1c003084:	0027a603          	lw	a2,2(a5)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003088:	30047573          	csrrci	a0,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c00308c:	003307b7          	lui	a5,0x330
1c003090:	ca3e                	sw	a5,20(sp)
    cmd->size = len;
1c003092:	67a9                	lui	a5,0xa
1c003094:	c4078793          	addi	a5,a5,-960 # 9c40 <__rt_stack_size+0x9440>
    if (__rt_dma_first_pending)
1c003098:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00309c:	6721                	lui	a4,0x8
    cmd->size = len;
1c00309e:	cc3e                	sw	a5,24(sp)
    cmd->id = tid;
1c0030a0:	57fd                	li	a5,-1
    cmd->loc_addr = loc;
1c0030a2:	d232                	sw	a2,36(sp)
    cmd->ext_addr = ext;
1c0030a4:	d436                	sw	a3,40(sp)
    cmd->stride = stride;
1c0030a6:	ce3a                	sw	a4,28(sp)
    cmd->length = length;
1c0030a8:	d03a                	sw	a4,32(sp)
    cmd->id = tid;
1c0030aa:	c83e                	sw	a5,16(sp)
    cmd->next = NULL;
1c0030ac:	d602                	sw	zero,44(sp)
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
1c0030ae:	4805                	li	a6,1
    if (__rt_dma_first_pending)
1c0030b0:	3e058463          	beqz	a1,1c003498 <clusterMain+0x594>
        __rt_dma_last_pending->next = cmd;
1c0030b4:	01002703          	lw	a4,16(zero) # 10 <__rt_bridge_flash_cs>
1c0030b8:	081c                	addi	a5,sp,16
    __rt_dma_last_pending = cmd;
1c0030ba:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
        __rt_dma_last_pending->next = cmd;
1c0030be:	cf5c                	sw	a5,28(a4)
  __builtin_pulp_spr_write(reg, val);
1c0030c0:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0030c4:	5782                	lw	a5,32(sp)
1c0030c6:	32079763          	bnez	a5,1c0033f4 <clusterMain+0x4f0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0030ca:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0030ce:	002047b7          	lui	a5,0x204
1c0030d2:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0030d6:	4742                	lw	a4,16(sp)
1c0030d8:	40e7d7b3          	sra	a5,a5,a4
1c0030dc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0030e0:	4a078a63          	beqz	a5,1c003594 <clusterMain+0x690>
                state = SEGMENTING;
1c0030e4:	4b95                	li	s7,5
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0030e6:	10000593          	li	a1,256
1c0030ea:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0030ee:	30069073          	csrw	mstatus,a3
1c0030f2:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0030f6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0030fa:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0030fe:	300476f3          	csrrci	a3,mstatus,8
1c003102:	40472783          	lw	a5,1028(a4)
1c003106:	4642                	lw	a2,16(sp)
1c003108:	40c7d7b3          	sra	a5,a5,a2
1c00310c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003110:	fff9                	bnez	a5,1c0030ee <clusterMain+0x1ea>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003112:	4785                	li	a5,1
1c003114:	00c79633          	sll	a2,a5,a2
1c003118:	002047b7          	lui	a5,0x204
1c00311c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003120:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c003124:	4501                	li	a0,0
1c003126:	3bc1                	jal	1c002ef6 <pi_cl_team_barrier>
1c003128:	bd0d                	j	1c002f5a <clusterMain+0x56>
            pi_cl_dma_cmd((uint32_t) clusterArgs->outputImage->data, (uint32_t) clusterArgs->inputImage->data, 40000*sizeof(uint8_t), PI_CL_DMA_DIR_EXT2LOC, &dmaCopyStatus);
1c00312a:	4058                	lw	a4,4(s0)
1c00312c:	401c                	lw	a5,0(s0)
1c00312e:	00272683          	lw	a3,2(a4)
1c003132:	0027a603          	lw	a2,2(a5)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003136:	30047873          	csrrci	a6,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c00313a:	003307b7          	lui	a5,0x330
1c00313e:	ca3e                	sw	a5,20(sp)
    cmd->size = len;
1c003140:	67a9                	lui	a5,0xa
1c003142:	c4078793          	addi	a5,a5,-960 # 9c40 <__rt_stack_size+0x9440>
    if (__rt_dma_first_pending)
1c003146:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00314a:	6721                	lui	a4,0x8
    cmd->size = len;
1c00314c:	cc3e                	sw	a5,24(sp)
    cmd->id = tid;
1c00314e:	57fd                	li	a5,-1
    cmd->loc_addr = loc;
1c003150:	d232                	sw	a2,36(sp)
    cmd->ext_addr = ext;
1c003152:	d436                	sw	a3,40(sp)
    cmd->stride = stride;
1c003154:	ce3a                	sw	a4,28(sp)
    cmd->length = length;
1c003156:	d03a                	sw	a4,32(sp)
    cmd->id = tid;
1c003158:	c83e                	sw	a5,16(sp)
    cmd->next = NULL;
1c00315a:	d602                	sw	zero,44(sp)
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
1c00315c:	4505                	li	a0,1
    if (__rt_dma_first_pending)
1c00315e:	2e059963          	bnez	a1,1c003450 <clusterMain+0x54c>
        cmd->loc_addr += iter_length;
1c003162:	00e607b3          	add	a5,a2,a4
1c003166:	d23e                	sw	a5,36(sp)
        cmd->size -= iter_length;
1c003168:	6789                	lui	a5,0x2
        cmd->ext_addr += stride;
1c00316a:	9736                	add	a4,a4,a3
        cmd->size -= iter_length;
1c00316c:	c4078793          	addi	a5,a5,-960 # 1c40 <__rt_stack_size+0x1440>
        cmd->ext_addr += stride;
1c003170:	d43a                	sw	a4,40(sp)
        cmd->size -= iter_length;
1c003172:	cc3e                	sw	a5,24(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003174:	00204737          	lui	a4,0x204
1c003178:	40072783          	lw	a5,1024(a4) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c00317c:	c83e                	sw	a5,16(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00317e:	003387b7          	lui	a5,0x338
1c003182:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003186:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00318a:	40d72023          	sw	a3,1024(a4)
        if (cmd->length != 0)
1c00318e:	5782                	lw	a5,32(sp)
1c003190:	44078f63          	beqz	a5,1c0035ee <clusterMain+0x6ea>
            __rt_dma_first_pending = cmd;
1c003194:	081c                	addi	a5,sp,16
1c003196:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
    __rt_dma_last_pending = cmd;
1c00319a:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
  __builtin_pulp_spr_write(reg, val);
1c00319e:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c0031a2:	5782                	lw	a5,32(sp)
1c0031a4:	48079063          	bnez	a5,1c003624 <clusterMain+0x720>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031a8:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0031ac:	40472783          	lw	a5,1028(a4)
1c0031b0:	4742                	lw	a4,16(sp)
                state = EDGE_DETECTING;
1c0031b2:	4b85                	li	s7,1
1c0031b4:	40e7d7b3          	sra	a5,a5,a4
1c0031b8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0031bc:	f78d                	bnez	a5,1c0030e6 <clusterMain+0x1e2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0031be:	00e51733          	sll	a4,a0,a4
1c0031c2:	002047b7          	lui	a5,0x204
1c0031c6:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0031ca:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c0031ce:	4501                	li	a0,0
1c0031d0:	331d                	jal	1c002ef6 <pi_cl_team_barrier>
                cl_cannyOperator((void *)clusterArgs);
1c0031d2:	8522                	mv	a0,s0
1c0031d4:	009000ef          	jal	ra,1c0039dc <cl_cannyOperator>
        pi_cl_team_barrier(0);
1c0031d8:	4501                	li	a0,0
1c0031da:	3b31                	jal	1c002ef6 <pi_cl_team_barrier>
        if(pi_core_id() == 0 && copy)
1c0031dc:	040a0563          	beqz	s4,1c003226 <clusterMain+0x322>
        pi_cl_team_barrier(0);
1c0031e0:	4501                	li	a0,0
1c0031e2:	3b11                	jal	1c002ef6 <pi_cl_team_barrier>
                if(pi_core_id() == 0)
1c0031e4:	e80a91e3          	bnez	s5,1c003066 <clusterMain+0x162>
                    adaptiveHistogramTechnique(clusterArgs->inputImage);
1c0031e8:	4008                	lw	a0,0(s0)
1c0031ea:	709010ef          	jal	ra,1c0050f2 <adaptiveHistogramTechnique>
        pi_cl_team_barrier(0);
1c0031ee:	4501                	li	a0,0
1c0031f0:	3319                	jal	1c002ef6 <pi_cl_team_barrier>
        pi_cl_team_barrier(0);
1c0031f2:	4501                	li	a0,0
1c0031f4:	3309                	jal	1c002ef6 <pi_cl_team_barrier>
1c0031f6:	bbad                	j	1c002f70 <clusterMain+0x6c>
        switch(state)
1c0031f8:	d64bace3          	p.beqimm	s7,4,1c002f70 <clusterMain+0x6c>
1c0031fc:	d85ba3e3          	p.beqimm	s7,5,1c002f82 <clusterMain+0x7e>
                cl_vectorial_gaussianFilter((void *)clusterArgs);
1c003200:	8522                	mv	a0,s0
1c003202:	2be5                	jal	1c0037fa <cl_vectorial_gaussianFilter>
        pi_cl_team_barrier(0);
1c003204:	4501                	li	a0,0
1c003206:	39c5                	jal	1c002ef6 <pi_cl_team_barrier>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c003208:	014027f3          	csrr	a5,uhartid
  return hart_id & 0x01f;
1c00320c:	f457b7b3          	p.bclr	a5,a5,26,5
        if(pi_core_id() == 0 && copy)
1c003210:	f0078de3          	beqz	a5,1c00312a <clusterMain+0x226>
        pi_cl_team_barrier(0);
1c003214:	4501                	li	a0,0
1c003216:	31c5                	jal	1c002ef6 <pi_cl_team_barrier>
                cl_cannyOperator((void *)clusterArgs);
1c003218:	8522                	mv	a0,s0
1c00321a:	7c2000ef          	jal	ra,1c0039dc <cl_cannyOperator>
        pi_cl_team_barrier(0);
1c00321e:	4501                	li	a0,0
1c003220:	39d9                	jal	1c002ef6 <pi_cl_team_barrier>
        if(pi_core_id() == 0 && copy)
1c003222:	fa0a1fe3          	bnez	s4,1c0031e0 <clusterMain+0x2dc>
            pi_cl_dma_cmd((uint32_t) clusterArgs->outputImage->data, (uint32_t) clusterArgs->inputImage->data, 40000*sizeof(uint8_t), PI_CL_DMA_DIR_EXT2LOC, &dmaCopyStatus);
1c003226:	4058                	lw	a4,4(s0)
1c003228:	401c                	lw	a5,0(s0)
1c00322a:	00272683          	lw	a3,2(a4)
1c00322e:	0027a603          	lw	a2,2(a5)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003232:	30047873          	csrrci	a6,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c003236:	003307b7          	lui	a5,0x330
1c00323a:	ca3e                	sw	a5,20(sp)
    cmd->size = len;
1c00323c:	67a9                	lui	a5,0xa
1c00323e:	c4078793          	addi	a5,a5,-960 # 9c40 <__rt_stack_size+0x9440>
    if (__rt_dma_first_pending)
1c003242:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003246:	6721                	lui	a4,0x8
    cmd->size = len;
1c003248:	cc3e                	sw	a5,24(sp)
    cmd->id = tid;
1c00324a:	57fd                	li	a5,-1
    cmd->loc_addr = loc;
1c00324c:	d232                	sw	a2,36(sp)
    cmd->ext_addr = ext;
1c00324e:	d436                	sw	a3,40(sp)
    cmd->stride = stride;
1c003250:	ce3a                	sw	a4,28(sp)
    cmd->length = length;
1c003252:	d03a                	sw	a4,32(sp)
    cmd->id = tid;
1c003254:	c83e                	sw	a5,16(sp)
    cmd->next = NULL;
1c003256:	d602                	sw	zero,44(sp)
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
1c003258:	4505                	li	a0,1
    if (__rt_dma_first_pending)
1c00325a:	2a058863          	beqz	a1,1c00350a <clusterMain+0x606>
        __rt_dma_last_pending->next = cmd;
1c00325e:	01002703          	lw	a4,16(zero) # 10 <__rt_bridge_flash_cs>
1c003262:	081c                	addi	a5,sp,16
    __rt_dma_last_pending = cmd;
1c003264:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
        __rt_dma_last_pending->next = cmd;
1c003268:	cf5c                	sw	a5,28(a4)
  __builtin_pulp_spr_write(reg, val);
1c00326a:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c00326e:	5782                	lw	a5,32(sp)
1c003270:	3a079363          	bnez	a5,1c003616 <clusterMain+0x712>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003274:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003278:	002047b7          	lui	a5,0x204
1c00327c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003280:	4742                	lw	a4,16(sp)
                state = THRESHOLDING;
1c003282:	4b89                	li	s7,2
1c003284:	40e7d7b3          	sra	a5,a5,a4
1c003288:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00328c:	e4079de3          	bnez	a5,1c0030e6 <clusterMain+0x1e2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003290:	00e51533          	sll	a0,a0,a4
1c003294:	002047b7          	lui	a5,0x204
1c003298:	40a7a223          	sw	a0,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00329c:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c0032a0:	4501                	li	a0,0
1c0032a2:	3991                	jal	1c002ef6 <pi_cl_team_barrier>
1c0032a4:	bb7d                	j	1c003062 <clusterMain+0x15e>
                    labels = edgeSegmentation(clusterArgs->inputImage);
1c0032a6:	4008                	lw	a0,0(s0)
1c0032a8:	755000ef          	jal	ra,1c0041fc <edgeSegmentation>
1c0032ac:	84aa                	mv	s1,a0
        pi_cl_team_barrier(0);
1c0032ae:	4501                	li	a0,0
1c0032b0:	3199                	jal	1c002ef6 <pi_cl_team_barrier>
        pi_cl_team_barrier(0);
1c0032b2:	4501                	li	a0,0
1c0032b4:	3189                	jal	1c002ef6 <pi_cl_team_barrier>
1c0032b6:	b1c5                	j	1c002f96 <clusterMain+0x92>
            pi_cl_dma_cmd((uint32_t) clusterArgs->outputImage->data, (uint32_t) clusterArgs->inputImage->data, 40000*sizeof(uint8_t), PI_CL_DMA_DIR_EXT2LOC, &dmaCopyStatus);
1c0032b8:	4058                	lw	a4,4(s0)
1c0032ba:	401c                	lw	a5,0(s0)
1c0032bc:	00272683          	lw	a3,2(a4) # 8002 <__rt_stack_size+0x7802>
1c0032c0:	0027a603          	lw	a2,2(a5)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0032c4:	30047573          	csrrci	a0,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c0032c8:	00330737          	lui	a4,0x330
1c0032cc:	ca3a                	sw	a4,20(sp)
    cmd->size = len;
1c0032ce:	6729                	lui	a4,0xa
1c0032d0:	c4070713          	addi	a4,a4,-960 # 9c40 <__rt_stack_size+0x9440>
    if (__rt_dma_first_pending)
1c0032d4:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0032d8:	67a1                	lui	a5,0x8
    cmd->size = len;
1c0032da:	cc3a                	sw	a4,24(sp)
    cmd->id = tid;
1c0032dc:	577d                	li	a4,-1
    cmd->loc_addr = loc;
1c0032de:	d232                	sw	a2,36(sp)
    cmd->ext_addr = ext;
1c0032e0:	d436                	sw	a3,40(sp)
    cmd->stride = stride;
1c0032e2:	ce3e                	sw	a5,28(sp)
    cmd->length = length;
1c0032e4:	d03e                	sw	a5,32(sp)
    cmd->id = tid;
1c0032e6:	c83a                	sw	a4,16(sp)
    cmd->next = NULL;
1c0032e8:	d602                	sw	zero,44(sp)
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
1c0032ea:	4805                	li	a6,1
    if (__rt_dma_first_pending)
1c0032ec:	c5a9                	beqz	a1,1c003336 <clusterMain+0x432>
        __rt_dma_last_pending->next = cmd;
1c0032ee:	01002703          	lw	a4,16(zero) # 10 <__rt_bridge_flash_cs>
1c0032f2:	081c                	addi	a5,sp,16
    __rt_dma_last_pending = cmd;
1c0032f4:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
        __rt_dma_last_pending->next = cmd;
1c0032f8:	cf5c                	sw	a5,28(a4)
  __builtin_pulp_spr_write(reg, val);
1c0032fa:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0032fe:	5782                	lw	a5,32(sp)
1c003300:	28079563          	bnez	a5,1c00358a <clusterMain+0x686>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003304:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003308:	002047b7          	lui	a5,0x204
1c00330c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003310:	4742                	lw	a4,16(sp)
                state = DILATING;
1c003312:	4b91                	li	s7,4
1c003314:	40e7d7b3          	sra	a5,a5,a4
1c003318:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00331c:	dc0795e3          	bnez	a5,1c0030e6 <clusterMain+0x1e2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003320:	00e81833          	sll	a6,a6,a4
1c003324:	002047b7          	lui	a5,0x204
1c003328:	4107a223          	sw	a6,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00332c:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c003330:	4501                	li	a0,0
1c003332:	36d1                	jal	1c002ef6 <pi_cl_team_barrier>
1c003334:	b935                	j	1c002f70 <clusterMain+0x6c>
        cmd->loc_addr += iter_length;
1c003336:	00f60733          	add	a4,a2,a5
        cmd->ext_addr += stride;
1c00333a:	97b6                	add	a5,a5,a3
1c00333c:	d43e                	sw	a5,40(sp)
        cmd->size -= iter_length;
1c00333e:	6789                	lui	a5,0x2
1c003340:	c4078793          	addi	a5,a5,-960 # 1c40 <__rt_stack_size+0x1440>
        cmd->loc_addr += iter_length;
1c003344:	d23a                	sw	a4,36(sp)
        cmd->size -= iter_length;
1c003346:	cc3e                	sw	a5,24(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003348:	00204737          	lui	a4,0x204
1c00334c:	40072783          	lw	a5,1024(a4) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c003350:	c83e                	sw	a5,16(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003352:	003387b7          	lui	a5,0x338
1c003356:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00335a:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00335e:	40d72023          	sw	a3,1024(a4)
        if (cmd->length != 0)
1c003362:	5782                	lw	a5,32(sp)
1c003364:	20078c63          	beqz	a5,1c00357c <clusterMain+0x678>
            __rt_dma_first_pending = cmd;
1c003368:	081c                	addi	a5,sp,16
1c00336a:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
    __rt_dma_last_pending = cmd;
1c00336e:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c003372:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c003376:	5782                	lw	a5,32(sp)
1c003378:	22078a63          	beqz	a5,1c0035ac <clusterMain+0x6a8>
                state = DILATING;
1c00337c:	4b91                	li	s7,4
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00337e:	57a2                	lw	a5,40(sp)
1c003380:	efb5                	bnez	a5,1c0033fc <clusterMain+0x4f8>
1c003382:	b34d                	j	1c003124 <clusterMain+0x220>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003384:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003388:	002047b7          	lui	a5,0x204
1c00338c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003390:	46c2                	lw	a3,16(sp)
1c003392:	40d7d7b3          	sra	a5,a5,a3
1c003396:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00339a:	c79d                	beqz	a5,1c0033c8 <clusterMain+0x4c4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00339c:	10000593          	li	a1,256
1c0033a0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0033a4:	30061073          	csrw	mstatus,a2
1c0033a8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0033ac:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0033b0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0033b4:	30047673          	csrrci	a2,mstatus,8
1c0033b8:	40472783          	lw	a5,1028(a4)
1c0033bc:	46c2                	lw	a3,16(sp)
1c0033be:	40d7d7b3          	sra	a5,a5,a3
1c0033c2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0033c6:	fff9                	bnez	a5,1c0033a4 <clusterMain+0x4a0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0033c8:	4785                	li	a5,1
1c0033ca:	00d796b3          	sll	a3,a5,a3
1c0033ce:	002047b7          	lui	a5,0x204
1c0033d2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0033d6:	30061073          	csrw	mstatus,a2
        pmsis_l1_malloc_free(clusterArgs, sizeof(clusterCallArgs));
1c0033da:	4625                	li	a2,9
1c0033dc:	85a2                	mv	a1,s0
1c0033de:	4501                	li	a0,0
1c0033e0:	564030ef          	jal	ra,1c006944 <pi_cl_l1_free>
1c0033e4:	b9a9                	j	1c00303e <clusterMain+0x13a>
    __rt_dma_last_pending = cmd;
1c0033e6:	081c                	addi	a5,sp,16
1c0033e8:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0033ec:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0033f0:	5782                	lw	a5,32(sp)
1c0033f2:	c7ed                	beqz	a5,1c0034dc <clusterMain+0x5d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0033f4:	57a2                	lw	a5,40(sp)
1c0033f6:	b80784e3          	beqz	a5,1c002f7e <clusterMain+0x7a>
                state = SEGMENTING;
1c0033fa:	4b95                	li	s7,5
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0033fc:	02000713          	li	a4,32
1c003400:	002047b7          	lui	a5,0x204
1c003404:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003408:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00340c:	00e7a223          	sw	a4,4(a5)
1c003410:	56a2                	lw	a3,40(sp)
1c003412:	faed                	bnez	a3,1c003404 <clusterMain+0x500>
1c003414:	bb01                	j	1c003124 <clusterMain+0x220>
        cmd->loc_addr += iter_length;
1c003416:	00e607b3          	add	a5,a2,a4
1c00341a:	d23e                	sw	a5,36(sp)
        cmd->size -= iter_length;
1c00341c:	6789                	lui	a5,0x2
        cmd->ext_addr += stride;
1c00341e:	9736                	add	a4,a4,a3
        cmd->size -= iter_length;
1c003420:	c4078793          	addi	a5,a5,-960 # 1c40 <__rt_stack_size+0x1440>
        cmd->ext_addr += stride;
1c003424:	d43a                	sw	a4,40(sp)
        cmd->size -= iter_length;
1c003426:	cc3e                	sw	a5,24(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003428:	002047b7          	lui	a5,0x204
1c00342c:	4007a703          	lw	a4,1024(a5) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c003430:	c83a                	sw	a4,16(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003432:	00328737          	lui	a4,0x328
1c003436:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00343a:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00343e:	40d7a023          	sw	a3,1024(a5)
        if (cmd->length != 0)
1c003442:	5702                	lw	a4,32(sp)
1c003444:	081c                	addi	a5,sp,16
1c003446:	bc0702e3          	beqz	a4,1c00300a <clusterMain+0x106>
            __rt_dma_first_pending = cmd;
1c00344a:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00344e:	be75                	j	1c00300a <clusterMain+0x106>
        __rt_dma_last_pending->next = cmd;
1c003450:	01002703          	lw	a4,16(zero) # 10 <__rt_bridge_flash_cs>
1c003454:	081c                	addi	a5,sp,16
    __rt_dma_last_pending = cmd;
1c003456:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
        __rt_dma_last_pending->next = cmd;
1c00345a:	cf5c                	sw	a5,28(a4)
1c00345c:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c003460:	5782                	lw	a5,32(sp)
1c003462:	18079e63          	bnez	a5,1c0035fe <clusterMain+0x6fa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003466:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00346a:	002047b7          	lui	a5,0x204
1c00346e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003472:	4742                	lw	a4,16(sp)
                state = EDGE_DETECTING;
1c003474:	4b85                	li	s7,1
1c003476:	40e7d7b3          	sra	a5,a5,a4
1c00347a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00347e:	c60794e3          	bnez	a5,1c0030e6 <clusterMain+0x1e2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003482:	00e51533          	sll	a0,a0,a4
1c003486:	002047b7          	lui	a5,0x204
1c00348a:	40a7a223          	sw	a0,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00348e:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c003492:	4501                	li	a0,0
1c003494:	348d                	jal	1c002ef6 <pi_cl_team_barrier>
1c003496:	bb35                	j	1c0031d2 <clusterMain+0x2ce>
        cmd->loc_addr += iter_length;
1c003498:	00e607b3          	add	a5,a2,a4
1c00349c:	d23e                	sw	a5,36(sp)
        cmd->size -= iter_length;
1c00349e:	6789                	lui	a5,0x2
        cmd->ext_addr += stride;
1c0034a0:	9736                	add	a4,a4,a3
        cmd->size -= iter_length;
1c0034a2:	c4078793          	addi	a5,a5,-960 # 1c40 <__rt_stack_size+0x1440>
        cmd->ext_addr += stride;
1c0034a6:	d43a                	sw	a4,40(sp)
        cmd->size -= iter_length;
1c0034a8:	cc3e                	sw	a5,24(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0034aa:	00204737          	lui	a4,0x204
1c0034ae:	40072783          	lw	a5,1024(a4) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c0034b2:	c83e                	sw	a5,16(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0034b4:	003387b7          	lui	a5,0x338
1c0034b8:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0034bc:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0034c0:	40d72023          	sw	a3,1024(a4)
        if (cmd->length != 0)
1c0034c4:	5782                	lw	a5,32(sp)
1c0034c6:	d385                	beqz	a5,1c0033e6 <clusterMain+0x4e2>
            __rt_dma_first_pending = cmd;
1c0034c8:	081c                	addi	a5,sp,16
1c0034ca:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
    __rt_dma_last_pending = cmd;
1c0034ce:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0034d2:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0034d6:	5782                	lw	a5,32(sp)
1c0034d8:	14079463          	bnez	a5,1c003620 <clusterMain+0x71c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034dc:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0034e0:	40472783          	lw	a5,1028(a4)
1c0034e4:	4742                	lw	a4,16(sp)
1c0034e6:	40e7d7b3          	sra	a5,a5,a4
1c0034ea:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0034ee:	be079be3          	bnez	a5,1c0030e4 <clusterMain+0x1e0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0034f2:	00e81733          	sll	a4,a6,a4
1c0034f6:	002047b7          	lui	a5,0x204
1c0034fa:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0034fe:	30069073          	csrw	mstatus,a3
1c003502:	4501                	li	a0,0
1c003504:	9f3ff0ef          	jal	ra,1c002ef6 <pi_cl_team_barrier>
1c003508:	bcad                	j	1c002f82 <clusterMain+0x7e>
        cmd->loc_addr += iter_length;
1c00350a:	00e607b3          	add	a5,a2,a4
1c00350e:	d23e                	sw	a5,36(sp)
        cmd->size -= iter_length;
1c003510:	6789                	lui	a5,0x2
        cmd->ext_addr += stride;
1c003512:	9736                	add	a4,a4,a3
        cmd->size -= iter_length;
1c003514:	c4078793          	addi	a5,a5,-960 # 1c40 <__rt_stack_size+0x1440>
        cmd->ext_addr += stride;
1c003518:	d43a                	sw	a4,40(sp)
        cmd->size -= iter_length;
1c00351a:	cc3e                	sw	a5,24(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00351c:	00204737          	lui	a4,0x204
1c003520:	40072783          	lw	a5,1024(a4) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c003524:	c83e                	sw	a5,16(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003526:	003387b7          	lui	a5,0x338
1c00352a:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00352e:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003532:	40d72023          	sw	a3,1024(a4)
        if (cmd->length != 0)
1c003536:	5782                	lw	a5,32(sp)
1c003538:	cbe1                	beqz	a5,1c003608 <clusterMain+0x704>
            __rt_dma_first_pending = cmd;
1c00353a:	081c                	addi	a5,sp,16
1c00353c:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
    __rt_dma_last_pending = cmd;
1c003540:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c003544:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c003548:	5782                	lw	a5,32(sp)
1c00354a:	eff9                	bnez	a5,1c003628 <clusterMain+0x724>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00354c:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003550:	40472783          	lw	a5,1028(a4)
1c003554:	4742                	lw	a4,16(sp)
                state = THRESHOLDING;
1c003556:	4b89                	li	s7,2
1c003558:	40e7d7b3          	sra	a5,a5,a4
1c00355c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003560:	b80793e3          	bnez	a5,1c0030e6 <clusterMain+0x1e2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003564:	00e51733          	sll	a4,a0,a4
1c003568:	002047b7          	lui	a5,0x204
1c00356c:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003570:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c003574:	4501                	li	a0,0
1c003576:	981ff0ef          	jal	ra,1c002ef6 <pi_cl_team_barrier>
1c00357a:	b4e5                	j	1c003062 <clusterMain+0x15e>
    __rt_dma_last_pending = cmd;
1c00357c:	081c                	addi	a5,sp,16
1c00357e:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c003582:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c003586:	5782                	lw	a5,32(sp)
1c003588:	c395                	beqz	a5,1c0035ac <clusterMain+0x6a8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00358a:	57a2                	lw	a5,40(sp)
                state = DILATING;
1c00358c:	4b91                	li	s7,4
1c00358e:	e60797e3          	bnez	a5,1c0033fc <clusterMain+0x4f8>
1c003592:	bae9                	j	1c002f6c <clusterMain+0x68>
1c003594:	00e81833          	sll	a6,a6,a4
1c003598:	002047b7          	lui	a5,0x204
1c00359c:	4107a223          	sw	a6,1028(a5) # 204404 <__L2+0x184404>
1c0035a0:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c0035a4:	4501                	li	a0,0
1c0035a6:	951ff0ef          	jal	ra,1c002ef6 <pi_cl_team_barrier>
1c0035aa:	bae1                	j	1c002f82 <clusterMain+0x7e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035ac:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0035b0:	40472783          	lw	a5,1028(a4)
1c0035b4:	4742                	lw	a4,16(sp)
                state = DILATING;
1c0035b6:	4b91                	li	s7,4
1c0035b8:	40e7d7b3          	sra	a5,a5,a4
1c0035bc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035c0:	b20793e3          	bnez	a5,1c0030e6 <clusterMain+0x1e2>
1c0035c4:	00e81733          	sll	a4,a6,a4
1c0035c8:	002047b7          	lui	a5,0x204
1c0035cc:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0035d0:	30069073          	csrw	mstatus,a3
        pi_cl_team_barrier(0);
1c0035d4:	4501                	li	a0,0
1c0035d6:	921ff0ef          	jal	ra,1c002ef6 <pi_cl_team_barrier>
1c0035da:	ba59                	j	1c002f70 <clusterMain+0x6c>
    NULL_CHECK(clusterArgs);
1c0035dc:	1c00b537          	lui	a0,0x1c00b
1c0035e0:	c2450513          	addi	a0,a0,-988 # 1c00ac24 <__clz_tab+0x1e8>
1c0035e4:	328060ef          	jal	ra,1c00990c <printf>
1c0035e8:	557d                	li	a0,-1
1c0035ea:	230060ef          	jal	ra,1c00981a <exit>
    __rt_dma_last_pending = cmd;
1c0035ee:	081c                	addi	a5,sp,16
1c0035f0:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0035f4:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c0035f8:	5782                	lw	a5,32(sp)
1c0035fa:	ba0787e3          	beqz	a5,1c0031a8 <clusterMain+0x2a4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0035fe:	57a2                	lw	a5,40(sp)
                state = EDGE_DETECTING;
1c003600:	4b85                	li	s7,1
1c003602:	de079de3          	bnez	a5,1c0033fc <clusterMain+0x4f8>
1c003606:	b139                	j	1c003214 <clusterMain+0x310>
    __rt_dma_last_pending = cmd;
1c003608:	081c                	addi	a5,sp,16
1c00360a:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00360e:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c003612:	5782                	lw	a5,32(sp)
1c003614:	df85                	beqz	a5,1c00354c <clusterMain+0x648>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003616:	57a2                	lw	a5,40(sp)
                state = THRESHOLDING;
1c003618:	4b89                	li	s7,2
1c00361a:	de0791e3          	bnez	a5,1c0033fc <clusterMain+0x4f8>
1c00361e:	b6c9                	j	1c0031e0 <clusterMain+0x2dc>
                state = SEGMENTING;
1c003620:	4b95                	li	s7,5
1c003622:	bbb1                	j	1c00337e <clusterMain+0x47a>
                state = EDGE_DETECTING;
1c003624:	4b85                	li	s7,1
1c003626:	bba1                	j	1c00337e <clusterMain+0x47a>
                state = THRESHOLDING;
1c003628:	4b89                	li	s7,2
1c00362a:	bb91                	j	1c00337e <clusterMain+0x47a>

1c00362c <masterFindGate>:

void masterFindGate(void * args)
{
1c00362c:	87aa                	mv	a5,a0
    PGMImage * restrict originalImage = *((PGMImage **)args);
    PGMImage * restrict outputImage = *((PGMImage **)args + 1);
    pi_cl_dma_cmd_t dmaCopyStatus;
    printf("cluster master start\n");
1c00362e:	1c00b537          	lui	a0,0x1c00b
{
1c003632:	715d                	addi	sp,sp,-80
    printf("cluster master start\n");
1c003634:	d3c50513          	addi	a0,a0,-708 # 1c00ad3c <__clz_tab+0x300>
{
1c003638:	c686                	sw	ra,76(sp)
1c00363a:	c2a6                	sw	s1,68(sp)
1c00363c:	c0ca                	sw	s2,64(sp)
1c00363e:	c4a2                	sw	s0,72(sp)
1c003640:	de4e                	sw	s3,60(sp)
    PGMImage * restrict originalImage = *((PGMImage **)args);
1c003642:	0007a903          	lw	s2,0(a5)
    PGMImage * restrict outputImage = *((PGMImage **)args + 1);
1c003646:	43c4                	lw	s1,4(a5)
    printf("cluster master start\n");
1c003648:	164060ef          	jal	ra,1c0097ac <puts>


    printf("Square Gate Detector running on %d cores, Source %s image[W=%d, H=%d]\n", gap8_ncore(), "Mono", 200, 200);
1c00364c:	1c00b637          	lui	a2,0x1c00b
1c003650:	1c00b537          	lui	a0,0x1c00b
1c003654:	45a1                	li	a1,8
1c003656:	0c800713          	li	a4,200
1c00365a:	0c800693          	li	a3,200
1c00365e:	d5460613          	addi	a2,a2,-684 # 1c00ad54 <__clz_tab+0x318>
1c003662:	d5c50513          	addi	a0,a0,-676 # 1c00ad5c <__clz_tab+0x320>
1c003666:	2a6060ef          	jal	ra,1c00990c <printf>

    /* initial allocation and copy of image to L1 memory */
    PGMImage * inputImage = pmsis_l1_malloc(sizeof(PGMImage));
1c00366a:	4599                	li	a1,6
1c00366c:	4501                	li	a0,0
1c00366e:	2d0030ef          	jal	ra,1c00693e <pi_cl_l1_malloc>
    NULL_CHECK(inputImage);
1c003672:	16050b63          	beqz	a0,1c0037e8 <masterFindGate+0x1bc>
    inputImage->x = originalImage->x;
1c003676:	00094783          	lbu	a5,0(s2)
1c00367a:	842a                	mv	s0,a0
    inputImage->y = originalImage->y;
    inputImage->data = pmsis_l1_malloc(40000*sizeof(uint8_t));
1c00367c:	69a9                	lui	s3,0xa
    inputImage->x = originalImage->x;
1c00367e:	00f50023          	sb	a5,0(a0)
    inputImage->y = originalImage->y;
1c003682:	00194783          	lbu	a5,1(s2)
    inputImage->data = pmsis_l1_malloc(40000*sizeof(uint8_t));
1c003686:	c4098593          	addi	a1,s3,-960 # 9c40 <__rt_stack_size+0x9440>
1c00368a:	4501                	li	a0,0
    inputImage->y = originalImage->y;
1c00368c:	00f400a3          	sb	a5,1(s0)
    inputImage->data = pmsis_l1_malloc(40000*sizeof(uint8_t));
1c003690:	2ae030ef          	jal	ra,1c00693e <pi_cl_l1_malloc>
1c003694:	00a42123          	sw	a0,2(s0)
    NULL_CHECK(inputImage->data);
1c003698:	14050863          	beqz	a0,1c0037e8 <masterFindGate+0x1bc>

    /* copy of first input from L2 to L1 */
    pi_cl_dma_cmd((uint32_t) originalImage->data, (uint32_t) inputImage->data, 40000*sizeof(uint8_t), PI_CL_DMA_DIR_EXT2LOC, &dmaCopyStatus);
1c00369c:	00292703          	lw	a4,2(s2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0036a0:	300476f3          	csrrci	a3,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c0036a4:	003305b7          	lui	a1,0x330
    if (__rt_dma_first_pending)
1c0036a8:	01402603          	lw	a2,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0036ac:	67a1                	lui	a5,0x8
    cmd->size = len;
1c0036ae:	c4098993          	addi	s3,s3,-960
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c0036b2:	ca2e                	sw	a1,20(sp)
    cmd->id = tid;
1c0036b4:	55fd                	li	a1,-1
    cmd->loc_addr = loc;
1c0036b6:	d22a                	sw	a0,36(sp)
    cmd->ext_addr = ext;
1c0036b8:	d43a                	sw	a4,40(sp)
    cmd->size = len;
1c0036ba:	cc4e                	sw	s3,24(sp)
    cmd->stride = stride;
1c0036bc:	ce3e                	sw	a5,28(sp)
    cmd->length = length;
1c0036be:	d03e                	sw	a5,32(sp)
    cmd->id = tid;
1c0036c0:	c82e                	sw	a1,16(sp)
    cmd->next = NULL;
1c0036c2:	d602                	sw	zero,44(sp)
    if (__rt_dma_first_pending)
1c0036c4:	c66d                	beqz	a2,1c0037ae <masterFindGate+0x182>
        __rt_dma_last_pending->next = cmd;
1c0036c6:	01002703          	lw	a4,16(zero) # 10 <__rt_bridge_flash_cs>
1c0036ca:	081c                	addi	a5,sp,16
1c0036cc:	cf5c                	sw	a5,28(a4)
    __rt_dma_last_pending = cmd;
1c0036ce:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
  __builtin_pulp_spr_write(reg, val);
1c0036d2:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0036d6:	5782                	lw	a5,32(sp)
1c0036d8:	efc5                	bnez	a5,1c003790 <masterFindGate+0x164>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0036da:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0036de:	002047b7          	lui	a5,0x204
1c0036e2:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0036e6:	46c2                	lw	a3,16(sp)
1c0036e8:	40d7d7b3          	sra	a5,a5,a3
1c0036ec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0036f0:	c79d                	beqz	a5,1c00371e <masterFindGate+0xf2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0036f2:	10000593          	li	a1,256
1c0036f6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0036fa:	30061073          	csrw	mstatus,a2
1c0036fe:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003702:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003706:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00370a:	30047673          	csrrci	a2,mstatus,8
1c00370e:	40472783          	lw	a5,1028(a4)
1c003712:	46c2                	lw	a3,16(sp)
1c003714:	40d7d7b3          	sra	a5,a5,a3
1c003718:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00371c:	fff9                	bnez	a5,1c0036fa <masterFindGate+0xce>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00371e:	4785                	li	a5,1
1c003720:	00d796b3          	sll	a3,a5,a3
1c003724:	002047b7          	lui	a5,0x204
1c003728:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00372c:	30061073          	csrw	mstatus,a2
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003730:	0ff00713          	li	a4,255
1c003734:	002047b7          	lui	a5,0x204
    /* wait for transfer to end */
    pi_cl_dma_cmd_wait(&dmaCopyStatus);

    /* cluster call arguments */
    PGMImage * forkArgs[3];
    forkArgs[0] = originalImage;
1c003738:	c24a                	sw	s2,4(sp)
    forkArgs[1] = outputImage;
1c00373a:	c426                	sw	s1,8(sp)
    forkArgs[2] = inputImage;
1c00373c:	c622                	sw	s0,12(sp)
1c00373e:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003742:	20078493          	addi	s1,a5,512
1c003746:	00e4a023          	sw	a4,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00374a:	00e4a623          	sw	a4,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00374e:	1c003737          	lui	a4,0x1c003
1c003752:	f0470713          	addi	a4,a4,-252 # 1c002f04 <clusterMain>
1c003756:	08e7a023          	sw	a4,128(a5)
1c00375a:	0048                	addi	a0,sp,4
1c00375c:	08a7a023          	sw	a0,128(a5)
  entry(arg);
1c003760:	fa4ff0ef          	jal	ra,1c002f04 <clusterMain>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003764:	01c4e783          	p.elw	a5,28(s1)

    // Start Square Gate Detector on core 0, which will dispatch the algorithm to the other cores.
    pi_cl_team_fork(gap8_ncore(),(void *)clusterMain, forkArgs);

    pmsis_l1_malloc_free(inputImage->data, 40000*sizeof(uint8_t));
1c003768:	6629                	lui	a2,0xa
1c00376a:	00242583          	lw	a1,2(s0)
1c00376e:	c4060613          	addi	a2,a2,-960 # 9c40 <__rt_stack_size+0x9440>
1c003772:	4501                	li	a0,0
1c003774:	1d0030ef          	jal	ra,1c006944 <pi_cl_l1_free>
    pmsis_l1_malloc_free(inputImage, sizeof(PGMImage));
1c003778:	85a2                	mv	a1,s0
1c00377a:	4619                	li	a2,6
1c00377c:	4501                	li	a0,0
1c00377e:	1c6030ef          	jal	ra,1c006944 <pi_cl_l1_free>

}
1c003782:	40b6                	lw	ra,76(sp)
1c003784:	4426                	lw	s0,72(sp)
1c003786:	4496                	lw	s1,68(sp)
1c003788:	4906                	lw	s2,64(sp)
1c00378a:	59f2                	lw	s3,60(sp)
1c00378c:	6161                	addi	sp,sp,80
1c00378e:	8082                	ret
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003790:	56a2                	lw	a3,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003792:	02000713          	li	a4,32
1c003796:	002047b7          	lui	a5,0x204
1c00379a:	dad9                	beqz	a3,1c003730 <masterFindGate+0x104>
1c00379c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0037a0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0037a4:	00e7a223          	sw	a4,4(a5)
1c0037a8:	56a2                	lw	a3,40(sp)
1c0037aa:	faed                	bnez	a3,1c00379c <masterFindGate+0x170>
1c0037ac:	b751                	j	1c003730 <masterFindGate+0x104>
        cmd->loc_addr += iter_length;
1c0037ae:	00f50633          	add	a2,a0,a5
        cmd->ext_addr += stride;
1c0037b2:	97ba                	add	a5,a5,a4
1c0037b4:	d43e                	sw	a5,40(sp)
        cmd->size -= iter_length;
1c0037b6:	6789                	lui	a5,0x2
1c0037b8:	c4078793          	addi	a5,a5,-960 # 1c40 <__rt_stack_size+0x1440>
        cmd->loc_addr += iter_length;
1c0037bc:	d232                	sw	a2,36(sp)
        cmd->size -= iter_length;
1c0037be:	cc3e                	sw	a5,24(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0037c0:	002047b7          	lui	a5,0x204
1c0037c4:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c0037c8:	c832                	sw	a2,16(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0037ca:	00338637          	lui	a2,0x338
1c0037ce:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0037d2:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0037d6:	40e7a023          	sw	a4,1024(a5)
        if (cmd->length != 0)
1c0037da:	5702                	lw	a4,32(sp)
1c0037dc:	081c                	addi	a5,sp,16
1c0037de:	ee0708e3          	beqz	a4,1c0036ce <masterFindGate+0xa2>
            __rt_dma_first_pending = cmd;
1c0037e2:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0037e6:	b5e5                	j	1c0036ce <masterFindGate+0xa2>
    NULL_CHECK(inputImage);
1c0037e8:	1c00b537          	lui	a0,0x1c00b
1c0037ec:	c2450513          	addi	a0,a0,-988 # 1c00ac24 <__clz_tab+0x1e8>
1c0037f0:	11c060ef          	jal	ra,1c00990c <printf>
1c0037f4:	557d                	li	a0,-1
1c0037f6:	024060ef          	jal	ra,1c00981a <exit>

1c0037fa <cl_vectorial_gaussianFilter>:
#define ABS(x) (x>0?x:(-x))
#define MAX(x, y) (x>y?x:y)
#define MIN(x, y) (x>y?y:x)

void __attribute__((noinline)) cl_vectorial_gaussianFilter(void * args)
{
1c0037fa:	715d                	addi	sp,sp,-80
1c0037fc:	c6a2                	sw	s0,76(sp)
    v4u   pixelVector0, pixelVector1, pixelVector2,
          pixelVector3, pixelVector4, pixelVector5;

    uint8_t coreId = pi_core_id();
    clusterCallArgs * realArgs = (clusterCallArgs *)args;
    PGMImage * restrict img = realArgs->inputImage;
1c0037fe:	4100                	lw	s0,0(a0)
{
1c003800:	c4a6                	sw	s1,72(sp)
1c003802:	dc56                	sw	s5,56(sp)
1c003804:	c2ca                	sw	s2,68(sp)
1c003806:	c0ce                	sw	s3,64(sp)
1c003808:	de52                	sw	s4,60(sp)
1c00380a:	da5a                	sw	s6,52(sp)
1c00380c:	d85e                	sw	s7,48(sp)
1c00380e:	d662                	sw	s8,44(sp)
1c003810:	d466                	sw	s9,40(sp)
1c003812:	d26a                	sw	s10,36(sp)
1c003814:	d06e                	sw	s11,32(sp)
    uint16_t pixelIndex, line;

    /* loop variables */
    uint8_t x, y;
    uint32_t convolutedPixel;
    uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c003816:	00854703          	lbu	a4,8(a0)
    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c00381a:	00144683          	lbu	a3,1(s0)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00381e:	01402f73          	csrr	t5,uhartid
  return hart_id & 0x01f;
1c003822:	f45f3f33          	p.bclr	t5,t5,26,5
    uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c003826:	00e687b3          	add	a5,a3,a4
1c00382a:	17fd                	addi	a5,a5,-1
1c00382c:	02e7c7b3          	div	a5,a5,a4
    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c003830:	00044b83          	lbu	s7,0(s0)
    PGMImage * restrict convolutedImg = realArgs->outputImage;
1c003834:	4144                	lw	s1,4(a0)
    uint8_t beginning = coreId*linesPerCore;
    uint8_t end = MIN(beginning + linesPerCore, imageHeight);

    for(y = beginning, line = beginning * imageWidth; y < end; ++y, line += imageWidth)
1c003836:	100bd333          	p.exthz	t1,s7
1c00383a:	cc1a                	sw	t1,24(sp)
    uint8_t beginning = coreId*linesPerCore;
1c00383c:	00ff0f5b          	p.mac	t5,t5,a5,zero
    uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c003840:	ee87b7b3          	p.bclr	a5,a5,23,8
    uint8_t beginning = coreId*linesPerCore;
1c003844:	0fff7f13          	andi	t5,t5,255
    uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c003848:	97fa                	add	a5,a5,t5
1c00384a:	04d7c7b3          	p.min	a5,a5,a3
1c00384e:	0ff7f793          	andi	a5,a5,255
    for(y = beginning, line = beginning * imageWidth; y < end; ++y, line += imageWidth)
1c003852:	026f0ab3          	mul	s5,t5,t1
1c003856:	14ff7263          	bleu	a5,t5,1c00399a <cl_vectorial_gaussianFilter+0x1a0>
            if(x <= 1 || y <= 1 || x >= imageWidth -2 || y >= imageHeight -2)
                convolutedImg->data[pixelIndex] = img->data[pixelIndex];
            else
            {
                /* address of the first pixel under the gaussian filter mask */
                pixelVectorRetriever = (v4u *)(img->data + pixelIndex - (imageWidth << 1) - 2);
1c00385a:	001b9d13          	slli	s10,s7,0x1

                /* copy 4 pixels into the vector and point pixelVectorRetriever to the next row */
                pixelVector0 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
1c00385e:	0fcbfc93          	andi	s9,s7,252
1c003862:	002d0d93          	addi	s11,s10,2
1c003866:	120b8a63          	beqz	s7,1c00399a <cl_vectorial_gaussianFilter+0x1a0>
1c00386a:	ffe68993          	addi	s3,a3,-2
                pixelVector1 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
                pixelVector2 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
                pixelVector3 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
                pixelVector4 = *pixelVectorRetriever;
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
                                *(img->data + pixelIndex - (imageWidth)      + 2), /* pixel under */
1c00386e:	4689                	li	a3,2
1c003870:	417686b3          	sub	a3,a3,s7
                convolutedPixel = gap8_sumdotpu4(pixelVector3, gaussianMask1, convolutedPixel);
                convolutedPixel = gap8_sumdotpu4(pixelVector4, gaussianMask0, convolutedPixel);
                convolutedPixel = gap8_sumdotpu4(pixelVector5, gaussianMask0, convolutedPixel);
                convolutedPixel += ((*(img->data + pixelIndex + (imageWidth << 1)      + 2))<<1);

                convolutedImg->data[pixelIndex] = (convolutedPixel*normFactor)>>15;
1c003874:	ffff4713          	not	a4,t5
1c003878:	973e                	add	a4,a4,a5
1c00387a:	001f0613          	addi	a2,t5,1
                                *(img->data + pixelIndex - (imageWidth)      + 2), /* pixel under */
1c00387e:	ce36                	sw	a3,28(sp)
                convolutedPixel = gap8_dotpu4(pixelVector0, gaussianMask0);
1c003880:	1c00b6b7          	lui	a3,0x1c00b
                convolutedImg->data[pixelIndex] = (convolutedPixel*normFactor)>>15;
1c003884:	0ff77713          	andi	a4,a4,255
                convolutedPixel = gap8_dotpu4(pixelVector0, gaussianMask0);
1c003888:	da46a883          	lw	a7,-604(a3) # 1c00ada4 <__clz_tab+0x368>
1c00388c:	10066633          	p.extbs	a2,a2
                convolutedPixel = gap8_sumdotpu4(pixelVector1, gaussianMask1, convolutedPixel);
1c003890:	1c00b6b7          	lui	a3,0x1c00b
1c003894:	1007e7b3          	p.extbs	a5,a5
1c003898:	0fff7f93          	andi	t6,t5,255
            if(x <= 1 || y <= 1 || x >= imageWidth -2 || y >= imageHeight -2)
1c00389c:	4805                	li	a6,1
1c00389e:	ffeb8b13          	addi	s6,s7,-2
                convolutedPixel = gap8_sumdotpu4(pixelVector1, gaussianMask1, convolutedPixel);
1c0038a2:	da86ae83          	lw	t4,-600(a3) # 1c00ada8 <__clz_tab+0x36c>
                convolutedImg->data[pixelIndex] = (convolutedPixel*normFactor)>>15;
1c0038a6:	00170913          	addi	s2,a4,1
1c0038aa:	10c7ee63          	bltu	a5,a2,1c0039c6 <cl_vectorial_gaussianFilter+0x1cc>
1c0038ae:	8a4a                	mv	s4,s2
1c0038b0:	896a                	mv	s2,s10
1c0038b2:	10078a63          	beqz	a5,1c0039c6 <cl_vectorial_gaussianFilter+0x1cc>
        for(x = 0, pixelIndex = line; x < imageWidth; ++x, ++pixelIndex)
1c0038b6:	fffb8613          	addi	a2,s7,-1
1c0038ba:	0ff67613          	andi	a2,a2,255
            if(x <= 1 || y <= 1 || x >= imageWidth -2 || y >= imageHeight -2)
1c0038be:	87d6                	mv	a5,s5
1c0038c0:	4581                	li	a1,0
        for(x = 0, pixelIndex = line; x < imageWidth; ++x, ++pixelIndex)
1c0038c2:	4701                	li	a4,0
1c0038c4:	0605                	addi	a2,a2,1
1c0038c6:	c656                	sw	s5,12(sp)
1c0038c8:	c452                	sw	s4,8(sp)
1c0038ca:	05a640fb          	lp.setup	x1,a2,1c00397e <cl_vectorial_gaussianFilter+0x184>
1c0038ce:	00242683          	lw	a3,2(s0)
            if(x <= 1 || y <= 1 || x >= imageWidth -2 || y >= imageHeight -2)
1c0038d2:	0ee87263          	bleu	a4,a6,1c0039b6 <cl_vectorial_gaussianFilter+0x1bc>
1c0038d6:	0ff87063          	bleu	t6,a6,1c0039b6 <cl_vectorial_gaussianFilter+0x1bc>
1c0038da:	0d65de63          	ble	s6,a1,1c0039b6 <cl_vectorial_gaussianFilter+0x1bc>
                pixelVectorRetriever = (v4u *)(img->data + pixelIndex - (imageWidth << 1) - 2);
1c0038de:	41278333          	sub	t1,a5,s2
1c0038e2:	ffe30393          	addi	t2,t1,-2
1c0038e6:	93b6                	add	t2,t2,a3
                                *(img->data + pixelIndex + (imageWidth)      + 2)}; /* pixel under */
1c0038e8:	017682b3          	add	t0,a3,s7
                convolutedPixel += ((*(img->data + pixelIndex + (imageWidth << 1)      + 2))<<1);
1c0038ec:	01b68e33          	add	t3,a3,s11
                pixelVector1 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
1c0038f0:	01938533          	add	a0,t2,s9
                                *(img->data + pixelIndex - (imageWidth)      + 2), /* pixel under */
1c0038f4:	00f68c33          	add	s8,a3,a5
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c0038f8:	9336                	add	t1,t1,a3
                                *(img->data + pixelIndex + (imageWidth)      + 2)}; /* pixel under */
1c0038fa:	92be                	add	t0,t0,a5
                convolutedPixel += ((*(img->data + pixelIndex + (imageWidth << 1)      + 2))<<1);
1c0038fc:	9e3e                	add	t3,t3,a5
            if(x <= 1 || y <= 1 || x >= imageWidth -2 || y >= imageHeight -2)
1c0038fe:	0b3f5c63          	ble	s3,t5,1c0039b6 <cl_vectorial_gaussianFilter+0x1bc>
                pixelVector1 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
1c003902:	21957a8b          	p.lw	s5,s9(a0!)
                convolutedPixel = gap8_dotpu4(pixelVector0, gaussianMask0);
1c003906:	0003a683          	lw	a3,0(t2)
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c00390a:	4a72                	lw	s4,28(sp)
                pixelVector2 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
1c00390c:	2195738b          	p.lw	t2,s9(a0!)
                convolutedPixel = gap8_dotpu4(pixelVector0, gaussianMask0);
1c003910:	811696d7          	pv.dotup.b	a3,a3,a7
                convolutedPixel = gap8_sumdotpu4(pixelVector1, gaussianMask1, convolutedPixel);
1c003914:	a1da96d7          	pv.sdotup.b	a3,s5,t4
                convolutedPixel = gap8_sumdotpu4(pixelVector2, gaussianMask2, convolutedPixel);
1c003918:	1c00bab7          	lui	s5,0x1c00b
                pixelVector2 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
1c00391c:	ca1e                	sw	t2,20(sp)
                convolutedPixel = gap8_sumdotpu4(pixelVector2, gaussianMask2, convolutedPixel);
1c00391e:	daca8a93          	addi	s5,s5,-596 # 1c00adac <__clz_tab+0x370>
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c003922:	00234d03          	lbu	s10,2(t1)
                convolutedPixel = gap8_sumdotpu4(pixelVector2, gaussianMask2, convolutedPixel);
1c003926:	000aaa83          	lw	s5,0(s5)
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c00392a:	414c7303          	p.lbu	t1,s4(s8)
                convolutedPixel = gap8_sumdotpu4(pixelVector2, gaussianMask2, convolutedPixel);
1c00392e:	4a52                	lw	s4,20(sp)
                pixelVector3 = *pixelVectorRetriever; pixelVectorRetriever += (imageWidth>>2);
1c003930:	00052383          	lw	t2,0(a0)
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c003934:	002c4c03          	lbu	s8,2(s8)
                pixelVector4 = *pixelVectorRetriever;
1c003938:	21957503          	p.lw	a0,s9(a0)
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c00393c:	0022c283          	lbu	t0,2(t0)
                convolutedPixel += ((*(img->data + pixelIndex + (imageWidth << 1)      + 2))<<1);
1c003940:	000e4e03          	lbu	t3,0(t3)
                convolutedPixel = gap8_sumdotpu4(pixelVector2, gaussianMask2, convolutedPixel);
1c003944:	a15a16d7          	pv.sdotup.b	a3,s4,s5
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c003948:	e1a31357          	pv.packlo.b	t1,t1,s10
                convolutedPixel = gap8_sumdotpu4(pixelVector3, gaussianMask1, convolutedPixel);
1c00394c:	a1d396d7          	pv.sdotup.b	a3,t2,t4
                pixelVector5 = (v4u){*(img->data + pixelIndex - (imageWidth << 1) + 2), /* upper-right */
1c003950:	d9829357          	pv.packhi.b	t1,t0,s8
                convolutedPixel = gap8_sumdotpu4(pixelVector4, gaussianMask0, convolutedPixel);
1c003954:	a11516d7          	pv.sdotup.b	a3,a0,a7
                convolutedPixel = gap8_sumdotpu4(pixelVector5, gaussianMask0, convolutedPixel);
1c003958:	a11316d7          	pv.sdotup.b	a3,t1,a7
                convolutedPixel += ((*(img->data + pixelIndex + (imageWidth << 1)      + 2))<<1);
1c00395c:	0e06                	slli	t3,t3,0x1
1c00395e:	96f2                	add	a3,a3,t3
                convolutedImg->data[pixelIndex] = (convolutedPixel*normFactor)>>15;
1c003960:	0ce00313          	li	t1,206
1c003964:	026686b3          	mul	a3,a3,t1
1c003968:	0024a503          	lw	a0,2(s1)
1c00396c:	82bd                	srli	a3,a3,0xf
1c00396e:	00d547a3          	p.sb	a3,a5(a0)
        for(x = 0, pixelIndex = line; x < imageWidth; ++x, ++pixelIndex)
1c003972:	0705                	addi	a4,a4,1
1c003974:	0785                	addi	a5,a5,1
1c003976:	0ff77713          	andi	a4,a4,255
1c00397a:	1007d7b3          	p.exthz	a5,a5
1c00397e:	0585                	addi	a1,a1,1
1c003980:	47a2                	lw	a5,8(sp)
1c003982:	4ab2                	lw	s5,12(sp)
    for(y = beginning, line = beginning * imageWidth; y < end; ++y, line += imageWidth)
1c003984:	43e2                	lw	t2,24(sp)
1c003986:	0f05                	addi	t5,t5,1
1c003988:	8a3e                	mv	s4,a5
1c00398a:	9a9e                	add	s5,s5,t2
1c00398c:	100adab3          	p.exthz	s5,s5
1c003990:	0fff7f93          	andi	t6,t5,255
1c003994:	1a7d                	addi	s4,s4,-1
1c003996:	f20a10e3          	bnez	s4,1c0038b6 <cl_vectorial_gaussianFilter+0xbc>

            }
}
1c00399a:	4436                	lw	s0,76(sp)
1c00399c:	44a6                	lw	s1,72(sp)
1c00399e:	4916                	lw	s2,68(sp)
1c0039a0:	4986                	lw	s3,64(sp)
1c0039a2:	5a72                	lw	s4,60(sp)
1c0039a4:	5ae2                	lw	s5,56(sp)
1c0039a6:	5b52                	lw	s6,52(sp)
1c0039a8:	5bc2                	lw	s7,48(sp)
1c0039aa:	5c32                	lw	s8,44(sp)
1c0039ac:	5ca2                	lw	s9,40(sp)
1c0039ae:	5d12                	lw	s10,36(sp)
1c0039b0:	5d82                	lw	s11,32(sp)
1c0039b2:	6161                	addi	sp,sp,80
1c0039b4:	8082                	ret
                convolutedImg->data[pixelIndex] = img->data[pixelIndex];
1c0039b6:	96be                	add	a3,a3,a5
1c0039b8:	0024a503          	lw	a0,2(s1)
1c0039bc:	0006c683          	lbu	a3,0(a3)
1c0039c0:	00d547a3          	p.sb	a3,a5(a0)
1c0039c4:	b77d                	j	1c003972 <cl_vectorial_gaussianFilter+0x178>
1c0039c6:	4905                	li	s2,1
1c0039c8:	8a4a                	mv	s4,s2
1c0039ca:	896a                	mv	s2,s10
1c0039cc:	b5ed                	j	1c0038b6 <cl_vectorial_gaussianFilter+0xbc>

1c0039ce <pi_cl_team_barrier>:
    uint16_t pixelNeighbours[8];

    for(y = beginning, line = beginning * imageWidth ; y < end ; ++y, line += imageWidth)
        for(x = 0, pixelIndex = line ; x < imageWidth ; ++x, ++pixelIndex)
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
                sobelImg->data[pixelIndex] = MIN_PIXEL_VALUE;
1c0039ce:	002047b7          	lui	a5,0x204
1c0039d2:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0039d6:	01c7e703          	p.elw	a4,28(a5)
1c0039da:	8082                	ret

1c0039dc <cl_cannyOperator>:

            }
}

void __attribute__((noinline)) cl_cannyOperator(void * args)
{
1c0039dc:	7125                	addi	sp,sp,-416
1c0039de:	17712e23          	sw	s7,380(sp)
    const uint8_t coreId = pi_core_id();
    clusterCallArgs * restrict realArgs = (clusterCallArgs *)args;
    PGMImage * restrict img = realArgs->inputImage;
1c0039e2:	00052b83          	lw	s7,0(a0)
{
1c0039e6:	18912a23          	sw	s1,404(sp)
1c0039ea:	19312623          	sw	s3,396(sp)
1c0039ee:	19412423          	sw	s4,392(sp)
1c0039f2:	18112e23          	sw	ra,412(sp)
1c0039f6:	18812c23          	sw	s0,408(sp)
1c0039fa:	19212823          	sw	s2,400(sp)
1c0039fe:	19512223          	sw	s5,388(sp)
1c003a02:	19612023          	sw	s6,384(sp)
1c003a06:	17812c23          	sw	s8,376(sp)
1c003a0a:	17912a23          	sw	s9,372(sp)
1c003a0e:	17a12823          	sw	s10,368(sp)
1c003a12:	17b12623          	sw	s11,364(sp)

    const uint8_t imageWidth = img->x, imageHeight = img->y;

    /* loop variables */
    uint16_t maxGradient, minGradient, sqrtApprox;
    const uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c003a16:	00854683          	lbu	a3,8(a0)
    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c003a1a:	001bc603          	lbu	a2,1(s7)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c003a1e:	01402773          	csrr	a4,uhartid
  return hart_id & 0x01f;
1c003a22:	f4573733          	p.bclr	a4,a4,26,5
    const uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c003a26:	00d607b3          	add	a5,a2,a3
1c003a2a:	17fd                	addi	a5,a5,-1
1c003a2c:	02d7c7b3          	div	a5,a5,a3
    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c003a30:	000bc403          	lbu	s0,0(s7)
1c003a34:	d63a                	sw	a4,44(sp)
    PGMImage * restrict cannyImg = realArgs->outputImage;
1c003a36:	00452a03          	lw	s4,4(a0)
    uint16_t absYGradient;

    pi_cl_alloc_req_t alloc_req;
    pi_cl_free_req_t free_req;
    /* vector that will store the angle of each edge */
    pi_cl_l2_malloc((linesPerCore * imageWidth)*sizeof(angle_t), &alloc_req);
1c003a3a:	186c                	addi	a1,sp,60
    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c003a3c:	d232                	sw	a2,36(sp)
    const uint16_t firstLine = beginning * imageWidth;
1c003a3e:	100459b3          	p.exthz	s3,s0
    const uint8_t beginning = coreId*linesPerCore;
1c003a42:	00f7075b          	p.mac	a4,a4,a5,zero
1c003a46:	ee87b7b3          	p.bclr	a5,a5,23,8
    pi_cl_l2_malloc((linesPerCore * imageWidth)*sizeof(angle_t), &alloc_req);
1c003a4a:	02f406b3          	mul	a3,s0,a5
    const uint8_t beginning = coreId*linesPerCore;
1c003a4e:	0ff77713          	andi	a4,a4,255
    const uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c003a52:	97ba                	add	a5,a5,a4
1c003a54:	04c7c7b3          	p.min	a5,a5,a2
1c003a58:	0ff7f793          	andi	a5,a5,255
    const uint8_t beginning = coreId*linesPerCore;
1c003a5c:	cc3a                	sw	a4,24(sp)
    const uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c003a5e:	ce3e                	sw	a5,28(sp)
    pi_cl_l2_malloc((linesPerCore * imageWidth)*sizeof(angle_t), &alloc_req);
1c003a60:	8536                	mv	a0,a3
1c003a62:	d436                	sw	a3,40(sp)
1c003a64:	6c9020ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
#include "pmsis/cluster/dma/cl_dma.h"
#include "pmsis/cluster/cl_malloc.h"

static inline void *rt_alloc_cluster_wait(pi_cl_alloc_req_t *req)
{
  while((*(volatile char *)&req->done) == 0)
1c003a68:	0c814783          	lbu	a5,200(sp)
    const uint16_t firstLine = beginning * imageWidth;
1c003a6c:	4762                	lw	a4,24(sp)
1c003a6e:	0ff7f793          	andi	a5,a5,255
1c003a72:	033704b3          	mul	s1,a4,s3
1c003a76:	ef99                	bnez	a5,1c003a94 <cl_cannyOperator+0xb8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003a78:	4689                	li	a3,2
1c003a7a:	00204737          	lui	a4,0x204
1c003a7e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a82:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003a86:	00d72223          	sw	a3,4(a4)
1c003a8a:	0c814783          	lbu	a5,200(sp)
1c003a8e:	0ff7f793          	andi	a5,a5,255
1c003a92:	d7f5                	beqz	a5,1c003a7e <cl_cannyOperator+0xa2>
    angle_t * edgeDirection = pi_cl_l2_malloc_wait(&alloc_req);

    /** Section 1:
      * Edge detection
    **/
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
1c003a94:	47e2                	lw	a5,24(sp)
1c003a96:	4872                	lw	a6,28(sp)
  {
    eu_evt_maskWaitAndClr(1<<RT_CLUSTER_CALL_EVT);
  }
  return req->result;
1c003a98:	5972                	lw	s2,60(sp)
1c003a9a:	4707fc63          	bleu	a6,a5,1c003f12 <cl_cannyOperator+0x536>
1c003a9e:	18040f63          	beqz	s0,1c003c3c <cl_cannyOperator+0x260>
1c003aa2:	5612                	lw	a2,36(sp)
                {
                    cannyImg->data[pixelIndex] = MIN(sqrtApprox, MAX_PIXEL_VALUE);

                    /* finding pixel gradient direction */
                    if((absYGradient << 1) <= absXGradient)
                        edgeDirection[pixelIndex - firstLine] = ZERO_DEGREES;
1c003aa4:	fff7c693          	not	a3,a5
1c003aa8:	96c2                	add	a3,a3,a6
1c003aaa:	0ff6f693          	andi	a3,a3,255
1c003aae:	fff60a93          	addi	s5,a2,-1 # 337fff <__L2+0x2b7fff>
                xGradient  = -img->data[pixelNeighbours[0]];
1c003ab2:	5679                	li	a2,-2
1c003ab4:	80be                	mv	ra,a5
1c003ab6:	41360633          	sub	a2,a2,s3
1c003aba:	0785                	addi	a5,a5,1
1c003abc:	10086733          	p.extbs	a4,a6
                        edgeDirection[pixelIndex - firstLine] = ZERO_DEGREES;
1c003ac0:	0685                	addi	a3,a3,1
                xGradient -= img->data[pixelNeighbours[2]];
1c003ac2:	ffe98813          	addi	a6,s3,-2
                xGradient  = -img->data[pixelNeighbours[0]];
1c003ac6:	c832                	sw	a2,16(sp)
1c003ac8:	1007e7b3          	p.extbs	a5,a5
                xGradient -= img->data[pixelNeighbours[2]];
1c003acc:	ca42                	sw	a6,20(sp)
                        edgeDirection[pixelIndex - firstLine] = ZERO_DEGREES;
1c003ace:	c636                	sw	a3,12(sp)
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
1c003ad0:	8c26                	mv	s8,s1
1c003ad2:	0ff0f393          	andi	t2,ra,255
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
1c003ad6:	fff40b13          	addi	s6,s0,-1
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003ada:	fff9c613          	not	a2,s3
                yGradient -= (img->data[pixelNeighbours[3]] << 1);
1c003ade:	fff98c93          	addi	s9,s3,-1
                if(sqrtApprox >= MIN_EDGE_INTENSITY_CANNY)
1c003ae2:	06300d13          	li	s10,99
1c003ae6:	46f76e63          	bltu	a4,a5,1c003f62 <cl_cannyOperator+0x586>
1c003aea:	46070c63          	beqz	a4,1c003f62 <cl_cannyOperator+0x586>
1c003aee:	46f2                	lw	a3,28(sp)
1c003af0:	4606c963          	bltz	a3,1c003f62 <cl_cannyOperator+0x586>
1c003af4:	d022                	sw	s0,32(sp)
1c003af6:	8432                	mv	s0,a2
        for(x = 0, pixelIndex = line ; x < imageWidth ; ++x, ++pixelIndex)
1c003af8:	5702                	lw	a4,32(sp)
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
1c003afa:	8562                	mv	a0,s8
1c003afc:	4281                	li	t0,0
        for(x = 0, pixelIndex = line ; x < imageWidth ; ++x, ++pixelIndex)
1c003afe:	fff70f93          	addi	t6,a4,-1
1c003b02:	0fffff93          	andi	t6,t6,255
1c003b06:	4e81                	li	t4,0
1c003b08:	0f85                	addi	t6,t6,1
1c003b0a:	08cfc0fb          	lp.setup	x1,t6,1c003c22 <cl_cannyOperator+0x246>
1c003b0e:	002a2603          	lw	a2,2(s4)
1c003b12:	00150793          	addi	a5,a0,1
1c003b16:	409506b3          	sub	a3,a0,s1
1c003b1a:	1007d7b3          	p.exthz	a5,a5
1c003b1e:	96ca                	add	a3,a3,s2
1c003b20:	962a                	add	a2,a2,a0
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
1c003b22:	240e8963          	beqz	t4,1c003d74 <cl_cannyOperator+0x398>
1c003b26:	24038763          	beqz	t2,1c003d74 <cl_cannyOperator+0x398>
1c003b2a:	245b0563          	beq	s6,t0,1c003d74 <cl_cannyOperator+0x398>
1c003b2e:	241a8363          	beq	s5,ra,1c003d74 <cl_cannyOperator+0x398>
                xGradient  = -img->data[pixelNeighbours[0]];
1c003b32:	4842                	lw	a6,16(sp)
                xGradient -= img->data[pixelNeighbours[2]];
1c003b34:	4752                	lw	a4,20(sp)
                xGradient  = -img->data[pixelNeighbours[0]];
1c003b36:	002ba583          	lw	a1,2(s7)
                xGradient += img->data[pixelNeighbours[4]];
1c003b3a:	00f98333          	add	t1,s3,a5
                xGradient += img->data[pixelNeighbours[6]];
1c003b3e:	413788b3          	sub	a7,a5,s3
                xGradient  = -img->data[pixelNeighbours[0]];
1c003b42:	01078f33          	add	t5,a5,a6
                xGradient -= img->data[pixelNeighbours[2]];
1c003b46:	00e78e33          	add	t3,a5,a4
                xGradient += img->data[pixelNeighbours[4]];
1c003b4a:	10035333          	p.exthz	t1,t1
                pixelNeighbours[1] = pixelIndex - 1;              /* left */
1c003b4e:	fff50713          	addi	a4,a0,-1
                xGradient += img->data[pixelNeighbours[6]];
1c003b52:	1008d8b3          	p.exthz	a7,a7
                xGradient += img->data[pixelNeighbours[4]];
1c003b56:	932e                	add	t1,t1,a1
                xGradient += (img->data[pixelNeighbours[5]] << 1);
1c003b58:	00f58533          	add	a0,a1,a5
                xGradient += img->data[pixelNeighbours[6]];
1c003b5c:	98ae                	add	a7,a7,a1
                xGradient  = -img->data[pixelNeighbours[0]];
1c003b5e:	100f5f33          	p.exthz	t5,t5
                xGradient -= img->data[pixelNeighbours[2]];
1c003b62:	100e5e33          	p.exthz	t3,t3
                xGradient -= (img->data[pixelNeighbours[1]] << 1); /* one left shift == multiplication by 2 */
1c003b66:	10075733          	p.exthz	a4,a4
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003b6a:	00878833          	add	a6,a5,s0
                xGradient += img->data[pixelNeighbours[4]];
1c003b6e:	00034d83          	lbu	s11,0(t1)
                xGradient += img->data[pixelNeighbours[6]];
1c003b72:	0008c883          	lbu	a7,0(a7)
                xGradient  = -img->data[pixelNeighbours[0]];
1c003b76:	9f2e                	add	t5,t5,a1
                xGradient -= img->data[pixelNeighbours[2]];
1c003b78:	9e2e                	add	t3,t3,a1
                xGradient += (img->data[pixelNeighbours[5]] << 1);
1c003b7a:	00054303          	lbu	t1,0(a0)
                xGradient -= (img->data[pixelNeighbours[1]] << 1); /* one left shift == multiplication by 2 */
1c003b7e:	972e                	add	a4,a4,a1
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003b80:	10085833          	p.exthz	a6,a6
                yGradient -= (img->data[pixelNeighbours[3]] << 1);
1c003b84:	01978533          	add	a0,a5,s9
                xGradient  = -img->data[pixelNeighbours[0]];
1c003b88:	000f4f03          	lbu	t5,0(t5)
                xGradient -= img->data[pixelNeighbours[2]];
1c003b8c:	000e4e03          	lbu	t3,0(t3)
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003b90:	982e                	add	a6,a6,a1
                xGradient -= (img->data[pixelNeighbours[1]] << 1); /* one left shift == multiplication by 2 */
1c003b92:	00074703          	lbu	a4,0(a4)
                yGradient -= (img->data[pixelNeighbours[3]] << 1);
1c003b96:	10055533          	p.exthz	a0,a0
1c003b9a:	952e                	add	a0,a0,a1
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003b9c:	00084803          	lbu	a6,0(a6)
                xGradient += img->data[pixelNeighbours[6]];
1c003ba0:	011d85b3          	add	a1,s11,a7
                xGradient += (img->data[pixelNeighbours[5]] << 1);
1c003ba4:	0306                	slli	t1,t1,0x1
                yGradient -= (img->data[pixelNeighbours[3]] << 1);
1c003ba6:	00054503          	lbu	a0,0(a0)
                xGradient += img->data[pixelNeighbours[6]];
1c003baa:	932e                	add	t1,t1,a1
                xGradient -= (img->data[pixelNeighbours[1]] << 1); /* one left shift == multiplication by 2 */
1c003bac:	0706                	slli	a4,a4,0x1
                yGradient -= img->data[pixelNeighbours[2]];
1c003bae:	41cf05b3          	sub	a1,t5,t3
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003bb2:	41b888b3          	sub	a7,a7,s11
                xGradient += img->data[pixelNeighbours[6]];
1c003bb6:	40e30333          	sub	t1,t1,a4
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003bba:	0806                	slli	a6,a6,0x1
1c003bbc:	98ae                	add	a7,a7,a1
1c003bbe:	98c2                	add	a7,a7,a6
                xGradient += img->data[pixelNeighbours[6]];
1c003bc0:	41e30333          	sub	t1,t1,t5
                yGradient -= (img->data[pixelNeighbours[3]] << 1);
1c003bc4:	0506                	slli	a0,a0,0x1
                yGradient += (img->data[pixelNeighbours[7]] << 1);
1c003bc6:	40a88533          	sub	a0,a7,a0
                xGradient += img->data[pixelNeighbours[6]];
1c003bca:	41c30e33          	sub	t3,t1,t3
                absXGradient = ABS(xGradient);
1c003bce:	040e0733          	p.avg	a4,t3,zero
                absYGradient = ABS(yGradient);
1c003bd2:	040505b3          	p.avg	a1,a0,zero
1c003bd6:	1005d8b3          	p.exthz	a7,a1
                absXGradient = ABS(xGradient);
1c003bda:	10075db3          	p.exthz	s11,a4
                sqrtApprox = maxGradient - (maxGradient >> 3) + (minGradient >> 1);
1c003bde:	051dd833          	p.minu	a6,s11,a7
1c003be2:	00185813          	srli	a6,a6,0x1
                maxGradient = MAX(absXGradient, absYGradient);
1c003be6:	051dfdb3          	p.maxu	s11,s11,a7
                sqrtApprox = maxGradient - (maxGradient >> 3) + (minGradient >> 1);
1c003bea:	986e                	add	a6,a6,s11
1c003bec:	003dd893          	srli	a7,s11,0x3
1c003bf0:	41180833          	sub	a6,a6,a7
1c003bf4:	10085833          	p.exthz	a6,a6
                sqrtApprox = MAX(sqrtApprox, maxGradient);
1c003bf8:	050dfdb3          	p.maxu	s11,s11,a6
                if(sqrtApprox >= MIN_EDGE_INTENSITY_CANNY)
1c003bfc:	17bd7c63          	bleu	s11,s10,1c003d74 <cl_cannyOperator+0x398>
                    cannyImg->data[pixelIndex] = MIN(sqrtApprox, MAX_PIXEL_VALUE);
1c003c00:	0ff00813          	li	a6,255
1c003c04:	050dddb3          	p.minu	s11,s11,a6
1c003c08:	01b60023          	sb	s11,0(a2)
                    if((absYGradient << 1) <= absXGradient)
1c003c0c:	00159613          	slli	a2,a1,0x1
1c003c10:	16c74763          	blt	a4,a2,1c003d7e <cl_cannyOperator+0x3a2>
                        edgeDirection[pixelIndex - firstLine] = ZERO_DEGREES;
1c003c14:	4605                	li	a2,1
1c003c16:	00c68023          	sb	a2,0(a3)
        for(x = 0, pixelIndex = line ; x < imageWidth ; ++x, ++pixelIndex)
1c003c1a:	0e85                	addi	t4,t4,1
1c003c1c:	0ffefe93          	andi	t4,t4,255
1c003c20:	0285                	addi	t0,t0,1
1c003c22:	853e                	mv	a0,a5
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
1c003c24:	46b2                	lw	a3,12(sp)
1c003c26:	9c4e                	add	s8,s8,s3
1c003c28:	0085                	addi	ra,ra,1
1c003c2a:	16fd                	addi	a3,a3,-1
1c003c2c:	c636                	sw	a3,12(sp)
1c003c2e:	100c5c33          	p.exthz	s8,s8
1c003c32:	0ff0f393          	andi	t2,ra,255
1c003c36:	ec0691e3          	bnez	a3,1c003af8 <cl_cannyOperator+0x11c>
1c003c3a:	5402                	lw	s0,32(sp)
                    cannyImg->data[pixelIndex] = MIN_PIXEL_VALUE;
                    edgeDirection[pixelIndex - firstLine] = NO_ANGLE;
                }
            }

    pi_cl_team_barrier(0);
1c003c3c:	4501                	li	a0,0
1c003c3e:	3b41                	jal	1c0039ce <pi_cl_team_barrier>

    if(coreId == 0)
1c003c40:	57b2                	lw	a5,44(sp)
1c003c42:	1e078963          	beqz	a5,1c003e34 <cl_cannyOperator+0x458>

        /* wait for transfer to end */
        pi_cl_dma_cmd_wait(&dmaCopyStatus);
    }

    pi_cl_team_barrier(0);
1c003c46:	4501                	li	a0,0
1c003c48:	3359                	jal	1c0039ce <pi_cl_team_barrier>
1c003c4a:	01f0                	addi	a2,sp,204
1c003c4c:	c069                	beqz	s0,1c003d0e <cl_cannyOperator+0x332>
1c003c4e:	4562                	lw	a0,24(sp)
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
        for(x = 0, pixelIndex = line ; x < imageWidth ; ++x, ++pixelIndex)
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
                continue;
            else
                switch(edgeDirection[pixelIndex - firstLine])
1c003c50:	4772                	lw	a4,28(sp)
1c003c52:	5692                	lw	a3,36(sp)
1c003c54:	fff54893          	not	a7,a0
1c003c58:	98ba                	add	a7,a7,a4
1c003c5a:	00150793          	addi	a5,a0,1
1c003c5e:	0ff8f893          	andi	a7,a7,255
1c003c62:	1007e7b3          	p.extbs	a5,a5
1c003c66:	10076733          	p.extbs	a4,a4
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
1c003c6a:	8826                	mv	a6,s1
1c003c6c:	fff68a93          	addi	s5,a3,-1
1c003c70:	0ff57593          	andi	a1,a0,255
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
1c003c74:	fff40313          	addi	t1,s0,-1
                switch(edgeDirection[pixelIndex - firstLine])
1c003c78:	4e09                	li	t3,2
1c003c7a:	0885                	addi	a7,a7,1
1c003c7c:	2ef76163          	bltu	a4,a5,1c003f5e <cl_cannyOperator+0x582>
1c003c80:	2c070f63          	beqz	a4,1c003f5e <cl_cannyOperator+0x582>
1c003c84:	4772                	lw	a4,28(sp)
1c003c86:	2c074c63          	bltz	a4,1c003f5e <cl_cannyOperator+0x582>
1c003c8a:	0408c0fb          	lp.setup	x1,a7,1c003d0a <cl_cannyOperator+0x32e>
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
1c003c8e:	87c2                	mv	a5,a6
1c003c90:	4685                	li	a3,1
        for(x = 0, pixelIndex = line ; x < imageWidth ; ++x, ++pixelIndex)
1c003c92:	0785                	addi	a5,a5,1
1c003c94:	0ff6f713          	andi	a4,a3,255
1c003c98:	1007d7b3          	p.exthz	a5,a5
1c003c9c:	06877363          	bleu	s0,a4,1c003d02 <cl_cannyOperator+0x326>
            if(x == 0 || y == 0 || x == imageWidth -1 || y == imageHeight -1)
1c003ca0:	c9a9                	beqz	a1,1c003cf2 <cl_cannyOperator+0x316>
1c003ca2:	04d30863          	beq	t1,a3,1c003cf2 <cl_cannyOperator+0x316>
1c003ca6:	04aa8663          	beq	s5,a0,1c003cf2 <cl_cannyOperator+0x316>
                switch(edgeDirection[pixelIndex - firstLine])
1c003caa:	40978733          	sub	a4,a5,s1
1c003cae:	974a                	add	a4,a4,s2
1c003cb0:	00074703          	lbu	a4,0(a4)
1c003cb4:	14272263          	p.beqimm	a4,2,1c003df8 <cl_cannyOperator+0x41c>
1c003cb8:	0cee7a63          	bleu	a4,t3,1c003d8c <cl_cannyOperator+0x3b0>
1c003cbc:	10372663          	p.beqimm	a4,3,1c003dc8 <cl_cannyOperator+0x3ec>
1c003cc0:	02473963          	p.bneimm	a4,4,1c003cf2 <cl_cannyOperator+0x316>
                            cannyImg->data[pixelIndex] = MIN_PIXEL_VALUE;

                        break;

                    case A_HUNDRED_AND_THIRTY_FIVE_DEGREES:
                        pixel = img->data[pixelIndex];
1c003cc4:	002bae83          	lw	t4,2(s7)
                        /* if the pixel's value is greater than its neighbours in its gradient direction*/
                        if(pixel < img->data[pixelIndex - imageWidth - 1] || pixel < img->data[pixelIndex + imageWidth + 1])
1c003cc8:	40878733          	sub	a4,a5,s0
                        pixel = img->data[pixelIndex];
1c003ccc:	00fe8f33          	add	t5,t4,a5
                        if(pixel < img->data[pixelIndex - imageWidth - 1] || pixel < img->data[pixelIndex + imageWidth + 1])
1c003cd0:	9776                	add	a4,a4,t4
                        pixel = img->data[pixelIndex];
1c003cd2:	000f4f03          	lbu	t5,0(t5)
                        if(pixel < img->data[pixelIndex - imageWidth - 1] || pixel < img->data[pixelIndex + imageWidth + 1])
1c003cd6:	fff74703          	lbu	a4,-1(a4)
1c003cda:	00ef6863          	bltu	t5,a4,1c003cea <cl_cannyOperator+0x30e>
1c003cde:	9ea2                	add	t4,t4,s0
1c003ce0:	9ebe                	add	t4,t4,a5
1c003ce2:	001ec703          	lbu	a4,1(t4) # 2a0001 <__L2+0x220001>
1c003ce6:	00ef7663          	bleu	a4,t5,1c003cf2 <cl_cannyOperator+0x316>
                            cannyImg->data[pixelIndex] = MIN_PIXEL_VALUE;
1c003cea:	002a2703          	lw	a4,2(s4)
1c003cee:	000747a3          	p.sb	zero,a5(a4)
1c003cf2:	0685                	addi	a3,a3,1
        for(x = 0, pixelIndex = line ; x < imageWidth ; ++x, ++pixelIndex)
1c003cf4:	0785                	addi	a5,a5,1
1c003cf6:	0ff6f713          	andi	a4,a3,255
1c003cfa:	1007d7b3          	p.exthz	a5,a5
1c003cfe:	fa8761e3          	bltu	a4,s0,1c003ca0 <cl_cannyOperator+0x2c4>
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
1c003d02:	984e                	add	a6,a6,s3
1c003d04:	0505                	addi	a0,a0,1
1c003d06:	10085833          	p.exthz	a6,a6
1c003d0a:	0ff57593          	andi	a1,a0,255
                        /* never reached */
                        break;
                }


    pi_cl_l2_free(edgeDirection, (linesPerCore * imageWidth)*sizeof(angle_t), &free_req);
1c003d0e:	55a2                	lw	a1,40(sp)
1c003d10:	854a                	mv	a0,s2
1c003d12:	423020ef          	jal	ra,1c006934 <pi_cl_l2_free>
}

static inline void rt_free_cluster_wait(pi_cl_free_req_t *req)
{
  while((*(volatile char *)&req->done) == 0)
1c003d16:	15c14783          	lbu	a5,348(sp)
1c003d1a:	0ff7f793          	andi	a5,a5,255
1c003d1e:	ef99                	bnez	a5,1c003d3c <cl_cannyOperator+0x360>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003d20:	4689                	li	a3,2
1c003d22:	00204737          	lui	a4,0x204
1c003d26:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d2a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003d2e:	00d72223          	sw	a3,4(a4)
1c003d32:	15c14783          	lbu	a5,348(sp)
1c003d36:	0ff7f793          	andi	a5,a5,255
1c003d3a:	d7f5                	beqz	a5,1c003d26 <cl_cannyOperator+0x34a>
    pi_cl_l2_free_wait(&free_req);
}
1c003d3c:	19c12083          	lw	ra,412(sp)
1c003d40:	19812403          	lw	s0,408(sp)
1c003d44:	19412483          	lw	s1,404(sp)
1c003d48:	19012903          	lw	s2,400(sp)
1c003d4c:	18c12983          	lw	s3,396(sp)
1c003d50:	18812a03          	lw	s4,392(sp)
1c003d54:	18412a83          	lw	s5,388(sp)
1c003d58:	18012b03          	lw	s6,384(sp)
1c003d5c:	17c12b83          	lw	s7,380(sp)
1c003d60:	17812c03          	lw	s8,376(sp)
1c003d64:	17412c83          	lw	s9,372(sp)
1c003d68:	17012d03          	lw	s10,368(sp)
1c003d6c:	16c12d83          	lw	s11,364(sp)
1c003d70:	611d                	addi	sp,sp,416
1c003d72:	8082                	ret
                    cannyImg->data[pixelIndex] = MIN_PIXEL_VALUE;
1c003d74:	00060023          	sb	zero,0(a2)
                    edgeDirection[pixelIndex - firstLine] = NO_ANGLE;
1c003d78:	00068023          	sb	zero,0(a3)
1c003d7c:	bd79                	j	1c003c1a <cl_cannyOperator+0x23e>
                    else if ((absXGradient << 1) <= absYGradient)
1c003d7e:	0706                	slli	a4,a4,0x1
1c003d80:	02e5ca63          	blt	a1,a4,1c003db4 <cl_cannyOperator+0x3d8>
                        edgeDirection[pixelIndex - firstLine] = NINETY_DEGREES;
1c003d84:	470d                	li	a4,3
1c003d86:	00e68023          	sb	a4,0(a3)
1c003d8a:	bd41                	j	1c003c1a <cl_cannyOperator+0x23e>
                switch(edgeDirection[pixelIndex - firstLine])
1c003d8c:	f61733e3          	p.bneimm	a4,1,1c003cf2 <cl_cannyOperator+0x316>
                        pixel = img->data[pixelIndex];
1c003d90:	002ba703          	lw	a4,2(s7)
1c003d94:	973e                	add	a4,a4,a5
1c003d96:	00074e83          	lbu	t4,0(a4)
                        if(pixel < img->data[pixelIndex - 1] || pixel < img->data[pixelIndex + 1])
1c003d9a:	fff74f03          	lbu	t5,-1(a4)
1c003d9e:	f5eee6e3          	bltu	t4,t5,1c003cea <cl_cannyOperator+0x30e>
1c003da2:	00174703          	lbu	a4,1(a4)
1c003da6:	f4eef6e3          	bleu	a4,t4,1c003cf2 <cl_cannyOperator+0x316>
                            cannyImg->data[pixelIndex] = MIN_PIXEL_VALUE;
1c003daa:	002a2703          	lw	a4,2(s4)
1c003dae:	000747a3          	p.sb	zero,a5(a4)
1c003db2:	b781                	j	1c003cf2 <cl_cannyOperator+0x316>
                    else if ((xGradient < 0 && yGradient < 0) || (xGradient > 0 && yGradient > 0))
1c003db4:	060e4a63          	bltz	t3,1c003e28 <cl_cannyOperator+0x44c>
1c003db8:	060e0a63          	beqz	t3,1c003e2c <cl_cannyOperator+0x450>
1c003dbc:	06a05863          	blez	a0,1c003e2c <cl_cannyOperator+0x450>
                        edgeDirection[pixelIndex - firstLine] = FOURTY_FIVE_DEGREES;
1c003dc0:	4809                	li	a6,2
1c003dc2:	01068023          	sb	a6,0(a3)
1c003dc6:	bd91                	j	1c003c1a <cl_cannyOperator+0x23e>
                        pixel = img->data[pixelIndex];
1c003dc8:	002bae83          	lw	t4,2(s7)
                        if(pixel < img->data[pixelIndex - imageWidth] || pixel < img->data[pixelIndex + imageWidth])
1c003dcc:	40878733          	sub	a4,a5,s0
                        pixel = img->data[pixelIndex];
1c003dd0:	00fe8f33          	add	t5,t4,a5
                        if(pixel < img->data[pixelIndex - imageWidth] || pixel < img->data[pixelIndex + imageWidth])
1c003dd4:	9776                	add	a4,a4,t4
                        pixel = img->data[pixelIndex];
1c003dd6:	000f4f03          	lbu	t5,0(t5)
                        if(pixel < img->data[pixelIndex - imageWidth] || pixel < img->data[pixelIndex + imageWidth])
1c003dda:	00074703          	lbu	a4,0(a4)
1c003dde:	f0ef66e3          	bltu	t5,a4,1c003cea <cl_cannyOperator+0x30e>
1c003de2:	9ea2                	add	t4,t4,s0
1c003de4:	9ebe                	add	t4,t4,a5
1c003de6:	000ec703          	lbu	a4,0(t4)
1c003dea:	f0ef74e3          	bleu	a4,t5,1c003cf2 <cl_cannyOperator+0x316>
                            cannyImg->data[pixelIndex] = MIN_PIXEL_VALUE;
1c003dee:	002a2703          	lw	a4,2(s4)
1c003df2:	000747a3          	p.sb	zero,a5(a4)
1c003df6:	bdf5                	j	1c003cf2 <cl_cannyOperator+0x316>
                        pixel = img->data[pixelIndex];
1c003df8:	002bae83          	lw	t4,2(s7)
                        if(pixel < img->data[pixelIndex - imageWidth + 1] || pixel < img->data[pixelIndex + imageWidth - 1])
1c003dfc:	40878733          	sub	a4,a5,s0
                        pixel = img->data[pixelIndex];
1c003e00:	00fe8f33          	add	t5,t4,a5
                        if(pixel < img->data[pixelIndex - imageWidth + 1] || pixel < img->data[pixelIndex + imageWidth - 1])
1c003e04:	9776                	add	a4,a4,t4
                        pixel = img->data[pixelIndex];
1c003e06:	000f4f03          	lbu	t5,0(t5)
                        if(pixel < img->data[pixelIndex - imageWidth + 1] || pixel < img->data[pixelIndex + imageWidth - 1])
1c003e0a:	00174703          	lbu	a4,1(a4)
1c003e0e:	ecef6ee3          	bltu	t5,a4,1c003cea <cl_cannyOperator+0x30e>
1c003e12:	9ea2                	add	t4,t4,s0
1c003e14:	9ebe                	add	t4,t4,a5
1c003e16:	fffec703          	lbu	a4,-1(t4)
1c003e1a:	ecef7ce3          	bleu	a4,t5,1c003cf2 <cl_cannyOperator+0x316>
                            cannyImg->data[pixelIndex] = MIN_PIXEL_VALUE;
1c003e1e:	002a2703          	lw	a4,2(s4)
1c003e22:	000747a3          	p.sb	zero,a5(a4)
1c003e26:	b5f1                	j	1c003cf2 <cl_cannyOperator+0x316>
                    else if ((xGradient < 0 && yGradient < 0) || (xGradient > 0 && yGradient > 0))
1c003e28:	f8054ce3          	bltz	a0,1c003dc0 <cl_cannyOperator+0x3e4>
                        edgeDirection[pixelIndex - firstLine] = A_HUNDRED_AND_THIRTY_FIVE_DEGREES;
1c003e2c:	4611                	li	a2,4
1c003e2e:	00c68023          	sb	a2,0(a3)
1c003e32:	b3e5                	j	1c003c1a <cl_cannyOperator+0x23e>
        pi_cl_dma_cmd((uint32_t) cannyImg->data, (uint32_t) img->data, 40000*sizeof(uint8_t), PI_CL_DMA_DIR_EXT2LOC, &dmaCopyStatus);
1c003e34:	002a2683          	lw	a3,2(s4)
1c003e38:	002ba603          	lw	a2,2(s7)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e3c:	300475f3          	csrrci	a1,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c003e40:	003307b7          	lui	a5,0x330
1c003e44:	c9be                	sw	a5,208(sp)
    cmd->size = len;
1c003e46:	67a9                	lui	a5,0xa
1c003e48:	c4078793          	addi	a5,a5,-960 # 9c40 <__rt_stack_size+0x9440>
    if (__rt_dma_first_pending)
1c003e4c:	01402503          	lw	a0,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003e50:	6721                	lui	a4,0x8
    cmd->size = len;
1c003e52:	cbbe                	sw	a5,212(sp)
    cmd->id = tid;
1c003e54:	57fd                	li	a5,-1
    cmd->loc_addr = loc;
1c003e56:	d1b2                	sw	a2,224(sp)
    cmd->ext_addr = ext;
1c003e58:	d3b6                	sw	a3,228(sp)
    cmd->stride = stride;
1c003e5a:	cdba                	sw	a4,216(sp)
    cmd->length = length;
1c003e5c:	cfba                	sw	a4,220(sp)
    cmd->id = tid;
1c003e5e:	c7be                	sw	a5,204(sp)
    cmd->next = NULL;
1c003e60:	d582                	sw	zero,232(sp)
    if (__rt_dma_first_pending)
1c003e62:	c171                	beqz	a0,1c003f26 <cl_cannyOperator+0x54a>
        __rt_dma_last_pending->next = cmd;
1c003e64:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c003e68:	01f0                	addi	a2,sp,204
1c003e6a:	cfd0                	sw	a2,28(a5)
    __rt_dma_last_pending = cmd;
1c003e6c:	00c02823          	sw	a2,16(zero) # 10 <__rt_bridge_flash_cs>
  __builtin_pulp_spr_write(reg, val);
1c003e70:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c003e74:	47fe                	lw	a5,220(sp)
1c003e76:	e7b5                	bnez	a5,1c003ee2 <cl_cannyOperator+0x506>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e78:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003e7c:	002047b7          	lui	a5,0x204
1c003e80:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003e84:	46be                	lw	a3,204(sp)
1c003e86:	40d7d7b3          	sra	a5,a5,a3
1c003e8a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e8e:	c79d                	beqz	a5,1c003ebc <cl_cannyOperator+0x4e0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e90:	10000513          	li	a0,256
1c003e94:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003e98:	30059073          	csrw	mstatus,a1
1c003e9c:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ea0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003ea4:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ea8:	300475f3          	csrrci	a1,mstatus,8
1c003eac:	40472783          	lw	a5,1028(a4)
1c003eb0:	46be                	lw	a3,204(sp)
1c003eb2:	40d7d7b3          	sra	a5,a5,a3
1c003eb6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003eba:	fff9                	bnez	a5,1c003e98 <cl_cannyOperator+0x4bc>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003ebc:	4785                	li	a5,1
1c003ebe:	00d796b3          	sll	a3,a5,a3
1c003ec2:	002047b7          	lui	a5,0x204
1c003ec6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003eca:	30059073          	csrw	mstatus,a1
    pi_cl_team_barrier(0);
1c003ece:	4501                	li	a0,0
1c003ed0:	c432                	sw	a2,8(sp)
1c003ed2:	afdff0ef          	jal	ra,1c0039ce <pi_cl_team_barrier>
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
1c003ed6:	4862                	lw	a6,24(sp)
1c003ed8:	46f2                	lw	a3,28(sp)
1c003eda:	4622                	lw	a2,8(sp)
1c003edc:	d6d868e3          	bltu	a6,a3,1c003c4c <cl_cannyOperator+0x270>
1c003ee0:	b53d                	j	1c003d0e <cl_cannyOperator+0x332>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003ee2:	569e                	lw	a3,228(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003ee4:	02000713          	li	a4,32
1c003ee8:	002047b7          	lui	a5,0x204
1c003eec:	d2ed                	beqz	a3,1c003ece <cl_cannyOperator+0x4f2>
1c003eee:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ef2:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003ef6:	00e7a223          	sw	a4,4(a5)
1c003efa:	569e                	lw	a3,228(sp)
1c003efc:	faed                	bnez	a3,1c003eee <cl_cannyOperator+0x512>
    pi_cl_team_barrier(0);
1c003efe:	4501                	li	a0,0
1c003f00:	c432                	sw	a2,8(sp)
1c003f02:	acdff0ef          	jal	ra,1c0039ce <pi_cl_team_barrier>
    for(y = beginning, line = firstLine ; y < end ; ++y, line += imageWidth)
1c003f06:	4862                	lw	a6,24(sp)
1c003f08:	46f2                	lw	a3,28(sp)
1c003f0a:	4622                	lw	a2,8(sp)
1c003f0c:	d4d860e3          	bltu	a6,a3,1c003c4c <cl_cannyOperator+0x270>
1c003f10:	bbfd                	j	1c003d0e <cl_cannyOperator+0x332>
    pi_cl_team_barrier(0);
1c003f12:	4501                	li	a0,0
1c003f14:	abbff0ef          	jal	ra,1c0039ce <pi_cl_team_barrier>
    if(coreId == 0)
1c003f18:	57b2                	lw	a5,44(sp)
1c003f1a:	df89                	beqz	a5,1c003e34 <cl_cannyOperator+0x458>
    pi_cl_team_barrier(0);
1c003f1c:	4501                	li	a0,0
1c003f1e:	ab1ff0ef          	jal	ra,1c0039ce <pi_cl_team_barrier>
1c003f22:	01f0                	addi	a2,sp,204
1c003f24:	b3ed                	j	1c003d0e <cl_cannyOperator+0x332>
        cmd->loc_addr += iter_length;
1c003f26:	00e607b3          	add	a5,a2,a4
1c003f2a:	d1be                	sw	a5,224(sp)
        cmd->size -= iter_length;
1c003f2c:	6789                	lui	a5,0x2
        cmd->ext_addr += stride;
1c003f2e:	9736                	add	a4,a4,a3
        cmd->size -= iter_length;
1c003f30:	c4078793          	addi	a5,a5,-960 # 1c40 <__rt_stack_size+0x1440>
        cmd->ext_addr += stride;
1c003f34:	d3ba                	sw	a4,228(sp)
        cmd->size -= iter_length;
1c003f36:	cbbe                	sw	a5,212(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003f38:	002047b7          	lui	a5,0x204
1c003f3c:	4007a703          	lw	a4,1024(a5) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c003f40:	c7ba                	sw	a4,204(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003f42:	00338737          	lui	a4,0x338
1c003f46:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003f4a:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003f4e:	40d7a023          	sw	a3,1024(a5)
        if (cmd->length != 0)
1c003f52:	47fe                	lw	a5,220(sp)
1c003f54:	01f0                	addi	a2,sp,204
1c003f56:	db99                	beqz	a5,1c003e6c <cl_cannyOperator+0x490>
            __rt_dma_first_pending = cmd;
1c003f58:	00c02a23          	sw	a2,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c003f5c:	bf01                	j	1c003e6c <cl_cannyOperator+0x490>
1c003f5e:	4885                	li	a7,1
1c003f60:	b32d                	j	1c003c8a <cl_cannyOperator+0x2ae>
1c003f62:	4705                	li	a4,1
1c003f64:	d022                	sw	s0,32(sp)
1c003f66:	c63a                	sw	a4,12(sp)
1c003f68:	8432                	mv	s0,a2
1c003f6a:	b679                	j	1c003af8 <cl_cannyOperator+0x11c>

1c003f6c <rangeThresholdImage>:
void rangeThresholdImage(PGMImage *img, uint8_t lowerThresholdValue, uint8_t upperThresholdValue)
{
    uint16_t i;
    uint8_t pixel;

    if(img)
1c003f6c:	c529                	beqz	a0,1c003fb6 <rangeThresholdImage+0x4a>
        for(i = 0; i < img->x * img->y ; ++i)
1c003f6e:	00054783          	lbu	a5,0(a0)
1c003f72:	00154703          	lbu	a4,1(a0)
1c003f76:	00e787db          	p.mac	a5,a5,a4,zero
1c003f7a:	cf95                	beqz	a5,1c003fb6 <rangeThresholdImage+0x4a>
1c003f7c:	4681                	li	a3,0
        {
            pixel = img->data[i];
1c003f7e:	00252703          	lw	a4,2(a0)
        for(i = 0; i < img->x * img->y ; ++i)
1c003f82:	00168793          	addi	a5,a3,1
            img->data[i] = (pixel >= lowerThresholdValue && pixel <= upperThresholdValue) ? MAX_PIXEL_VALUE : MIN_PIXEL_VALUE;
1c003f86:	4881                	li	a7,0
            pixel = img->data[i];
1c003f88:	9736                	add	a4,a4,a3
1c003f8a:	00074803          	lbu	a6,0(a4) # 338000 <__L2+0x2b8000>
        for(i = 0; i < img->x * img->y ; ++i)
1c003f8e:	1007d6b3          	p.exthz	a3,a5
            img->data[i] = (pixel >= lowerThresholdValue && pixel <= upperThresholdValue) ? MAX_PIXEL_VALUE : MIN_PIXEL_VALUE;
1c003f92:	04c837b3          	p.sletu	a5,a6,a2
1c003f96:	40f007b3          	neg	a5,a5
1c003f9a:	00b86463          	bltu	a6,a1,1c003fa2 <rangeThresholdImage+0x36>
1c003f9e:	0ff7f893          	andi	a7,a5,255
1c003fa2:	01170023          	sb	a7,0(a4)
        for(i = 0; i < img->x * img->y ; ++i)
1c003fa6:	00054783          	lbu	a5,0(a0)
1c003faa:	00154703          	lbu	a4,1(a0)
1c003fae:	00e787db          	p.mac	a5,a5,a4,zero
1c003fb2:	fcf6c6e3          	blt	a3,a5,1c003f7e <rangeThresholdImage+0x12>
        }
}
1c003fb6:	8082                	ret

1c003fb8 <thresholdAndFindMeans>:

void thresholdAndFindMeans(PGMImage* img, uint8_t upperBound, uint8_t lowerBound, uint8_t *restrict objectMean, uint8_t * restrict backgroundMean)
{
    uint32_t object = 0, background = 0;
    uint8_t imageWidth = img->x, imageHeight = img->y, pixel;
    uint16_t imageSize = imageWidth*imageHeight, counter = 0;
1c003fb8:	00054f83          	lbu	t6,0(a0)
1c003fbc:	00154e03          	lbu	t3,1(a0)
1c003fc0:	01cf8fdb          	p.mac	t6,t6,t3,zero

    for(uint16_t i = 0; i < imageSize; ++i)
1c003fc4:	060f8763          	beqz	t6,1c004032 <thresholdAndFindMeans+0x7a>
    {
        pixel = img->data[i];
        if(pixel >= lowerBound && pixel <= upperBound)
        {
            img->data[i] = MAX_PIXEL_VALUE;
1c003fc8:	ffff8813          	addi	a6,t6,-1
1c003fcc:	10085833          	p.exthz	a6,a6
    for(uint16_t i = 0; i < imageSize; ++i)
1c003fd0:	4301                	li	t1,0
    uint16_t imageSize = imageWidth*imageHeight, counter = 0;
1c003fd2:	4f01                	li	t5,0
    uint32_t object = 0, background = 0;
1c003fd4:	4e01                	li	t3,0
1c003fd6:	4e81                	li	t4,0
            img->data[i] = MAX_PIXEL_VALUE;
1c003fd8:	53fd                	li	t2,-1
1c003fda:	0805                	addi	a6,a6,1
1c003fdc:	060f8563          	beqz	t6,1c004046 <thresholdAndFindMeans+0x8e>
        pixel = img->data[i];
1c003fe0:	00252783          	lw	a5,2(a0)
1c003fe4:	979a                	add	a5,a5,t1
1c003fe6:	0007c883          	lbu	a7,0(a5)
        if(pixel >= lowerBound && pixel <= upperBound)
1c003fea:	02c8ec63          	bltu	a7,a2,1c004022 <thresholdAndFindMeans+0x6a>
            counter++;
1c003fee:	001f0293          	addi	t0,t5,1
        if(pixel >= lowerBound && pixel <= upperBound)
1c003ff2:	0315e863          	bltu	a1,a7,1c004022 <thresholdAndFindMeans+0x6a>
            img->data[i] = MAX_PIXEL_VALUE;
1c003ff6:	00778023          	sb	t2,0(a5)
            counter++;
1c003ffa:	1002df33          	p.exthz	t5,t0
            object += pixel;
1c003ffe:	9ec6                	add	t4,t4,a7
1c004000:	0305                	addi	t1,t1,1
    for(uint16_t i = 0; i < imageSize; ++i)
1c004002:	187d                	addi	a6,a6,-1
1c004004:	fc081ee3          	bnez	a6,1c003fe0 <thresholdAndFindMeans+0x28>
1c004008:	41ef8fb3          	sub	t6,t6,t5
1c00400c:	03fe5e33          	divu	t3,t3,t6
            img->data[i] = MIN_PIXEL_VALUE;
            background += pixel;
        }
    }

    *objectMean = object/counter;
1c004010:	03eedeb3          	divu	t4,t4,t5
1c004014:	0ffe7e13          	andi	t3,t3,255
    *backgroundMean = background/(imageSize - counter);
1c004018:	01c70023          	sb	t3,0(a4)
    *objectMean = object/counter;
1c00401c:	01d68023          	sb	t4,0(a3)
}
1c004020:	8082                	ret
            img->data[i] = MIN_PIXEL_VALUE;
1c004022:	00078023          	sb	zero,0(a5)
            background += pixel;
1c004026:	9e46                	add	t3,t3,a7
1c004028:	0305                	addi	t1,t1,1
    for(uint16_t i = 0; i < imageSize; ++i)
1c00402a:	187d                	addi	a6,a6,-1
1c00402c:	fa081ae3          	bnez	a6,1c003fe0 <thresholdAndFindMeans+0x28>
1c004030:	bfe1                	j	1c004008 <thresholdAndFindMeans+0x50>
1c004032:	4f01                	li	t5,0
    uint32_t object = 0, background = 0;
1c004034:	4e81                	li	t4,0
    *objectMean = object/counter;
1c004036:	03eedeb3          	divu	t4,t4,t5
    for(uint16_t i = 0; i < imageSize; ++i)
1c00403a:	4e01                	li	t3,0
    *backgroundMean = background/(imageSize - counter);
1c00403c:	01c70023          	sb	t3,0(a4)
    *objectMean = object/counter;
1c004040:	01d68023          	sb	t4,0(a3)
}
1c004044:	8082                	ret
1c004046:	4805                	li	a6,1
1c004048:	bf61                	j	1c003fe0 <thresholdAndFindMeans+0x28>

1c00404a <edgesLabelAndCheckNeighbour>:
}


void edgesLabelAndCheckNeighbour(PGMImage * img, uint8_t label, uint16_t pixelIndex, Stack * pixelStack, uint16_t * pixelCount)
{
    if(img->data[pixelIndex] == label)
1c00404a:	00252783          	lw	a5,2(a0)
1c00404e:	97b2                	add	a5,a5,a2
1c004050:	0007c803          	lbu	a6,0(a5)
1c004054:	00b80f63          	beq	a6,a1,1c004072 <edgesLabelAndCheckNeighbour+0x28>
        return;
    else
    {
        img->data[pixelIndex] = label;
1c004058:	00b78023          	sb	a1,0(a5)
        *pixelCount += 1;
1c00405c:	00075783          	lhu	a5,0(a4)
1c004060:	0785                	addi	a5,a5,1
1c004062:	00f71023          	sh	a5,0(a4)
    }

    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c004066:	00054783          	lbu	a5,0(a0)
    const uint16_t imageSize = imageWidth * imageHeight;
1c00406a:	1007d833          	p.exthz	a6,a5

    uint8_t pixel;
    uint16_t pixelNeighbours[8];


    if( pixelIndex <= imageWidth || pixelIndex >= imageSize - imageWidth || pixelIndex % imageWidth == 0 || (pixelIndex + 1) % (imageWidth) == 0)
1c00406e:	00c86363          	bltu	a6,a2,1c004074 <edgesLabelAndCheckNeighbour+0x2a>
1c004072:	8082                	ret
    const uint16_t imageSize = imageWidth * imageHeight;
1c004074:	00154703          	lbu	a4,1(a0)
    if( pixelIndex <= imageWidth || pixelIndex >= imageSize - imageWidth || pixelIndex % imageWidth == 0 || (pixelIndex + 1) % (imageWidth) == 0)
1c004078:	02e80733          	mul	a4,a6,a4
1c00407c:	8f1d                	sub	a4,a4,a5
1c00407e:	fee65ae3          	ble	a4,a2,1c004072 <edgesLabelAndCheckNeighbour+0x28>
1c004082:	02f66733          	rem	a4,a2,a5
1c004086:	d775                	beqz	a4,1c004072 <edgesLabelAndCheckNeighbour+0x28>
1c004088:	00160713          	addi	a4,a2,1
1c00408c:	02f767b3          	rem	a5,a4,a5
1c004090:	d3ed                	beqz	a5,1c004072 <edgesLabelAndCheckNeighbour+0x28>
{
1c004092:	7179                	addi	sp,sp,-48
1c004094:	ca56                	sw	s5,20(sp)
        return;

    pixelNeighbours[0] = pixelIndex - imageWidth - 1; /* upper-left */
1c004096:	41060ab3          	sub	s5,a2,a6
1c00409a:	100adab3          	p.exthz	s5,s5
    pixelNeighbours[6] = pixelIndex - imageWidth + 1; /* upper-right */
    pixelNeighbours[7] = pixelIndex - imageWidth;     /* upper */

    for(uint8_t i = 0; i < 8; ++i)
    {
        pixel = img->data[pixelNeighbours[i]];
1c00409e:	00252783          	lw	a5,2(a0)
    pixelNeighbours[0] = pixelIndex - imageWidth - 1; /* upper-left */
1c0040a2:	fffa8593          	addi	a1,s5,-1
1c0040a6:	1005d5b3          	p.exthz	a1,a1
{
1c0040aa:	d422                	sw	s0,40(sp)
1c0040ac:	d226                	sw	s1,36(sp)
1c0040ae:	d04a                	sw	s2,32(sp)
1c0040b0:	ce4e                	sw	s3,28(sp)
1c0040b2:	cc52                	sw	s4,24(sp)
1c0040b4:	c85a                	sw	s6,16(sp)
1c0040b6:	c65e                	sw	s7,12(sp)
1c0040b8:	c462                	sw	s8,8(sp)
1c0040ba:	d606                	sw	ra,44(sp)
1c0040bc:	89b6                	mv	s3,a3

        if(pixel == MAX_PIXEL_VALUE)
1c0040be:	00b786b3          	add	a3,a5,a1
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c0040c2:	9832                	add	a6,a6,a2
1c0040c4:	84aa                	mv	s1,a0
        if(pixel == MAX_PIXEL_VALUE)
1c0040c6:	0006c503          	lbu	a0,0(a3)
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c0040ca:	10085933          	p.exthz	s2,a6
    pixelNeighbours[1] = pixelIndex - 1;              /* left */
1c0040ce:	167d                	addi	a2,a2,-1
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c0040d0:	fff90c13          	addi	s8,s2,-1
    pixelNeighbours[4] = pixelIndex + imageWidth + 1; /* bottom-right */
1c0040d4:	00190b93          	addi	s7,s2,1
    pixelNeighbours[6] = pixelIndex - imageWidth + 1; /* upper-right */
1c0040d8:	001a8b13          	addi	s6,s5,1
        if(pixel == MAX_PIXEL_VALUE)
1c0040dc:	0ff00693          	li	a3,255
    pixelNeighbours[1] = pixelIndex - 1;              /* left */
1c0040e0:	10065433          	p.exthz	s0,a2
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c0040e4:	100c5c33          	p.exthz	s8,s8
    pixelNeighbours[4] = pixelIndex + imageWidth + 1; /* bottom-right */
1c0040e8:	100bdbb3          	p.exthz	s7,s7
    pixelNeighbours[5] = pixelIndex + 1;              /* right */
1c0040ec:	10075a33          	p.exthz	s4,a4
    pixelNeighbours[6] = pixelIndex - imageWidth + 1; /* upper-right */
1c0040f0:	100b5b33          	p.exthz	s6,s6
        if(pixel == MAX_PIXEL_VALUE)
1c0040f4:	08d50563          	beq	a0,a3,1c00417e <edgesLabelAndCheckNeighbour+0x134>
1c0040f8:	00878733          	add	a4,a5,s0
1c0040fc:	00074683          	lbu	a3,0(a4)
1c004100:	0ff00713          	li	a4,255
1c004104:	0ee68563          	beq	a3,a4,1c0041ee <edgesLabelAndCheckNeighbour+0x1a4>
1c004108:	01878733          	add	a4,a5,s8
1c00410c:	00074683          	lbu	a3,0(a4)
1c004110:	0ff00713          	li	a4,255
1c004114:	0ce68663          	beq	a3,a4,1c0041e0 <edgesLabelAndCheckNeighbour+0x196>
1c004118:	01278733          	add	a4,a5,s2
1c00411c:	00074683          	lbu	a3,0(a4)
1c004120:	0ff00713          	li	a4,255
1c004124:	0ae68763          	beq	a3,a4,1c0041d2 <edgesLabelAndCheckNeighbour+0x188>
1c004128:	01778733          	add	a4,a5,s7
1c00412c:	00074683          	lbu	a3,0(a4)
1c004130:	0ff00713          	li	a4,255
1c004134:	08e68863          	beq	a3,a4,1c0041c4 <edgesLabelAndCheckNeighbour+0x17a>
1c004138:	01478733          	add	a4,a5,s4
1c00413c:	00074683          	lbu	a3,0(a4)
1c004140:	0ff00713          	li	a4,255
1c004144:	06e68963          	beq	a3,a4,1c0041b6 <edgesLabelAndCheckNeighbour+0x16c>
1c004148:	01678733          	add	a4,a5,s6
1c00414c:	00074683          	lbu	a3,0(a4)
1c004150:	0ff00713          	li	a4,255
1c004154:	04e68a63          	beq	a3,a4,1c0041a8 <edgesLabelAndCheckNeighbour+0x15e>
1c004158:	97d6                	add	a5,a5,s5
1c00415a:	0007c703          	lbu	a4,0(a5)
1c00415e:	0ff00793          	li	a5,255
1c004162:	02f70463          	beq	a4,a5,1c00418a <edgesLabelAndCheckNeighbour+0x140>
            push(pixelStack, pixelNeighbours[i]);
    }

}
1c004166:	50b2                	lw	ra,44(sp)
1c004168:	5422                	lw	s0,40(sp)
1c00416a:	5492                	lw	s1,36(sp)
1c00416c:	5902                	lw	s2,32(sp)
1c00416e:	49f2                	lw	s3,28(sp)
1c004170:	4a62                	lw	s4,24(sp)
1c004172:	4ad2                	lw	s5,20(sp)
1c004174:	4b42                	lw	s6,16(sp)
1c004176:	4bb2                	lw	s7,12(sp)
1c004178:	4c22                	lw	s8,8(sp)
1c00417a:	6145                	addi	sp,sp,48
1c00417c:	8082                	ret
            push(pixelStack, pixelNeighbours[i]);
1c00417e:	854e                	mv	a0,s3
1c004180:	155000ef          	jal	ra,1c004ad4 <push>
1c004184:	0024a783          	lw	a5,2(s1)
1c004188:	bf85                	j	1c0040f8 <edgesLabelAndCheckNeighbour+0xae>
}
1c00418a:	5422                	lw	s0,40(sp)
1c00418c:	50b2                	lw	ra,44(sp)
1c00418e:	5492                	lw	s1,36(sp)
1c004190:	5902                	lw	s2,32(sp)
1c004192:	4a62                	lw	s4,24(sp)
1c004194:	4b42                	lw	s6,16(sp)
1c004196:	4bb2                	lw	s7,12(sp)
1c004198:	4c22                	lw	s8,8(sp)
            push(pixelStack, pixelNeighbours[i]);
1c00419a:	85d6                	mv	a1,s5
1c00419c:	854e                	mv	a0,s3
}
1c00419e:	4ad2                	lw	s5,20(sp)
1c0041a0:	49f2                	lw	s3,28(sp)
1c0041a2:	6145                	addi	sp,sp,48
            push(pixelStack, pixelNeighbours[i]);
1c0041a4:	1310006f          	j	1c004ad4 <push>
1c0041a8:	85da                	mv	a1,s6
1c0041aa:	854e                	mv	a0,s3
1c0041ac:	129000ef          	jal	ra,1c004ad4 <push>
1c0041b0:	0024a783          	lw	a5,2(s1)
1c0041b4:	b755                	j	1c004158 <edgesLabelAndCheckNeighbour+0x10e>
1c0041b6:	85d2                	mv	a1,s4
1c0041b8:	854e                	mv	a0,s3
1c0041ba:	11b000ef          	jal	ra,1c004ad4 <push>
1c0041be:	0024a783          	lw	a5,2(s1)
1c0041c2:	b759                	j	1c004148 <edgesLabelAndCheckNeighbour+0xfe>
1c0041c4:	85de                	mv	a1,s7
1c0041c6:	854e                	mv	a0,s3
1c0041c8:	10d000ef          	jal	ra,1c004ad4 <push>
1c0041cc:	0024a783          	lw	a5,2(s1)
1c0041d0:	b7a5                	j	1c004138 <edgesLabelAndCheckNeighbour+0xee>
1c0041d2:	85ca                	mv	a1,s2
1c0041d4:	854e                	mv	a0,s3
1c0041d6:	0ff000ef          	jal	ra,1c004ad4 <push>
1c0041da:	0024a783          	lw	a5,2(s1)
1c0041de:	b7a9                	j	1c004128 <edgesLabelAndCheckNeighbour+0xde>
1c0041e0:	85e2                	mv	a1,s8
1c0041e2:	854e                	mv	a0,s3
1c0041e4:	0f1000ef          	jal	ra,1c004ad4 <push>
1c0041e8:	0024a783          	lw	a5,2(s1)
1c0041ec:	b735                	j	1c004118 <edgesLabelAndCheckNeighbour+0xce>
1c0041ee:	85a2                	mv	a1,s0
1c0041f0:	854e                	mv	a0,s3
1c0041f2:	0e3000ef          	jal	ra,1c004ad4 <push>
1c0041f6:	0024a783          	lw	a5,2(s1)
1c0041fa:	b739                	j	1c004108 <edgesLabelAndCheckNeighbour+0xbe>

1c0041fc <edgeSegmentation>:
{
1c0041fc:	7119                	addi	sp,sp,-128
1c0041fe:	de86                	sw	ra,124(sp)
1c004200:	d8ca                	sw	s2,112(sp)
1c004202:	d0da                	sw	s6,96(sp)
1c004204:	cce2                	sw	s8,88(sp)
1c004206:	cae6                	sw	s9,84(sp)
1c004208:	dca2                	sw	s0,120(sp)
1c00420a:	daa6                	sw	s1,116(sp)
1c00420c:	d6ce                	sw	s3,108(sp)
1c00420e:	d4d2                	sw	s4,104(sp)
1c004210:	d2d6                	sw	s5,100(sp)
1c004212:	cede                	sw	s7,92(sp)
1c004214:	c8ea                	sw	s10,80(sp)
1c004216:	c6ee                	sw	s11,76(sp)
    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c004218:	00054b83          	lbu	s7,0(a0)
1c00421c:	00154403          	lbu	s0,1(a0)
{
1c004220:	8caa                	mv	s9,a0
    const uint16_t imageSize = imageWidth * imageHeight;
1c004222:	100bdb33          	p.exthz	s6,s7
    for(y = 1; y < imageHeight - 1; ++y)
1c004226:	fff40c13          	addi	s8,s0,-1
    const uint16_t imageSize = imageWidth * imageHeight;
1c00422a:	03640433          	mul	s0,s0,s6
    Stack* pixelStack = createStack();
1c00422e:	7a8000ef          	jal	ra,1c0049d6 <createStack>
1c004232:	892a                	mv	s2,a0
    PQueue* labelPQueue = createPQueue();
1c004234:	23d5                	jal	1c004818 <createPQueue>
1c004236:	d42a                	sw	a0,40(sp)
    for(y = 1; y < imageHeight - 1; ++y)
1c004238:	4785                	li	a5,1
    const uint16_t imageSize = imageWidth * imageHeight;
1c00423a:	d622                	sw	s0,44(sp)
    for(y = 1; y < imageHeight - 1; ++y)
1c00423c:	0587d363          	ble	s8,a5,1c004282 <edgeSegmentation+0x86>
    uint8_t y, pixel, label = 1;
1c004240:	4485                	li	s1,1
    for(y = 1; y < imageHeight - 1; ++y)
1c004242:	4a05                	li	s4,1
            if(pixel == MAX_PIXEL_VALUE)
1c004244:	0ff00993          	li	s3,255
        line = y * imageWidth;
1c004248:	036a0433          	mul	s0,s4,s6
        for(pixelIndex = line + 1; pixelIndex < line + imageWidth - 1; ++pixelIndex)
1c00424c:	00140793          	addi	a5,s0,1
1c004250:	945e                	add	s0,s0,s7
1c004252:	1007ddb3          	p.exthz	s11,a5
1c004256:	147d                	addi	s0,s0,-1
1c004258:	028dd063          	ble	s0,s11,1c004278 <edgeSegmentation+0x7c>
                printf("label %-3u has %-5u pixels.%c", label, pixelCount,label%3==0?'\n':'\t');
1c00425c:	4a8d                	li	s5,3
            pixel = img->data[pixelIndex];
1c00425e:	002ca703          	lw	a4,2(s9)
            if(pixel == MAX_PIXEL_VALUE)
1c004262:	976e                	add	a4,a4,s11
1c004264:	00074703          	lbu	a4,0(a4)
1c004268:	05370063          	beq	a4,s3,1c0042a8 <edgeSegmentation+0xac>
        for(pixelIndex = line + 1; pixelIndex < line + imageWidth - 1; ++pixelIndex)
1c00426c:	001d8793          	addi	a5,s11,1
1c004270:	1007ddb3          	p.exthz	s11,a5
1c004274:	fe8dc5e3          	blt	s11,s0,1c00425e <edgeSegmentation+0x62>
    for(y = 1; y < imageHeight - 1; ++y)
1c004278:	0a05                	addi	s4,s4,1
1c00427a:	0ffa7a13          	andi	s4,s4,255
1c00427e:	fd8a45e3          	blt	s4,s8,1c004248 <edgeSegmentation+0x4c>
    destroyStack(pixelStack);
1c004282:	854a                	mv	a0,s2
1c004284:	7d4000ef          	jal	ra,1c004a58 <destroyStack>
}
1c004288:	50f6                	lw	ra,124(sp)
1c00428a:	5466                	lw	s0,120(sp)
1c00428c:	5522                	lw	a0,40(sp)
1c00428e:	54d6                	lw	s1,116(sp)
1c004290:	5946                	lw	s2,112(sp)
1c004292:	59b6                	lw	s3,108(sp)
1c004294:	5a26                	lw	s4,104(sp)
1c004296:	5a96                	lw	s5,100(sp)
1c004298:	5b06                	lw	s6,96(sp)
1c00429a:	4bf6                	lw	s7,92(sp)
1c00429c:	4c66                	lw	s8,88(sp)
1c00429e:	4cd6                	lw	s9,84(sp)
1c0042a0:	4d46                	lw	s10,80(sp)
1c0042a2:	4db6                	lw	s11,76(sp)
1c0042a4:	6109                	addi	sp,sp,128
1c0042a6:	8082                	ret
                edgesLabelAndCheckNeighbour(img, label, pixelIndex, pixelStack, &pixelCount);
1c0042a8:	03e10713          	addi	a4,sp,62
1c0042ac:	86ca                	mv	a3,s2
1c0042ae:	866e                	mv	a2,s11
1c0042b0:	85a6                	mv	a1,s1
1c0042b2:	8566                	mv	a0,s9
                pixelCount = 0;
1c0042b4:	02011f23          	sh	zero,62(sp)
                edgesLabelAndCheckNeighbour(img, label, pixelIndex, pixelStack, &pixelCount);
1c0042b8:	3b49                	jal	1c00404a <edgesLabelAndCheckNeighbour>
                while(!isStackEmpty(pixelStack))
1c0042ba:	854a                	mv	a0,s2
1c0042bc:	1fb000ef          	jal	ra,1c004cb6 <isStackEmpty>
1c0042c0:	0e051c63          	bnez	a0,1c0043b8 <edgeSegmentation+0x1bc>
                    edgesLabelAndCheckNeighbour(img, label, pop(pixelStack), pixelStack, &pixelCount);
1c0042c4:	854a                	mv	a0,s2
1c0042c6:	1b7000ef          	jal	ra,1c004c7c <pop>
    if(img->data[pixelIndex] == label)
1c0042ca:	002ca703          	lw	a4,2(s9)
1c0042ce:	972a                	add	a4,a4,a0
1c0042d0:	00074683          	lbu	a3,0(a4)
1c0042d4:	fe9683e3          	beq	a3,s1,1c0042ba <edgeSegmentation+0xbe>
        img->data[pixelIndex] = label;
1c0042d8:	00970023          	sb	s1,0(a4)
        *pixelCount += 1;
1c0042dc:	03e15703          	lhu	a4,62(sp)
    const uint8_t imageWidth = img->x, imageHeight = img->y;
1c0042e0:	000cc683          	lbu	a3,0(s9)
        *pixelCount += 1;
1c0042e4:	0705                	addi	a4,a4,1
1c0042e6:	02e11f23          	sh	a4,62(sp)
    const uint16_t imageSize = imageWidth * imageHeight;
1c0042ea:	1006d633          	p.exthz	a2,a3
    if( pixelIndex <= imageWidth || pixelIndex >= imageSize - imageWidth || pixelIndex % imageWidth == 0 || (pixelIndex + 1) % (imageWidth) == 0)
1c0042ee:	fca676e3          	bleu	a0,a2,1c0042ba <edgeSegmentation+0xbe>
    const uint16_t imageSize = imageWidth * imageHeight;
1c0042f2:	001cc703          	lbu	a4,1(s9)
    if( pixelIndex <= imageWidth || pixelIndex >= imageSize - imageWidth || pixelIndex % imageWidth == 0 || (pixelIndex + 1) % (imageWidth) == 0)
1c0042f6:	02e60733          	mul	a4,a2,a4
1c0042fa:	8f15                	sub	a4,a4,a3
1c0042fc:	fae55fe3          	ble	a4,a0,1c0042ba <edgeSegmentation+0xbe>
1c004300:	02d56733          	rem	a4,a0,a3
1c004304:	db5d                	beqz	a4,1c0042ba <edgeSegmentation+0xbe>
1c004306:	00150893          	addi	a7,a0,1
1c00430a:	02d8e6b3          	rem	a3,a7,a3
1c00430e:	d6d5                	beqz	a3,1c0042ba <edgeSegmentation+0xbe>
    pixelNeighbours[0] = pixelIndex - imageWidth - 1; /* upper-left */
1c004310:	40c50333          	sub	t1,a0,a2
1c004314:	10035333          	p.exthz	t1,t1
        pixel = img->data[pixelNeighbours[i]];
1c004318:	002ca683          	lw	a3,2(s9)
    pixelNeighbours[0] = pixelIndex - imageWidth - 1; /* upper-left */
1c00431c:	fff30593          	addi	a1,t1,-1
1c004320:	1005d5b3          	p.exthz	a1,a1
        if(pixel == MAX_PIXEL_VALUE)
1c004324:	00b68733          	add	a4,a3,a1
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c004328:	962a                	add	a2,a2,a0
        if(pixel == MAX_PIXEL_VALUE)
1c00432a:	00074f83          	lbu	t6,0(a4)
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c00432e:	10065633          	p.exthz	a2,a2
    pixelNeighbours[1] = pixelIndex - 1;              /* left */
1c004332:	157d                	addi	a0,a0,-1
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c004334:	fff60f13          	addi	t5,a2,-1
    pixelNeighbours[4] = pixelIndex + imageWidth + 1; /* bottom-right */
1c004338:	00160e93          	addi	t4,a2,1
    pixelNeighbours[6] = pixelIndex - imageWidth + 1; /* upper-right */
1c00433c:	00130e13          	addi	t3,t1,1
    pixelNeighbours[1] = pixelIndex - 1;              /* left */
1c004340:	10055733          	p.exthz	a4,a0
    pixelNeighbours[2] = pixelIndex + imageWidth - 1; /* bottom-left */
1c004344:	100f5f33          	p.exthz	t5,t5
    pixelNeighbours[4] = pixelIndex + imageWidth + 1; /* bottom-right */
1c004348:	100edeb3          	p.exthz	t4,t4
    pixelNeighbours[5] = pixelIndex + 1;              /* right */
1c00434c:	1008d8b3          	p.exthz	a7,a7
    pixelNeighbours[6] = pixelIndex - imageWidth + 1; /* upper-right */
1c004350:	100e5e33          	p.exthz	t3,t3
        if(pixel == MAX_PIXEL_VALUE)
1c004354:	0b3f8663          	beq	t6,s3,1c004400 <edgeSegmentation+0x204>
1c004358:	00e685b3          	add	a1,a3,a4
1c00435c:	0005c583          	lbu	a1,0(a1) # 330000 <__L2+0x2b0000>
1c004360:	0d358863          	beq	a1,s3,1c004430 <edgeSegmentation+0x234>
1c004364:	01e68733          	add	a4,a3,t5
1c004368:	00074703          	lbu	a4,0(a4)
1c00436c:	0f370963          	beq	a4,s3,1c00445e <edgeSegmentation+0x262>
1c004370:	00c68733          	add	a4,a3,a2
1c004374:	00074703          	lbu	a4,0(a4)
1c004378:	11370863          	beq	a4,s3,1c004488 <edgeSegmentation+0x28c>
1c00437c:	01d68733          	add	a4,a3,t4
1c004380:	00074703          	lbu	a4,0(a4)
1c004384:	13370563          	beq	a4,s3,1c0044ae <edgeSegmentation+0x2b2>
1c004388:	01168733          	add	a4,a3,a7
1c00438c:	00074703          	lbu	a4,0(a4)
1c004390:	15370063          	beq	a4,s3,1c0044d0 <edgeSegmentation+0x2d4>
1c004394:	01c68733          	add	a4,a3,t3
1c004398:	00074703          	lbu	a4,0(a4)
1c00439c:	15370963          	beq	a4,s3,1c0044ee <edgeSegmentation+0x2f2>
1c0043a0:	969a                	add	a3,a3,t1
1c0043a2:	0006c703          	lbu	a4,0(a3)
1c0043a6:	f1371ae3          	bne	a4,s3,1c0042ba <edgeSegmentation+0xbe>
            push(pixelStack, pixelNeighbours[i]);
1c0043aa:	854a                	mv	a0,s2
1c0043ac:	859a                	mv	a1,t1
1c0043ae:	271d                	jal	1c004ad4 <push>
                while(!isStackEmpty(pixelStack))
1c0043b0:	854a                	mv	a0,s2
1c0043b2:	105000ef          	jal	ra,1c004cb6 <isStackEmpty>
1c0043b6:	d519                	beqz	a0,1c0042c4 <edgeSegmentation+0xc8>
                if(pixelCount >= MIN_PIXEL_AMOUNT_EDGES_ONLY)
1c0043b8:	03e15603          	lhu	a2,62(sp)
1c0043bc:	3e700793          	li	a5,999
1c0043c0:	02c7e263          	bltu	a5,a2,1c0043e4 <edgeSegmentation+0x1e8>
                printf("label %-3u has %-5u pixels.%c", label, pixelCount,label%3==0?'\n':'\t');
1c0043c4:	0354f6b3          	remu	a3,s1,s5
1c0043c8:	1c00b7b7          	lui	a5,0x1c00b
1c0043cc:	85a6                	mv	a1,s1
1c0043ce:	db078513          	addi	a0,a5,-592 # 1c00adb0 <__clz_tab+0x374>
                label++;
1c0043d2:	0485                	addi	s1,s1,1
1c0043d4:	0ff4f493          	andi	s1,s1,255
                printf("label %-3u has %-5u pixels.%c", label, pixelCount,label%3==0?'\n':'\t');
1c0043d8:	0016b693          	seqz	a3,a3
1c0043dc:	06a5                	addi	a3,a3,9
1c0043de:	52e050ef          	jal	ra,1c00990c <printf>
1c0043e2:	b569                	j	1c00426c <edgeSegmentation+0x70>
                    pEnqueue(labelPQueue, (PQueueNode){label, imageSize - pixelCount, NULL});
1c0043e4:	57b2                	lw	a5,44(sp)
1c0043e6:	de04ad33          	p.insert	s10,s1,15,0
1c0043ea:	5522                	lw	a0,40(sp)
1c0043ec:	40c78633          	sub	a2,a5,a2
1c0043f0:	df062d33          	p.insert	s10,a2,15,16
1c0043f4:	85ea                	mv	a1,s10
1c0043f6:	4601                	li	a2,0
1c0043f8:	2171                	jal	1c004884 <pEnqueue>
1c0043fa:	03e15603          	lhu	a2,62(sp)
1c0043fe:	b7d9                	j	1c0043c4 <edgeSegmentation+0x1c8>
            push(pixelStack, pixelNeighbours[i]);
1c004400:	854a                	mv	a0,s2
1c004402:	c61a                	sw	t1,12(sp)
1c004404:	ce32                	sw	a2,28(sp)
1c004406:	d23a                	sw	a4,36(sp)
1c004408:	ca46                	sw	a7,20(sp)
1c00440a:	c872                	sw	t3,16(sp)
1c00440c:	cc76                	sw	t4,24(sp)
1c00440e:	d07a                	sw	t5,32(sp)
1c004410:	25d1                	jal	1c004ad4 <push>
1c004412:	002ca683          	lw	a3,2(s9)
1c004416:	5712                	lw	a4,36(sp)
1c004418:	5f02                	lw	t5,32(sp)
1c00441a:	4ee2                	lw	t4,24(sp)
        if(pixel == MAX_PIXEL_VALUE)
1c00441c:	00e685b3          	add	a1,a3,a4
1c004420:	0005c583          	lbu	a1,0(a1)
1c004424:	4e42                	lw	t3,16(sp)
1c004426:	48d2                	lw	a7,20(sp)
1c004428:	4672                	lw	a2,28(sp)
1c00442a:	4332                	lw	t1,12(sp)
1c00442c:	f3359ce3          	bne	a1,s3,1c004364 <edgeSegmentation+0x168>
            push(pixelStack, pixelNeighbours[i]);
1c004430:	85ba                	mv	a1,a4
1c004432:	854a                	mv	a0,s2
1c004434:	c61a                	sw	t1,12(sp)
1c004436:	ce32                	sw	a2,28(sp)
1c004438:	ca46                	sw	a7,20(sp)
1c00443a:	c872                	sw	t3,16(sp)
1c00443c:	cc76                	sw	t4,24(sp)
1c00443e:	d07a                	sw	t5,32(sp)
1c004440:	2d51                	jal	1c004ad4 <push>
1c004442:	002ca683          	lw	a3,2(s9)
1c004446:	5f02                	lw	t5,32(sp)
1c004448:	4ee2                	lw	t4,24(sp)
1c00444a:	4e42                	lw	t3,16(sp)
        if(pixel == MAX_PIXEL_VALUE)
1c00444c:	01e68733          	add	a4,a3,t5
1c004450:	00074703          	lbu	a4,0(a4)
1c004454:	48d2                	lw	a7,20(sp)
1c004456:	4672                	lw	a2,28(sp)
1c004458:	4332                	lw	t1,12(sp)
1c00445a:	f1371be3          	bne	a4,s3,1c004370 <edgeSegmentation+0x174>
            push(pixelStack, pixelNeighbours[i]);
1c00445e:	85fa                	mv	a1,t5
1c004460:	854a                	mv	a0,s2
1c004462:	c61a                	sw	t1,12(sp)
1c004464:	ce32                	sw	a2,28(sp)
1c004466:	ca46                	sw	a7,20(sp)
1c004468:	c872                	sw	t3,16(sp)
1c00446a:	cc76                	sw	t4,24(sp)
1c00446c:	25a5                	jal	1c004ad4 <push>
1c00446e:	002ca683          	lw	a3,2(s9)
1c004472:	4672                	lw	a2,28(sp)
1c004474:	4ee2                	lw	t4,24(sp)
1c004476:	4e42                	lw	t3,16(sp)
        if(pixel == MAX_PIXEL_VALUE)
1c004478:	00c68733          	add	a4,a3,a2
1c00447c:	00074703          	lbu	a4,0(a4)
1c004480:	48d2                	lw	a7,20(sp)
1c004482:	4332                	lw	t1,12(sp)
1c004484:	ef371ce3          	bne	a4,s3,1c00437c <edgeSegmentation+0x180>
            push(pixelStack, pixelNeighbours[i]);
1c004488:	85b2                	mv	a1,a2
1c00448a:	854a                	mv	a0,s2
1c00448c:	c61a                	sw	t1,12(sp)
1c00448e:	ca46                	sw	a7,20(sp)
1c004490:	c872                	sw	t3,16(sp)
1c004492:	cc76                	sw	t4,24(sp)
1c004494:	2581                	jal	1c004ad4 <push>
1c004496:	002ca683          	lw	a3,2(s9)
1c00449a:	4ee2                	lw	t4,24(sp)
1c00449c:	4e42                	lw	t3,16(sp)
1c00449e:	48d2                	lw	a7,20(sp)
        if(pixel == MAX_PIXEL_VALUE)
1c0044a0:	01d68733          	add	a4,a3,t4
1c0044a4:	00074703          	lbu	a4,0(a4)
1c0044a8:	4332                	lw	t1,12(sp)
1c0044aa:	ed371fe3          	bne	a4,s3,1c004388 <edgeSegmentation+0x18c>
            push(pixelStack, pixelNeighbours[i]);
1c0044ae:	85f6                	mv	a1,t4
1c0044b0:	854a                	mv	a0,s2
1c0044b2:	c61a                	sw	t1,12(sp)
1c0044b4:	ca46                	sw	a7,20(sp)
1c0044b6:	c872                	sw	t3,16(sp)
1c0044b8:	2d31                	jal	1c004ad4 <push>
1c0044ba:	002ca683          	lw	a3,2(s9)
1c0044be:	48d2                	lw	a7,20(sp)
1c0044c0:	4e42                	lw	t3,16(sp)
1c0044c2:	4332                	lw	t1,12(sp)
        if(pixel == MAX_PIXEL_VALUE)
1c0044c4:	01168733          	add	a4,a3,a7
1c0044c8:	00074703          	lbu	a4,0(a4)
1c0044cc:	ed3714e3          	bne	a4,s3,1c004394 <edgeSegmentation+0x198>
            push(pixelStack, pixelNeighbours[i]);
1c0044d0:	85c6                	mv	a1,a7
1c0044d2:	854a                	mv	a0,s2
1c0044d4:	c61a                	sw	t1,12(sp)
1c0044d6:	c872                	sw	t3,16(sp)
1c0044d8:	2bf5                	jal	1c004ad4 <push>
1c0044da:	002ca683          	lw	a3,2(s9)
1c0044de:	4e42                	lw	t3,16(sp)
1c0044e0:	4332                	lw	t1,12(sp)
        if(pixel == MAX_PIXEL_VALUE)
1c0044e2:	01c68733          	add	a4,a3,t3
1c0044e6:	00074703          	lbu	a4,0(a4)
1c0044ea:	eb371be3          	bne	a4,s3,1c0043a0 <edgeSegmentation+0x1a4>
            push(pixelStack, pixelNeighbours[i]);
1c0044ee:	85f2                	mv	a1,t3
1c0044f0:	854a                	mv	a0,s2
1c0044f2:	c61a                	sw	t1,12(sp)
1c0044f4:	23c5                	jal	1c004ad4 <push>
1c0044f6:	002ca683          	lw	a3,2(s9)
1c0044fa:	4332                	lw	t1,12(sp)
1c0044fc:	b555                	j	1c0043a0 <edgeSegmentation+0x1a4>

1c0044fe <cl_maskErosion>:
#define MAX(x,y) (x>y?x:y)
#define MIN(x,y) (x>y?y:x)


void cl_maskErosion(void * args)
{
1c0044fe:	7139                	addi	sp,sp,-64
1c004500:	d05e                	sw	s7,32(sp)
    const bool mask[8] = {false, true, false, true, false, true, false, true };
    #endif

    uint8_t coreId = pi_core_id();
    clusterCallArgs * restrict realArgs = (clusterCallArgs *)args;
    PGMImage * restrict img = realArgs->inputImage;
1c004502:	00052b83          	lw	s7,0(a0)
{
1c004506:	dc26                	sw	s1,56(sp)
1c004508:	d652                	sw	s4,44(sp)
1c00450a:	de22                	sw	s0,60(sp)
1c00450c:	da4a                	sw	s2,52(sp)
1c00450e:	d84e                	sw	s3,48(sp)
1c004510:	d456                	sw	s5,40(sp)
1c004512:	d25a                	sw	s6,36(sp)
1c004514:	ce62                	sw	s8,28(sp)
1c004516:	cc66                	sw	s9,24(sp)
1c004518:	ca6a                	sw	s10,20(sp)
1c00451a:	c86e                	sw	s11,16(sp)
    const uint16_t imageWidth = img->x, imageHeight = img->y;

    uint16_t pixel, line;
    uint16_t pixelNeighbours[8];
    uint8_t i, j;
    uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c00451c:	00854703          	lbu	a4,8(a0)
    const uint16_t imageWidth = img->x, imageHeight = img->y;
1c004520:	001bca83          	lbu	s5,1(s7)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c004524:	014028f3          	csrr	a7,uhartid
  return hart_id & 0x01f;
1c004528:	f458b8b3          	p.bclr	a7,a7,26,5
    uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c00452c:	00ea87b3          	add	a5,s5,a4
1c004530:	17fd                	addi	a5,a5,-1
1c004532:	02e7c7b3          	div	a5,a5,a4
    const uint16_t imageWidth = img->x, imageHeight = img->y;
1c004536:	000bc683          	lbu	a3,0(s7)
    PGMImage * restrict erodedImg = realArgs->outputImage;
1c00453a:	4148                	lw	a0,4(a0)
    const uint16_t imageWidth = img->x, imageHeight = img->y;
1c00453c:	1006d4b3          	p.exthz	s1,a3
1c004540:	c636                	sw	a3,12(sp)
    uint8_t beginning = coreId*linesPerCore;
1c004542:	00f888db          	p.mac	a7,a7,a5,zero
    uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c004546:	ee87b7b3          	p.bclr	a5,a5,23,8
    uint8_t beginning = coreId*linesPerCore;
1c00454a:	0ff8f893          	andi	a7,a7,255
    uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c00454e:	97c6                	add	a5,a5,a7
1c004550:	0557c7b3          	p.min	a5,a5,s5
1c004554:	0ff7f793          	andi	a5,a5,255


    for(j = beginning, line = beginning * imageWidth; j < end; ++j, line += imageWidth)
1c004558:	02988a33          	mul	s4,a7,s1
1c00455c:	0cf8f963          	bleu	a5,a7,1c00462e <cl_maskErosion+0x130>
1c004560:	c6f9                	beqz	a3,1c00462e <cl_maskErosion+0x130>
                erodedImg->data[pixelNeighbours[2]] = mask[2] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[2]];
                erodedImg->data[pixelNeighbours[3]] = mask[3] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[3]];
                erodedImg->data[pixelNeighbours[4]] = mask[4] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[4]];
                erodedImg->data[pixelNeighbours[5]] = mask[5] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[5]];
                erodedImg->data[pixelNeighbours[6]] = mask[6] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[6]];
                erodedImg->data[pixelNeighbours[7]] = mask[7] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c004562:	fff8cb13          	not	s6,a7
1c004566:	9b3e                	add	s6,s6,a5
1c004568:	00188713          	addi	a4,a7,1
1c00456c:	0ffb7b13          	andi	s6,s6,255
                erodedImg->data[pixelNeighbours[0]] = mask[0] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c004570:	5c79                	li	s8,-2
1c004572:	10076733          	p.extbs	a4,a4
1c004576:	1007e7b3          	p.extbs	a5,a5
1c00457a:	0ff8f413          	andi	s0,a7,255
1c00457e:	1afd                	addi	s5,s5,-1
            if(i == 0 || j == 0 || i == imageWidth -1 || j == imageHeight -1)
1c004580:	fff68993          	addi	s3,a3,-1
                erodedImg->data[pixelNeighbours[0]] = mask[0] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c004584:	409c0c33          	sub	s8,s8,s1
                erodedImg->data[pixelNeighbours[2]] = mask[2] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[2]];
1c004588:	ffe48c93          	addi	s9,s1,-2
                erodedImg->data[pixelNeighbours[3]] = mask[3] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[3]];
1c00458c:	fff48d13          	addi	s10,s1,-1
                erodedImg->data[pixelNeighbours[7]] = mask[7] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c004590:	fff4cd93          	not	s11,s1
1c004594:	0b05                	addi	s6,s6,1
1c004596:	0ee7ec63          	bltu	a5,a4,1c00468e <cl_maskErosion+0x190>
1c00459a:	cbf5                	beqz	a5,1c00468e <cl_maskErosion+0x190>
1c00459c:	047b407b          	lp.setup	x0,s6,1c00462a <cl_maskErosion+0x12c>
        for(i = 0, pixel = line; i < imageWidth; ++i, ++pixel)
1c0045a0:	4732                	lw	a4,12(sp)
            if(i == 0 || j == 0 || i == imageWidth -1 || j == imageHeight -1)
1c0045a2:	86d2                	mv	a3,s4
1c0045a4:	4581                	li	a1,0
        for(i = 0, pixel = line; i < imageWidth; ++i, ++pixel)
1c0045a6:	fff70613          	addi	a2,a4,-1
1c0045aa:	0ff67613          	andi	a2,a2,255
1c0045ae:	4701                	li	a4,0
1c0045b0:	0605                	addi	a2,a2,1
1c0045b2:	037640fb          	lp.setup	x1,a2,1c004620 <cl_maskErosion+0x122>
1c0045b6:	00168793          	addi	a5,a3,1
1c0045ba:	00252803          	lw	a6,2(a0)
1c0045be:	1007d7b3          	p.exthz	a5,a5
            if(i == 0 || j == 0 || i == imageWidth -1 || j == imageHeight -1)
1c0045c2:	c741                	beqz	a4,1c00464a <cl_maskErosion+0x14c>
1c0045c4:	c059                	beqz	s0,1c00464a <cl_maskErosion+0x14c>
1c0045c6:	08b98263          	beq	s3,a1,1c00464a <cl_maskErosion+0x14c>
1c0045ca:	091a8063          	beq	s5,a7,1c00464a <cl_maskErosion+0x14c>
            else if(img->data[pixel] != MIN_PIXEL_VALUE)
1c0045ce:	002ba303          	lw	t1,2(s7)
                erodedImg->data[pixelNeighbours[0]] = mask[0] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c0045d2:	018783b3          	add	t2,a5,s8
                pixelNeighbours[1] = pixel - 1;              /* left */
1c0045d6:	fff68293          	addi	t0,a3,-1
            else if(img->data[pixel] != MIN_PIXEL_VALUE)
1c0045da:	9336                	add	t1,t1,a3
1c0045dc:	00034903          	lbu	s2,0(t1)
                erodedImg->data[pixelNeighbours[2]] = mask[2] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[2]];
1c0045e0:	01978fb3          	add	t6,a5,s9
                erodedImg->data[pixelNeighbours[3]] = mask[3] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[3]];
1c0045e4:	01a78f33          	add	t5,a5,s10
                erodedImg->data[pixelNeighbours[4]] = mask[4] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[4]];
1c0045e8:	00f48eb3          	add	t4,s1,a5
                erodedImg->data[pixelNeighbours[6]] = mask[6] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[6]];
1c0045ec:	40978e33          	sub	t3,a5,s1
                erodedImg->data[pixelNeighbours[7]] = mask[7] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c0045f0:	01b78333          	add	t1,a5,s11
                erodedImg->data[pixelNeighbours[0]] = mask[0] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c0045f4:	1003d3b3          	p.exthz	t2,t2
                erodedImg->data[pixelNeighbours[1]] = mask[1] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[1]];
1c0045f8:	1002d2b3          	p.exthz	t0,t0
                erodedImg->data[pixelNeighbours[2]] = mask[2] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[2]];
1c0045fc:	100fdfb3          	p.exthz	t6,t6
                erodedImg->data[pixelNeighbours[3]] = mask[3] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[3]];
1c004600:	100f5f33          	p.exthz	t5,t5
                erodedImg->data[pixelNeighbours[4]] = mask[4] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[4]];
1c004604:	100edeb3          	p.exthz	t4,t4
                erodedImg->data[pixelNeighbours[6]] = mask[6] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[6]];
1c004608:	100e5e33          	p.exthz	t3,t3
                erodedImg->data[pixelNeighbours[7]] = mask[7] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c00460c:	10035333          	p.exthz	t1,t1
            else if(img->data[pixel] != MIN_PIXEL_VALUE)
1c004610:	04090063          	beqz	s2,1c004650 <cl_maskErosion+0x152>
                erodedImg->data[pixel] = img->data[pixel];
1c004614:	012846a3          	p.sb	s2,a3(a6)
        for(i = 0, pixel = line; i < imageWidth; ++i, ++pixel)
1c004618:	0705                	addi	a4,a4,1
1c00461a:	0ff77713          	andi	a4,a4,255
1c00461e:	0585                	addi	a1,a1,1
1c004620:	86be                	mv	a3,a5
    for(j = beginning, line = beginning * imageWidth; j < end; ++j, line += imageWidth)
1c004622:	9a26                	add	s4,s4,s1
1c004624:	0885                	addi	a7,a7,1
1c004626:	100a5a33          	p.exthz	s4,s4
1c00462a:	0ff8f413          	andi	s0,a7,255
            }
}
1c00462e:	5472                	lw	s0,60(sp)
1c004630:	54e2                	lw	s1,56(sp)
1c004632:	5952                	lw	s2,52(sp)
1c004634:	59c2                	lw	s3,48(sp)
1c004636:	5a32                	lw	s4,44(sp)
1c004638:	5aa2                	lw	s5,40(sp)
1c00463a:	5b12                	lw	s6,36(sp)
1c00463c:	5b82                	lw	s7,32(sp)
1c00463e:	4c72                	lw	s8,28(sp)
1c004640:	4ce2                	lw	s9,24(sp)
1c004642:	4d52                	lw	s10,20(sp)
1c004644:	4dc2                	lw	s11,16(sp)
1c004646:	6121                	addi	sp,sp,64
1c004648:	8082                	ret
                erodedImg->data[pixel] = MIN_PIXEL_VALUE;
1c00464a:	000846a3          	p.sb	zero,a3(a6)
1c00464e:	b7e9                	j	1c004618 <cl_maskErosion+0x11a>
                erodedImg->data[pixelNeighbours[0]] = mask[0] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c004650:	000843a3          	p.sb	zero,t2(a6)
                erodedImg->data[pixelNeighbours[1]] = mask[1] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[1]];
1c004654:	00252683          	lw	a3,2(a0)
1c004658:	0006c2a3          	p.sb	zero,t0(a3)
                erodedImg->data[pixelNeighbours[2]] = mask[2] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[2]];
1c00465c:	00252683          	lw	a3,2(a0)
1c004660:	0006cfa3          	p.sb	zero,t6(a3)
                erodedImg->data[pixelNeighbours[3]] = mask[3] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[3]];
1c004664:	00252683          	lw	a3,2(a0)
1c004668:	0006cf23          	p.sb	zero,t5(a3)
                erodedImg->data[pixelNeighbours[4]] = mask[4] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[4]];
1c00466c:	00252683          	lw	a3,2(a0)
1c004670:	0006cea3          	p.sb	zero,t4(a3)
                erodedImg->data[pixelNeighbours[5]] = mask[5] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[5]];
1c004674:	00252683          	lw	a3,2(a0)
1c004678:	0006c7a3          	p.sb	zero,a5(a3)
                erodedImg->data[pixelNeighbours[6]] = mask[6] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[6]];
1c00467c:	00252683          	lw	a3,2(a0)
1c004680:	0006ce23          	p.sb	zero,t3(a3)
                erodedImg->data[pixelNeighbours[7]] = mask[7] ? MIN_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c004684:	00252683          	lw	a3,2(a0)
1c004688:	0006c323          	p.sb	zero,t1(a3)
1c00468c:	b771                	j	1c004618 <cl_maskErosion+0x11a>
1c00468e:	4b05                	li	s6,1
1c004690:	b731                	j	1c00459c <cl_maskErosion+0x9e>

1c004692 <cl_maskDilation>:

void cl_maskDilation(void * args)
{
1c004692:	1101                	addi	sp,sp,-32
1c004694:	ce22                	sw	s0,28(sp)
    const bool mask[8] = {true, true, true, true, true, true, true, true };
    uint8_t coreId = pi_core_id();
    clusterCallArgs * realArgs = (clusterCallArgs *)args;
    PGMImage * img = realArgs->inputImage;
1c004696:	4100                	lw	s0,0(a0)
{
1c004698:	cc26                	sw	s1,24(sp)
1c00469a:	ca4a                	sw	s2,20(sp)
1c00469c:	c84e                	sw	s3,16(sp)
1c00469e:	c652                	sw	s4,12(sp)
1c0046a0:	c456                	sw	s5,8(sp)
1c0046a2:	c25a                	sw	s6,4(sp)
1c0046a4:	c05e                	sw	s7,0(sp)
    const uint16_t imageWidth = img->x, imageHeight = img->y;

    uint16_t pixel, line;
    uint16_t pixelNeighbours[8];
    uint8_t i, j;
    uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c0046a6:	00854703          	lbu	a4,8(a0)
    const uint16_t imageWidth = img->x, imageHeight = img->y;
1c0046aa:	00144f83          	lbu	t6,1(s0)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0046ae:	01402373          	csrr	t1,uhartid
  return hart_id & 0x01f;
1c0046b2:	f4533333          	p.bclr	t1,t1,26,5
    uint8_t linesPerCore = (imageHeight + nOfCores - 1)/nOfCores; /* rounded up */
1c0046b6:	00ef87b3          	add	a5,t6,a4
1c0046ba:	17fd                	addi	a5,a5,-1
1c0046bc:	02e7c7b3          	div	a5,a5,a4
    const uint16_t imageWidth = img->x, imageHeight = img->y;
1c0046c0:	00044903          	lbu	s2,0(s0)
    PGMImage * dilatedImg = realArgs->outputImage;
1c0046c4:	4148                	lw	a0,4(a0)
    uint8_t beginning = coreId*linesPerCore;
1c0046c6:	00f3035b          	p.mac	t1,t1,a5,zero
    uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c0046ca:	ee87b7b3          	p.bclr	a5,a5,23,8
    uint8_t beginning = coreId*linesPerCore;
1c0046ce:	0ff37313          	andi	t1,t1,255
    uint8_t end = MIN(beginning + linesPerCore, imageHeight);
1c0046d2:	979a                	add	a5,a5,t1
1c0046d4:	05f7c7b3          	p.min	a5,a5,t6
1c0046d8:	0ff7f793          	andi	a5,a5,255


    for(j = beginning; j < end; ++j)
1c0046dc:	0af37463          	bleu	a5,t1,1c004784 <cl_maskDilation+0xf2>
1c0046e0:	0a090263          	beqz	s2,1c004784 <cl_maskDilation+0xf2>
                dilatedImg->data[pixelNeighbours[2]] = mask[2] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[2]];
                dilatedImg->data[pixelNeighbours[3]] = mask[3] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[3]];
                dilatedImg->data[pixelNeighbours[4]] = mask[4] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[4]];
                dilatedImg->data[pixelNeighbours[5]] = mask[5] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[5]];
                dilatedImg->data[pixelNeighbours[6]] = mask[6] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[6]];
                dilatedImg->data[pixelNeighbours[7]] = mask[7] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c0046e4:	fff34293          	not	t0,t1
1c0046e8:	92be                	add	t0,t0,a5
1c0046ea:	00130713          	addi	a4,t1,1
1c0046ee:	100953b3          	p.exthz	t2,s2
1c0046f2:	0ff2f293          	andi	t0,t0,255
                dilatedImg->data[pixelNeighbours[0]] = mask[0] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c0046f6:	59f9                	li	s3,-2
1c0046f8:	10076733          	p.extbs	a4,a4
1c0046fc:	1007e7b3          	p.extbs	a5,a5
1c004700:	02730f33          	mul	t5,t1,t2
1c004704:	1ffd                	addi	t6,t6,-1
1c004706:	0ff37e13          	andi	t3,t1,255
            if(i == 0 || j == 0 || i == imageWidth -1 || j == imageHeight -1)
1c00470a:	fff90e93          	addi	t4,s2,-1
            else if(img->data[pixel] != MAX_PIXEL_VALUE)
1c00470e:	0ff00493          	li	s1,255
                dilatedImg->data[pixelNeighbours[0]] = mask[0] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c004712:	407989b3          	sub	s3,s3,t2
                dilatedImg->data[pixelNeighbours[2]] = mask[2] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[2]];
1c004716:	ffe38a13          	addi	s4,t2,-2
                dilatedImg->data[pixelNeighbours[3]] = mask[3] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[3]];
1c00471a:	fff38a93          	addi	s5,t2,-1
                dilatedImg->data[pixelNeighbours[7]] = mask[7] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c00471e:	fff3cb13          	not	s6,t2
1c004722:	0285                	addi	t0,t0,1
1c004724:	0ee7e863          	bltu	a5,a4,1c004814 <cl_maskDilation+0x182>
1c004728:	c7f5                	beqz	a5,1c004814 <cl_maskDilation+0x182>
1c00472a:	02b2c07b          	lp.setup	x0,t0,1c004780 <cl_maskDilation+0xee>
        for(i = 0, pixel = line; i < imageWidth; ++i, ++pixel)
1c00472e:	fff90613          	addi	a2,s2,-1
1c004732:	0ff67613          	andi	a2,a2,255
1c004736:	877a                	mv	a4,t5
            if(i == 0 || j == 0 || i == imageWidth -1 || j == imageHeight -1)
1c004738:	4581                	li	a1,0
        for(i = 0, pixel = line; i < imageWidth; ++i, ++pixel)
1c00473a:	4681                	li	a3,0
1c00473c:	0605                	addi	a2,a2,1
1c00473e:	01c640fb          	lp.setup	x1,a2,1c004776 <cl_maskDilation+0xe4>
1c004742:	00170793          	addi	a5,a4,1
1c004746:	00252803          	lw	a6,2(a0)
1c00474a:	1007d7b3          	p.exthz	a5,a5
            if(i == 0 || j == 0 || i == imageWidth -1 || j == imageHeight -1)
1c00474e:	c6a9                	beqz	a3,1c004798 <cl_maskDilation+0x106>
1c004750:	040e0463          	beqz	t3,1c004798 <cl_maskDilation+0x106>
1c004754:	04be8263          	beq	t4,a1,1c004798 <cl_maskDilation+0x106>
1c004758:	046f8063          	beq	t6,t1,1c004798 <cl_maskDilation+0x106>
            else if(img->data[pixel] != MAX_PIXEL_VALUE)
1c00475c:	00242883          	lw	a7,2(s0)
1c004760:	98ba                	add	a7,a7,a4
1c004762:	0008c883          	lbu	a7,0(a7)
1c004766:	02988c63          	beq	a7,s1,1c00479e <cl_maskDilation+0x10c>
                dilatedImg->data[pixel] = img->data[pixel];
1c00476a:	01184723          	p.sb	a7,a4(a6)
        for(i = 0, pixel = line; i < imageWidth; ++i, ++pixel)
1c00476e:	0685                	addi	a3,a3,1
1c004770:	0ff6f693          	andi	a3,a3,255
1c004774:	0585                	addi	a1,a1,1
1c004776:	873e                	mv	a4,a5
1c004778:	0305                	addi	t1,t1,1
1c00477a:	9f1e                	add	t5,t5,t2
1c00477c:	100f5f33          	p.exthz	t5,t5
    for(j = beginning; j < end; ++j)
1c004780:	0ff37e13          	andi	t3,t1,255
            }
    }
}
1c004784:	4472                	lw	s0,28(sp)
1c004786:	44e2                	lw	s1,24(sp)
1c004788:	4952                	lw	s2,20(sp)
1c00478a:	49c2                	lw	s3,16(sp)
1c00478c:	4a32                	lw	s4,12(sp)
1c00478e:	4aa2                	lw	s5,8(sp)
1c004790:	4b12                	lw	s6,4(sp)
1c004792:	4b82                	lw	s7,0(sp)
1c004794:	6105                	addi	sp,sp,32
1c004796:	8082                	ret
                dilatedImg->data[pixel] = MIN_PIXEL_VALUE;
1c004798:	00084723          	p.sb	zero,a4(a6)
1c00479c:	bfc9                	j	1c00476e <cl_maskDilation+0xdc>
                dilatedImg->data[pixelNeighbours[0]] = mask[0] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[0]];
1c00479e:	013788b3          	add	a7,a5,s3
1c0047a2:	5bfd                	li	s7,-1
1c0047a4:	1008d8b3          	p.exthz	a7,a7
1c0047a8:	017848a3          	p.sb	s7,a7(a6)
                dilatedImg->data[pixelNeighbours[1]] = mask[1] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[1]];
1c0047ac:	00252803          	lw	a6,2(a0)
                pixelNeighbours[1] = pixel - 1;              /* left */
1c0047b0:	177d                	addi	a4,a4,-1
                dilatedImg->data[pixelNeighbours[1]] = mask[1] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[1]];
1c0047b2:	10075733          	p.exthz	a4,a4
1c0047b6:	01784723          	p.sb	s7,a4(a6)
                dilatedImg->data[pixelNeighbours[2]] = mask[2] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[2]];
1c0047ba:	00252803          	lw	a6,2(a0)
1c0047be:	01478733          	add	a4,a5,s4
1c0047c2:	10075733          	p.exthz	a4,a4
1c0047c6:	01784723          	p.sb	s7,a4(a6)
                dilatedImg->data[pixelNeighbours[3]] = mask[3] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[3]];
1c0047ca:	00252803          	lw	a6,2(a0)
1c0047ce:	01578733          	add	a4,a5,s5
1c0047d2:	10075733          	p.exthz	a4,a4
1c0047d6:	01784723          	p.sb	s7,a4(a6)
                dilatedImg->data[pixelNeighbours[4]] = mask[4] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[4]];
1c0047da:	00252803          	lw	a6,2(a0)
1c0047de:	00f38733          	add	a4,t2,a5
1c0047e2:	10075733          	p.exthz	a4,a4
1c0047e6:	01784723          	p.sb	s7,a4(a6)
                dilatedImg->data[pixelNeighbours[5]] = mask[5] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[5]];
1c0047ea:	00252703          	lw	a4,2(a0)
                dilatedImg->data[pixelNeighbours[6]] = mask[6] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[6]];
1c0047ee:	40778833          	sub	a6,a5,t2
1c0047f2:	10085833          	p.exthz	a6,a6
                dilatedImg->data[pixelNeighbours[5]] = mask[5] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[5]];
1c0047f6:	017747a3          	p.sb	s7,a5(a4)
                dilatedImg->data[pixelNeighbours[6]] = mask[6] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[6]];
1c0047fa:	00252883          	lw	a7,2(a0)
                dilatedImg->data[pixelNeighbours[7]] = mask[7] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c0047fe:	01678733          	add	a4,a5,s6
1c004802:	10075733          	p.exthz	a4,a4
                dilatedImg->data[pixelNeighbours[6]] = mask[6] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[6]];
1c004806:	0178c823          	p.sb	s7,a6(a7)
                dilatedImg->data[pixelNeighbours[7]] = mask[7] ? MAX_PIXEL_VALUE : img->data[pixelNeighbours[7]];
1c00480a:	00252803          	lw	a6,2(a0)
1c00480e:	01784723          	p.sb	s7,a4(a6)
1c004812:	bfb1                	j	1c00476e <cl_maskDilation+0xdc>
1c004814:	4285                	li	t0,1
1c004816:	bf11                	j	1c00472a <cl_maskDilation+0x98>

1c004818 <createPQueue>:
}

PQueueNode pQueuePeek(PQueue* pq)
{
    return *(pq->pQueueItem);
}
1c004818:	7135                	addi	sp,sp,-160
1c00481a:	858a                	mv	a1,sp
1c00481c:	4529                	li	a0,10
1c00481e:	cf06                	sw	ra,156(sp)
1c004820:	cd22                	sw	s0,152(sp)
1c004822:	10a020ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
1c004826:	08c14783          	lbu	a5,140(sp)
1c00482a:	0ff7f793          	andi	a5,a5,255
1c00482e:	ef99                	bnez	a5,1c00484c <createPQueue+0x34>
1c004830:	4689                	li	a3,2
1c004832:	00204737          	lui	a4,0x204
1c004836:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00483a:	03c76783          	p.elw	a5,60(a4)
1c00483e:	00d72223          	sw	a3,4(a4)
1c004842:	08c14783          	lbu	a5,140(sp)
1c004846:	0ff7f793          	andi	a5,a5,255
1c00484a:	d7f5                	beqz	a5,1c004836 <createPQueue+0x1e>
1c00484c:	4402                	lw	s0,0(sp)
1c00484e:	cc09                	beqz	s0,1c004868 <createPQueue+0x50>
1c004850:	87a2                	mv	a5,s0
1c004852:	0007a22b          	p.sw	zero,4(a5!)
1c004856:	0007a22b          	p.sw	zero,4(a5!)
1c00485a:	00079023          	sh	zero,0(a5)
1c00485e:	8522                	mv	a0,s0
1c004860:	40fa                	lw	ra,156(sp)
1c004862:	446a                	lw	s0,152(sp)
1c004864:	610d                	addi	sp,sp,160
1c004866:	8082                	ret
1c004868:	1c00b537          	lui	a0,0x1c00b
1c00486c:	dd050513          	addi	a0,a0,-560 # 1c00add0 <__clz_tab+0x394>
1c004870:	73d040ef          	jal	ra,1c0097ac <puts>
1c004874:	b7ed                	j	1c00485e <createPQueue+0x46>

1c004876 <pQueueIsEmpty>:
1c004876:	00855503          	lhu	a0,8(a0)
1c00487a:	00153513          	seqz	a0,a0
1c00487e:	0ff57513          	andi	a0,a0,255
1c004882:	8082                	ret

1c004884 <pEnqueue>:

void pEnqueue(PQueue* pq, PQueueNode pqi)
{
1c004884:	7135                	addi	sp,sp,-160
1c004886:	cd22                	sw	s0,152(sp)
1c004888:	cb26                	sw	s1,148(sp)
1c00488a:	842a                	mv	s0,a0
1c00488c:	84ae                	mv	s1,a1
    pi_cl_alloc_req_t alloc_req;

    pi_cl_l2_malloc(sizeof(PQueueNode), &alloc_req);
1c00488e:	4521                	li	a0,8
1c004890:	858a                	mv	a1,sp
{
1c004892:	c94a                	sw	s2,144(sp)
1c004894:	cf06                	sw	ra,156(sp)
1c004896:	8932                	mv	s2,a2
    pi_cl_l2_malloc(sizeof(PQueueNode), &alloc_req);
1c004898:	094020ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
  while((*(volatile char *)&req->done) == 0)
1c00489c:	08c14783          	lbu	a5,140(sp)
1c0048a0:	0104d593          	srli	a1,s1,0x10
1c0048a4:	0ff7f793          	andi	a5,a5,255
1c0048a8:	ef99                	bnez	a5,1c0048c6 <pEnqueue+0x42>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0048aa:	4689                	li	a3,2
1c0048ac:	00204737          	lui	a4,0x204
1c0048b0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0048b4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0048b8:	00d72223          	sw	a3,4(a4)
1c0048bc:	08c14783          	lbu	a5,140(sp)
1c0048c0:	0ff7f793          	andi	a5,a5,255
1c0048c4:	d7f5                	beqz	a5,1c0048b0 <pEnqueue+0x2c>
  return req->result;
1c0048c6:	4782                	lw	a5,0(sp)
    PQueueNode* newNode = pi_cl_l2_malloc_wait(&alloc_req);
    if(newNode == NULL)
1c0048c8:	c3a5                	beqz	a5,1c004928 <pEnqueue+0xa4>
    }

    /* copy the contents of the new item to the new node */
    *(newNode) = pqi;

    if(pq->size == 0 || pq->tail->priority < pqi.priority)
1c0048ca:	00845703          	lhu	a4,8(s0)
    *(newNode) = pqi;
1c0048ce:	c384                	sw	s1,0(a5)
1c0048d0:	0127a223          	sw	s2,4(a5)
    if(pq->size == 0 || pq->tail->priority < pqi.priority)
1c0048d4:	cb0d                	beqz	a4,1c004906 <pEnqueue+0x82>
1c0048d6:	4054                	lw	a3,4(s0)
1c0048d8:	0026d603          	lhu	a2,2(a3)
1c0048dc:	04b66263          	bltu	a2,a1,1c004920 <pEnqueue+0x9c>
        pq->tail = newNode;

    }
    else
    {
        PQueueNode** pqn = &(pq->pQueueItem);
1c0048e0:	4010                	lw	a2,0(s0)

        while((*pqn)->priority < pqi.priority)
1c0048e2:	00265683          	lhu	a3,2(a2)
1c0048e6:	00b6e663          	bltu	a3,a1,1c0048f2 <pEnqueue+0x6e>
        PQueueNode** pqn = &(pq->pQueueItem);
1c0048ea:	85a2                	mv	a1,s0
1c0048ec:	86b2                	mv	a3,a2
1c0048ee:	a809                	j	1c004900 <pEnqueue+0x7c>
1c0048f0:	8636                	mv	a2,a3
            pqn = &((*pqn)->nextNode);
1c0048f2:	4254                	lw	a3,4(a2)
        while((*pqn)->priority < pqi.priority)
1c0048f4:	0026d503          	lhu	a0,2(a3)
1c0048f8:	feb56ce3          	bltu	a0,a1,1c0048f0 <pEnqueue+0x6c>
            pqn = &((*pqn)->nextNode);
1c0048fc:	00460593          	addi	a1,a2,4

        newNode->nextNode = *pqn;
1c004900:	c3d4                	sw	a3,4(a5)
        *pqn = newNode;
1c004902:	c19c                	sw	a5,0(a1)
1c004904:	a029                	j	1c00490e <pEnqueue+0x8a>
        newNode->nextNode = NULL;
1c004906:	0007a223          	sw	zero,4(a5)
            pq->pQueueItem = newNode;
1c00490a:	c01c                	sw	a5,0(s0)
        pq->tail = newNode;
1c00490c:	c05c                	sw	a5,4(s0)
    }

    pq->size += 1;
1c00490e:	0705                	addi	a4,a4,1
1c004910:	00e41423          	sh	a4,8(s0)
}
1c004914:	40fa                	lw	ra,156(sp)
1c004916:	446a                	lw	s0,152(sp)
1c004918:	44da                	lw	s1,148(sp)
1c00491a:	494a                	lw	s2,144(sp)
1c00491c:	610d                	addi	sp,sp,160
1c00491e:	8082                	ret
        newNode->nextNode = NULL;
1c004920:	0007a223          	sw	zero,4(a5)
            pq->tail->nextNode = newNode;
1c004924:	c2dc                	sw	a5,4(a3)
1c004926:	b7dd                	j	1c00490c <pEnqueue+0x88>
        printf("Allocation of memory failed on pEnqueue\n");
1c004928:	1c00b537          	lui	a0,0x1c00b
1c00492c:	e2850513          	addi	a0,a0,-472 # 1c00ae28 <__clz_tab+0x3ec>
1c004930:	67d040ef          	jal	ra,1c0097ac <puts>
}
1c004934:	40fa                	lw	ra,156(sp)
1c004936:	446a                	lw	s0,152(sp)
1c004938:	44da                	lw	s1,148(sp)
1c00493a:	494a                	lw	s2,144(sp)
1c00493c:	610d                	addi	sp,sp,160
1c00493e:	8082                	ret

1c004940 <pDequeue>:

PQueueNode pDequeue(PQueue* pq)
{
    if(pq->size == 0)
1c004940:	00855783          	lhu	a5,8(a0)
{
1c004944:	7131                	addi	sp,sp,-192
1c004946:	df06                	sw	ra,188(sp)
1c004948:	dd22                	sw	s0,184(sp)
1c00494a:	db26                	sw	s1,180(sp)
1c00494c:	d94a                	sw	s2,176(sp)
1c00494e:	d74e                	sw	s3,172(sp)
    if(pq->size == 0)
1c004950:	c3bd                	beqz	a5,1c0049b6 <pDequeue+0x76>
        printf("Cannot dequeue empty priority queue. \n");
        #endif
        return (PQueueNode){-1, -1, NULL};
    }

    PQueueNode* pqn = pq->pQueueItem;
1c004952:	411c                	lw	a5,0(a0)
1c004954:	842a                	mv	s0,a0

    PQueueNode pqi = *pqn;

    pi_cl_free_req_t free_req;

    pi_cl_l2_free(pqn, sizeof(PQueueNode), &free_req);
1c004956:	0070                	addi	a2,sp,12
    pq->pQueueItem = pq->pQueueItem->nextNode;
1c004958:	43c4                	lw	s1,4(a5)
    PQueueNode pqi = *pqn;
1c00495a:	0007d983          	lhu	s3,0(a5)
    pi_cl_l2_free(pqn, sizeof(PQueueNode), &free_req);
1c00495e:	853e                	mv	a0,a5
1c004960:	45a1                	li	a1,8
    pq->pQueueItem = pq->pQueueItem->nextNode;
1c004962:	c004                	sw	s1,0(s0)
    PQueueNode pqi = *pqn;
1c004964:	0027d903          	lhu	s2,2(a5)
    pi_cl_l2_free(pqn, sizeof(PQueueNode), &free_req);
1c004968:	7cd010ef          	jal	ra,1c006934 <pi_cl_l2_free>
  while((*(volatile char *)&req->done) == 0)
1c00496c:	09c14783          	lbu	a5,156(sp)
1c004970:	0ff7f793          	andi	a5,a5,255
1c004974:	ef99                	bnez	a5,1c004992 <pDequeue+0x52>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004976:	4689                	li	a3,2
1c004978:	00204737          	lui	a4,0x204
1c00497c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004980:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004984:	00d72223          	sw	a3,4(a4)
1c004988:	09c14783          	lbu	a5,156(sp)
1c00498c:	0ff7f793          	andi	a5,a5,255
1c004990:	d7f5                	beqz	a5,1c00497c <pDequeue+0x3c>
    pi_cl_l2_free_wait(&free_req);

    pq->size -= 1;
1c004992:	00845783          	lhu	a5,8(s0)

    return pqi;
}
1c004996:	50fa                	lw	ra,188(sp)
    return pqi;
1c004998:	4501                	li	a0,0
    pq->size -= 1;
1c00499a:	17fd                	addi	a5,a5,-1
1c00499c:	00f41423          	sh	a5,8(s0)
}
1c0049a0:	546a                	lw	s0,184(sp)
    return pqi;
1c0049a2:	de09a533          	p.insert	a0,s3,15,0
1c0049a6:	df092533          	p.insert	a0,s2,15,16
1c0049aa:	85a6                	mv	a1,s1
}
1c0049ac:	594a                	lw	s2,176(sp)
1c0049ae:	54da                	lw	s1,180(sp)
1c0049b0:	59ba                	lw	s3,172(sp)
1c0049b2:	6129                	addi	sp,sp,192
1c0049b4:	8082                	ret
        printf("Cannot dequeue empty priority queue. \n");
1c0049b6:	1c00b537          	lui	a0,0x1c00b
1c0049ba:	e0050513          	addi	a0,a0,-512 # 1c00ae00 <__clz_tab+0x3c4>
1c0049be:	5ef040ef          	jal	ra,1c0097ac <puts>
}
1c0049c2:	50fa                	lw	ra,188(sp)
1c0049c4:	546a                	lw	s0,184(sp)
1c0049c6:	54da                	lw	s1,180(sp)
1c0049c8:	594a                	lw	s2,176(sp)
1c0049ca:	59ba                	lw	s3,172(sp)
        return (PQueueNode){-1, -1, NULL};
1c0049cc:	03f06557          	pv.add.sci.h	a0,zero,-1
1c0049d0:	4581                	li	a1,0
}
1c0049d2:	6129                	addi	sp,sp,192
1c0049d4:	8082                	ret

1c0049d6 <createStack>:
#include <stdlib.h>

#include "stack.h"

Stack* createStack()
{
1c0049d6:	7169                	addi	sp,sp,-304
    pi_cl_alloc_req_t alloc_req, alloc_reqn;
    Stack* s;

    pi_cl_l2_malloc(sizeof(Stack), &alloc_req);
1c0049d8:	858a                	mv	a1,sp
1c0049da:	4521                	li	a0,8
{
1c0049dc:	12112623          	sw	ra,300(sp)
1c0049e0:	12812423          	sw	s0,296(sp)
    pi_cl_l2_malloc(sizeof(Stack), &alloc_req);
1c0049e4:	749010ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
  while((*(volatile char *)&req->done) == 0)
1c0049e8:	08c14783          	lbu	a5,140(sp)
1c0049ec:	0ff7f793          	andi	a5,a5,255
1c0049f0:	ef99                	bnez	a5,1c004a0e <createStack+0x38>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0049f2:	4689                	li	a3,2
1c0049f4:	00204737          	lui	a4,0x204
1c0049f8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0049fc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004a00:	00d72223          	sw	a3,4(a4)
1c004a04:	08c14783          	lbu	a5,140(sp)
1c004a08:	0ff7f793          	andi	a5,a5,255
1c004a0c:	d7f5                	beqz	a5,1c0049f8 <createStack+0x22>
  return req->result;
1c004a0e:	4402                	lw	s0,0(sp)
    s = pi_cl_l2_malloc_wait(&alloc_req);

    s->max = STACK_INITIAL_SIZE;
    s->top = 0;
1c004a10:	006407b7          	lui	a5,0x640

    pi_cl_l2_malloc(STACK_INITIAL_SIZE*sizeof(uint16_t), &alloc_reqn);
1c004a14:	090c                	addi	a1,sp,144
    s->top = 0;
1c004a16:	c05c                	sw	a5,4(s0)
    pi_cl_l2_malloc(STACK_INITIAL_SIZE*sizeof(uint16_t), &alloc_reqn);
1c004a18:	0c800513          	li	a0,200
1c004a1c:	711010ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
  while((*(volatile char *)&req->done) == 0)
1c004a20:	11c14783          	lbu	a5,284(sp)
1c004a24:	0ff7f793          	andi	a5,a5,255
1c004a28:	ef99                	bnez	a5,1c004a46 <createStack+0x70>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004a2a:	4689                	li	a3,2
1c004a2c:	00204737          	lui	a4,0x204
1c004a30:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004a34:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004a38:	00d72223          	sw	a3,4(a4)
1c004a3c:	11c14783          	lbu	a5,284(sp)
1c004a40:	0ff7f793          	andi	a5,a5,255
1c004a44:	d7f5                	beqz	a5,1c004a30 <createStack+0x5a>
    s->item = pi_cl_l2_malloc_wait(&alloc_reqn);
1c004a46:	47ca                	lw	a5,144(sp)

    return s;
}
1c004a48:	8522                	mv	a0,s0
1c004a4a:	12c12083          	lw	ra,300(sp)
    s->item = pi_cl_l2_malloc_wait(&alloc_reqn);
1c004a4e:	c01c                	sw	a5,0(s0)
}
1c004a50:	12812403          	lw	s0,296(sp)
1c004a54:	6155                	addi	sp,sp,304
1c004a56:	8082                	ret

1c004a58 <destroyStack>:

void destroyStack(Stack * s)
{
1c004a58:	7129                	addi	sp,sp,-320
    pi_cl_free_req_t free_req, free_reqn;

    pi_cl_l2_free(s->item, (s->max)*sizeof(uint16_t), &free_req);
1c004a5a:	00655583          	lhu	a1,6(a0)
{
1c004a5e:	12812c23          	sw	s0,312(sp)
1c004a62:	842a                	mv	s0,a0
    pi_cl_l2_free(s->item, (s->max)*sizeof(uint16_t), &free_req);
1c004a64:	4108                	lw	a0,0(a0)
1c004a66:	0030                	addi	a2,sp,8
1c004a68:	0586                	slli	a1,a1,0x1
{
1c004a6a:	12112e23          	sw	ra,316(sp)
    pi_cl_l2_free(s->item, (s->max)*sizeof(uint16_t), &free_req);
1c004a6e:	6c7010ef          	jal	ra,1c006934 <pi_cl_l2_free>
  while((*(volatile char *)&req->done) == 0)
1c004a72:	09814783          	lbu	a5,152(sp)
1c004a76:	0ff7f793          	andi	a5,a5,255
1c004a7a:	ef99                	bnez	a5,1c004a98 <destroyStack+0x40>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004a7c:	4689                	li	a3,2
1c004a7e:	00204737          	lui	a4,0x204
1c004a82:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004a86:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004a8a:	00d72223          	sw	a3,4(a4)
1c004a8e:	09814783          	lbu	a5,152(sp)
1c004a92:	0ff7f793          	andi	a5,a5,255
1c004a96:	d7f5                	beqz	a5,1c004a82 <destroyStack+0x2a>
    pi_cl_l2_free_wait(&free_req);

    pi_cl_l2_free(s, sizeof(Stack), &free_reqn);
1c004a98:	0970                	addi	a2,sp,156
1c004a9a:	45a1                	li	a1,8
1c004a9c:	8522                	mv	a0,s0
1c004a9e:	697010ef          	jal	ra,1c006934 <pi_cl_l2_free>
1c004aa2:	12c14783          	lbu	a5,300(sp)
1c004aa6:	0ff7f793          	andi	a5,a5,255
1c004aaa:	ef99                	bnez	a5,1c004ac8 <destroyStack+0x70>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004aac:	4689                	li	a3,2
1c004aae:	00204737          	lui	a4,0x204
1c004ab2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004ab6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004aba:	00d72223          	sw	a3,4(a4)
1c004abe:	12c14783          	lbu	a5,300(sp)
1c004ac2:	0ff7f793          	andi	a5,a5,255
1c004ac6:	d7f5                	beqz	a5,1c004ab2 <destroyStack+0x5a>
    pi_cl_l2_free_wait(&free_reqn);
}
1c004ac8:	13c12083          	lw	ra,316(sp)
1c004acc:	13812403          	lw	s0,312(sp)
1c004ad0:	6131                	addi	sp,sp,320
1c004ad2:	8082                	ret

1c004ad4 <push>:

void push(Stack * s, uint16_t i)
{
1c004ad4:	714d                	addi	sp,sp,-336
1c004ad6:	14812423          	sw	s0,328(sp)
    if(s->top == s->max)
1c004ada:	00655783          	lhu	a5,6(a0)
1c004ade:	00455403          	lhu	s0,4(a0)
{
1c004ae2:	14912223          	sw	s1,324(sp)
1c004ae6:	13312e23          	sw	s3,316(sp)
1c004aea:	14112623          	sw	ra,332(sp)
1c004aee:	15212023          	sw	s2,320(sp)
1c004af2:	84aa                	mv	s1,a0
1c004af4:	89ae                	mv	s3,a1
    if(s->top == s->max)
1c004af6:	02878763          	beq	a5,s0,1c004b24 <push+0x50>
1c004afa:	00052903          	lw	s2,0(a0)
        pi_cl_l2_free_wait(&free_req);

        s->item = newItemList;
    }

    s->item[(s->top)++] = i;
1c004afe:	00140793          	addi	a5,s0,1
1c004b02:	00f49223          	sh	a5,4(s1)
1c004b06:	0406                	slli	s0,s0,0x1
1c004b08:	01395423          	p.sh	s3,s0(s2)
}
1c004b0c:	14c12083          	lw	ra,332(sp)
1c004b10:	14812403          	lw	s0,328(sp)
1c004b14:	14412483          	lw	s1,324(sp)
1c004b18:	14012903          	lw	s2,320(sp)
1c004b1c:	13c12983          	lw	s3,316(sp)
1c004b20:	6171                	addi	sp,sp,336
1c004b22:	8082                	ret
        pi_cl_l2_malloc((previousSize + STACK_INITIAL_SIZE)*sizeof(uint16_t), &alloc_req);
1c004b24:	06440513          	addi	a0,s0,100
1c004b28:	006c                	addi	a1,sp,12
1c004b2a:	0506                	slli	a0,a0,0x1
1c004b2c:	601010ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
  while((*(volatile char *)&req->done) == 0)
1c004b30:	09814783          	lbu	a5,152(sp)
1c004b34:	0ff7f793          	andi	a5,a5,255
1c004b38:	ef99                	bnez	a5,1c004b56 <push+0x82>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004b3a:	4689                	li	a3,2
1c004b3c:	00204737          	lui	a4,0x204
1c004b40:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004b44:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004b48:	00d72223          	sw	a3,4(a4)
1c004b4c:	09814783          	lbu	a5,152(sp)
1c004b50:	0ff7f793          	andi	a5,a5,255
1c004b54:	d7f5                	beqz	a5,1c004b40 <push+0x6c>
  return req->result;
1c004b56:	4932                	lw	s2,12(sp)
        if(newItemList != NULL)
1c004b58:	0e090b63          	beqz	s2,1c004c4e <push+0x17a>
1c004b5c:	4088                	lw	a0,0(s1)
            for(uint16_t i = 0; i < previousSize; ++i)
1c004b5e:	c44d                	beqz	s0,1c004c08 <push+0x134>
1c004b60:	00450793          	addi	a5,a0,4
1c004b64:	00490693          	addi	a3,s2,4
1c004b68:	0527b7b3          	p.sletu	a5,a5,s2
1c004b6c:	04a6b6b3          	p.sletu	a3,a3,a0
1c004b70:	873e                	mv	a4,a5
1c004b72:	87b6                	mv	a5,a3
1c004b74:	8fd9                	or	a5,a5,a4
1c004b76:	0ff7f793          	andi	a5,a5,255
1c004b7a:	c3ed                	beqz	a5,1c004c5c <push+0x188>
1c004b7c:	00843793          	sltiu	a5,s0,8
1c004b80:	0017c793          	xori	a5,a5,1
1c004b84:	0ff7f793          	andi	a5,a5,255
1c004b88:	cbf1                	beqz	a5,1c004c5c <push+0x188>
1c004b8a:	00155713          	srli	a4,a0,0x1
1c004b8e:	fc173733          	p.bclr	a4,a4,30,1
1c004b92:	4601                	li	a2,0
1c004b94:	c711                	beqz	a4,1c004ba0 <push+0xcc>
                newItemList[i] = s->item[i];
1c004b96:	00055783          	lhu	a5,0(a0)
            for(uint16_t i = 0; i < previousSize; ++i)
1c004b9a:	4605                	li	a2,1
                newItemList[i] = s->item[i];
1c004b9c:	00f91023          	sh	a5,0(s2)
1c004ba0:	40e40833          	sub	a6,s0,a4
1c004ba4:	10085833          	p.exthz	a6,a6
1c004ba8:	00185593          	srli	a1,a6,0x1
            for(uint16_t i = 0; i < previousSize; ++i)
1c004bac:	fff58793          	addi	a5,a1,-1
1c004bb0:	0706                	slli	a4,a4,0x1
1c004bb2:	1007d7b3          	p.exthz	a5,a5
1c004bb6:	00e906b3          	add	a3,s2,a4
1c004bba:	0785                	addi	a5,a5,1
1c004bbc:	972a                	add	a4,a4,a0
1c004bbe:	cdcd                	beqz	a1,1c004c78 <push+0x1a4>
1c004bc0:	0047c0fb          	lp.setup	x1,a5,1c004bc8 <push+0xf4>
                newItemList[i] = s->item[i];
1c004bc4:	0047258b          	p.lw	a1,4(a4!)
1c004bc8:	00b6a22b          	p.sw	a1,4(a3!)
1c004bcc:	c00837b3          	p.bclr	a5,a6,0,0
1c004bd0:	1007d7b3          	p.exthz	a5,a5
1c004bd4:	963e                	add	a2,a2,a5
1c004bd6:	10065633          	p.exthz	a2,a2
1c004bda:	02f80763          	beq	a6,a5,1c004c08 <push+0x134>
1c004bde:	00161713          	slli	a4,a2,0x1
1c004be2:	00e507b3          	add	a5,a0,a4
1c004be6:	0007d683          	lhu	a3,0(a5) # 640000 <__L2+0x5c0000>
            for(uint16_t i = 0; i < previousSize; ++i)
1c004bea:	00160793          	addi	a5,a2,1
1c004bee:	1007d7b3          	p.exthz	a5,a5
                newItemList[i] = s->item[i];
1c004bf2:	00d95723          	p.sh	a3,a4(s2)
            for(uint16_t i = 0; i < previousSize; ++i)
1c004bf6:	0087f963          	bleu	s0,a5,1c004c08 <push+0x134>
                newItemList[i] = s->item[i];
1c004bfa:	0786                	slli	a5,a5,0x1
1c004bfc:	00f50733          	add	a4,a0,a5
1c004c00:	00075703          	lhu	a4,0(a4)
1c004c04:	00e957a3          	p.sh	a4,a5(s2)
        pi_cl_l2_free(s->item, previousSize*sizeof(uint16_t), &free_req);
1c004c08:	0970                	addi	a2,sp,156
1c004c0a:	00141593          	slli	a1,s0,0x1
1c004c0e:	527010ef          	jal	ra,1c006934 <pi_cl_l2_free>
        s->max += STACK_INITIAL_SIZE;
1c004c12:	0064d703          	lhu	a4,6(s1)
  while((*(volatile char *)&req->done) == 0)
1c004c16:	12c14783          	lbu	a5,300(sp)
1c004c1a:	06470713          	addi	a4,a4,100
1c004c1e:	00e49323          	sh	a4,6(s1)
1c004c22:	0ff7f793          	andi	a5,a5,255
1c004c26:	ef99                	bnez	a5,1c004c44 <push+0x170>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004c28:	4689                	li	a3,2
1c004c2a:	00204737          	lui	a4,0x204
1c004c2e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004c32:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004c36:	00d72223          	sw	a3,4(a4)
1c004c3a:	12c14783          	lbu	a5,300(sp)
1c004c3e:	0ff7f793          	andi	a5,a5,255
1c004c42:	d7f5                	beqz	a5,1c004c2e <push+0x15a>
1c004c44:	0044d403          	lhu	s0,4(s1)
        s->item = newItemList;
1c004c48:	0124a023          	sw	s2,0(s1)
1c004c4c:	bd4d                	j	1c004afe <push+0x2a>
            printf("allocation for new list of items failed.\n");
1c004c4e:	1c00b537          	lui	a0,0x1c00b
1c004c52:	e6c50513          	addi	a0,a0,-404 # 1c00ae6c <__clz_tab+0x430>
1c004c56:	357040ef          	jal	ra,1c0097ac <puts>
1c004c5a:	bd4d                	j	1c004b0c <push+0x38>
1c004c5c:	fff40793          	addi	a5,s0,-1
1c004c60:	1007d7b3          	p.exthz	a5,a5
1c004c64:	86aa                	mv	a3,a0
1c004c66:	874a                	mv	a4,s2
1c004c68:	0785                	addi	a5,a5,1
1c004c6a:	0047c0fb          	lp.setup	x1,a5,1c004c72 <push+0x19e>
                newItemList[i] = s->item[i];
1c004c6e:	0026d60b          	p.lhu	a2,2(a3!)
1c004c72:	00c7112b          	p.sh	a2,2(a4!)
1c004c76:	bf49                	j	1c004c08 <push+0x134>
1c004c78:	4785                	li	a5,1
1c004c7a:	b799                	j	1c004bc0 <push+0xec>

1c004c7c <pop>:
    return (uint16_t) -1; /* (unsigned) -1 == 2^16 - 1 (max value) */
}

bool isStackEmpty(Stack * s)
{
    return (s->top == 0);
1c004c7c:	00455783          	lhu	a5,4(a0)
    if(!isStackEmpty(s))
1c004c80:	cf91                	beqz	a5,1c004c9c <pop+0x20>
        return s->item[--(s->top)];
1c004c82:	4118                	lw	a4,0(a0)
1c004c84:	17fd                	addi	a5,a5,-1
1c004c86:	1007d7b3          	p.exthz	a5,a5
1c004c8a:	00179693          	slli	a3,a5,0x1
1c004c8e:	00f51223          	sh	a5,4(a0)
1c004c92:	00d707b3          	add	a5,a4,a3
1c004c96:	0007d503          	lhu	a0,0(a5)
}
1c004c9a:	8082                	ret
        printf("Popping of Stack failed.\n");
1c004c9c:	1c00b537          	lui	a0,0x1c00b
{
1c004ca0:	1141                	addi	sp,sp,-16
        printf("Popping of Stack failed.\n");
1c004ca2:	e5050513          	addi	a0,a0,-432 # 1c00ae50 <__clz_tab+0x414>
{
1c004ca6:	c606                	sw	ra,12(sp)
        printf("Popping of Stack failed.\n");
1c004ca8:	305040ef          	jal	ra,1c0097ac <puts>
}
1c004cac:	40b2                	lw	ra,12(sp)
    return (uint16_t) -1; /* (unsigned) -1 == 2^16 - 1 (max value) */
1c004cae:	6541                	lui	a0,0x10
1c004cb0:	157d                	addi	a0,a0,-1
}
1c004cb2:	0141                	addi	sp,sp,16
1c004cb4:	8082                	ret

1c004cb6 <isStackEmpty>:
    return (s->top == 0);
1c004cb6:	00455503          	lhu	a0,4(a0) # 10004 <__L1Cl+0x4>
1c004cba:	00153513          	seqz	a0,a0
}
1c004cbe:	0ff57513          	andi	a0,a0,255
1c004cc2:	8082                	ret

1c004cc4 <findGate>:
    FIND_SECOND,
    END
} gateFinderStates;

Point findGate(PGMImage* img, uint8_t Shade)
{
1c004cc4:	7179                	addi	sp,sp,-48
1c004cc6:	d422                	sw	s0,40(sp)
1c004cc8:	d226                	sw	s1,36(sp)
1c004cca:	d04a                	sw	s2,32(sp)
1c004ccc:	ce4e                	sw	s3,28(sp)
1c004cce:	d606                	sw	ra,44(sp)
1c004cd0:	cc52                	sw	s4,24(sp)
1c004cd2:	ca56                	sw	s5,20(sp)
1c004cd4:	c85a                	sw	s6,16(sp)
    uint8_t imageWidth = img->x, imageHeight = img->y;
1c004cd6:	00054a83          	lbu	s5,0(a0)
    uint16_t imageSize = imageWidth * imageHeight;
1c004cda:	00154a03          	lbu	s4,1(a0)
{
1c004cde:	84aa                	mv	s1,a0
    uint16_t imageSize = imageWidth * imageHeight;
1c004ce0:	100ad933          	p.exthz	s2,s5
1c004ce4:	03490a33          	mul	s4,s2,s4
{
1c004ce8:	89ae                	mv	s3,a1

    uint8_t firstPixelH, firstPixelV, secondPixelH, secondPixelV, distanceH = 0, distanceV = 0;
    uint16_t line = 0, column, firstPixelIndex, secondPixelIndex;
1c004cea:	4701                	li	a4,0
    uint8_t firstPixelH, firstPixelV, secondPixelH, secondPixelV, distanceH = 0, distanceV = 0;
1c004cec:	4401                	li	s0,0
                break;
            */

            case FIND_FIRST:
                firstPixelIndex = line;
                while(firstPixelIndex < imageSize && img->data[firstPixelIndex] !=Shade)
1c004cee:	21477263          	bleu	s4,a4,1c004ef2 <findGate+0x22e>
1c004cf2:	0024a783          	lw	a5,2(s1)
1c004cf6:	00e786b3          	add	a3,a5,a4
1c004cfa:	0006c683          	lbu	a3,0(a3)
1c004cfe:	03368163          	beq	a3,s3,1c004d20 <findGate+0x5c>
1c004d02:	00170693          	addi	a3,a4,1
1c004d06:	1006d733          	p.exthz	a4,a3
1c004d0a:	97ba                	add	a5,a5,a4
                    firstPixelIndex++;
1c004d0c:	1006d733          	p.exthz	a4,a3
                while(firstPixelIndex < imageSize && img->data[firstPixelIndex] !=Shade)
1c004d10:	06ea0563          	beq	s4,a4,1c004d7a <findGate+0xb6>
1c004d14:	0017c60b          	p.lbu	a2,1(a5!)
1c004d18:	00170693          	addi	a3,a4,1
1c004d1c:	ff3618e3          	bne	a2,s3,1c004d0c <findGate+0x48>
                {
                    gateFinderState = END;
                    break;
                }

                firstPixelH = firstPixelIndex % imageWidth;
1c004d20:	03576833          	rem	a6,a4,s5
                while(firstPixelIndex < imageSize && img->data[firstPixelIndex] !=Shade)
1c004d24:	85ba                	mv	a1,a4
                line = firstPixelIndex - firstPixelH;
1c004d26:	41070733          	sub	a4,a4,a6
1c004d2a:	10075533          	p.exthz	a0,a4

                gateFinderState = FIND_SECOND;
                break;

            case FIND_SECOND:
                secondPixelIndex = line + imageWidth - 1;
1c004d2e:	00a90733          	add	a4,s2,a0
1c004d32:	10075733          	p.exthz	a4,a4
1c004d36:	fff70793          	addi	a5,a4,-1
1c004d3a:	1007d7b3          	p.exthz	a5,a5
                while(secondPixelIndex != firstPixelIndex && img->data[secondPixelIndex] !=Shade)
1c004d3e:	02f58a63          	beq	a1,a5,1c004d72 <findGate+0xae>
1c004d42:	0024a603          	lw	a2,2(s1)
1c004d46:	00f606b3          	add	a3,a2,a5
1c004d4a:	a801                	j	1c004d5a <findGate+0x96>
                    secondPixelIndex--;
1c004d4c:	17fd                	addi	a5,a5,-1
1c004d4e:	1007d7b3          	p.exthz	a5,a5
                while(secondPixelIndex != firstPixelIndex && img->data[secondPixelIndex] !=Shade)
1c004d52:	00f606b3          	add	a3,a2,a5
1c004d56:	00f58e63          	beq	a1,a5,1c004d72 <findGate+0xae>
1c004d5a:	0006c683          	lbu	a3,0(a3)
1c004d5e:	ff3697e3          	bne	a3,s3,1c004d4c <findGate+0x88>

                if(firstPixelIndex != secondPixelIndex)
                {
                    secondPixelH = secondPixelIndex % imageWidth;
1c004d62:	0357e7b3          	rem	a5,a5,s5
                    diff = secondPixelH - firstPixelH;
                    distanceH = diff > distanceH ? diff : distanceH;
1c004d66:	410787b3          	sub	a5,a5,a6
1c004d6a:	0487e433          	p.max	s0,a5,s0
1c004d6e:	0ff47413          	andi	s0,s0,255
                }

                if(imageSize - line <= imageWidth)
1c004d72:	40aa0533          	sub	a0,s4,a0
1c004d76:	f6aacce3          	blt	s5,a0,1c004cee <findGate+0x2a>
                break;
        }
    }

    #ifdef DEBUG_ON
    printf("\tgreatest horizontal distance: %-3u ", distanceH);
1c004d7a:	1c00b537          	lui	a0,0x1c00b
1c004d7e:	85a2                	mv	a1,s0
1c004d80:	e9850513          	addi	a0,a0,-360 # 1c00ae98 <__clz_tab+0x45c>
1c004d84:	389040ef          	jal	ra,1c00990c <printf>
    while(gateFinderState != END)
    {
        switch(gateFinderState)
        {
            case BEGIN:
                column = 0;
1c004d88:	4781                	li	a5,0
                distanceV = 0;
1c004d8a:	4b01                	li	s6,0

                gateFinderState = FIND_SECOND;
                break;

            case FIND_SECOND:
                secondPixelIndex = column + imageSize - imageWidth;
1c004d8c:	412a0833          	sub	a6,s4,s2
                    secondPixelV = secondPixelIndex / imageWidth;
                    diff = secondPixelV - firstPixelV;
                    distanceV =  diff > distanceV ? diff : distanceV;
                }

                if(column == imageWidth - 1)
1c004d90:	fffa8513          	addi	a0,s5,-1
                while(firstPixelIndex < imageSize && img->data[firstPixelIndex] !=Shade)
1c004d94:	0947ff63          	bleu	s4,a5,1c004e32 <findGate+0x16e>
1c004d98:	0024a583          	lw	a1,2(s1)
1c004d9c:	00f58733          	add	a4,a1,a5
1c004da0:	00074703          	lbu	a4,0(a4)
1c004da4:	03371063          	bne	a4,s3,1c004dc4 <findGate+0x100>
1c004da8:	a03d                	j	1c004dd6 <findGate+0x112>
                        firstPixelIndex = firstPixelIndex % imageWidth + 1;
1c004daa:	0357e7b3          	rem	a5,a5,s5
1c004dae:	0785                	addi	a5,a5,1
                        if(firstPixelIndex == imageWidth)
1c004db0:	08f90163          	beq	s2,a5,1c004e32 <findGate+0x16e>
                while(firstPixelIndex < imageSize && img->data[firstPixelIndex] !=Shade)
1c004db4:	00f586b3          	add	a3,a1,a5
1c004db8:	0747fd63          	bleu	s4,a5,1c004e32 <findGate+0x16e>
1c004dbc:	0006c683          	lbu	a3,0(a3)
1c004dc0:	01368b63          	beq	a3,s3,1c004dd6 <findGate+0x112>
                    if(imageSize - firstPixelIndex <= imageWidth)
1c004dc4:	40fa06b3          	sub	a3,s4,a5
                        firstPixelIndex += imageWidth;
1c004dc8:	00f90633          	add	a2,s2,a5
                    if(imageSize - firstPixelIndex <= imageWidth)
1c004dcc:	fcdadfe3          	ble	a3,s5,1c004daa <findGate+0xe6>
                        firstPixelIndex += imageWidth;
1c004dd0:	100657b3          	p.exthz	a5,a2
1c004dd4:	b7c5                	j	1c004db4 <findGate+0xf0>
                column = firstPixelIndex % imageWidth;
1c004dd6:	0357e333          	rem	t1,a5,s5
                firstPixelV = firstPixelIndex / imageWidth;
1c004dda:	0357c6b3          	div	a3,a5,s5
                column = firstPixelIndex % imageWidth;
1c004dde:	100358b3          	p.exthz	a7,t1
                secondPixelIndex = column + imageSize - imageWidth;
1c004de2:	01088733          	add	a4,a7,a6
1c004de6:	10075733          	p.exthz	a4,a4
                firstPixelV = firstPixelIndex / imageWidth;
1c004dea:	0ff6f613          	andi	a2,a3,255
                while(secondPixelIndex != firstPixelIndex && img->data[secondPixelIndex] !=Shade)
1c004dee:	02f70a63          	beq	a4,a5,1c004e22 <findGate+0x15e>
1c004df2:	00e586b3          	add	a3,a1,a4
1c004df6:	a809                	j	1c004e08 <findGate+0x144>
                        secondPixelIndex -= imageWidth;
1c004df8:	41270733          	sub	a4,a4,s2
1c004dfc:	10075733          	p.exthz	a4,a4
                while(secondPixelIndex != firstPixelIndex && img->data[secondPixelIndex] !=Shade)
1c004e00:	00e586b3          	add	a3,a1,a4
1c004e04:	00f70f63          	beq	a4,a5,1c004e22 <findGate+0x15e>
1c004e08:	0006c683          	lbu	a3,0(a3)
1c004e0c:	ff3696e3          	bne	a3,s3,1c004df8 <findGate+0x134>
                    secondPixelV = secondPixelIndex / imageWidth;
1c004e10:	03574733          	div	a4,a4,s5
                    diff = secondPixelV - firstPixelV;
1c004e14:	0ff77713          	andi	a4,a4,255
                    distanceV =  diff > distanceV ? diff : distanceV;
1c004e18:	8f11                	sub	a4,a4,a2
1c004e1a:	05676733          	p.max	a4,a4,s6
1c004e1e:	0ff77b13          	andi	s6,a4,255
                if(column == imageWidth - 1)
1c004e22:	00a30863          	beq	t1,a0,1c004e32 <findGate+0x16e>
                    gateFinderState = END;
                else
                {
                    gateFinderState = FIND_FIRST;
                    column++;
1c004e26:	00188793          	addi	a5,a7,1
1c004e2a:	1007d7b3          	p.exthz	a5,a5
                while(firstPixelIndex < imageSize && img->data[firstPixelIndex] !=Shade)
1c004e2e:	f747e5e3          	bltu	a5,s4,1c004d98 <findGate+0xd4>
                break;
        }
    }

    #ifdef DEBUG_ON
    printf("greatest vertical distance: %-3u\n", distanceV);
1c004e32:	1c00b537          	lui	a0,0x1c00b
1c004e36:	85da                	mv	a1,s6
1c004e38:	ec050513          	addi	a0,a0,-320 # 1c00aec0 <__clz_tab+0x484>
1c004e3c:	2d1040ef          	jal	ra,1c00990c <printf>
    #endif

    diff = distanceH - distanceV;
    if(-TOL <= diff && diff <= TOL)
1c004e40:	00f40713          	addi	a4,s0,15
1c004e44:	41670733          	sub	a4,a4,s6
1c004e48:	10075733          	p.exthz	a4,a4
1c004e4c:	47f9                	li	a5,30
1c004e4e:	04e7e563          	bltu	a5,a4,1c004e98 <findGate+0x1d4>
1c004e52:	0024a803          	lw	a6,2(s1)
    {
        uint32_t sumH = 0, sumV = 0;
        uint16_t pixelIndex, counter = 0;
        for(pixelIndex = 0; pixelIndex < imageSize; ++pixelIndex)
1c004e56:	080a0a63          	beqz	s4,1c004eea <findGate+0x226>
1c004e5a:	fffa0793          	addi	a5,s4,-1
1c004e5e:	1007d7b3          	p.exthz	a5,a5
1c004e62:	8742                	mv	a4,a6
        uint16_t pixelIndex, counter = 0;
1c004e64:	4681                	li	a3,0
        uint32_t sumH = 0, sumV = 0;
1c004e66:	4581                	li	a1,0
1c004e68:	4501                	li	a0,0
1c004e6a:	fff84313          	not	t1,a6
1c004e6e:	0785                	addi	a5,a5,1
            if(img->data[pixelIndex] ==Shade)
1c004e70:	0017460b          	p.lbu	a2,1(a4!)
1c004e74:	05360d63          	beq	a2,s3,1c004ece <findGate+0x20a>
1c004e78:	17fd                	addi	a5,a5,-1
1c004e7a:	fbfd                	bnez	a5,1c004e70 <findGate+0x1ac>
1c004e7c:	9852                	add	a6,a6,s4
                sumH += pixelIndex % imageWidth;
                sumV += pixelIndex / imageWidth;
                counter++;
            }

        return (Point){sumH / counter, sumV / counter, img->data[pixelIndex]};
1c004e7e:	02d55533          	divu	a0,a0,a3
1c004e82:	00084783          	lbu	a5,0(a6)
1c004e86:	00f10723          	sb	a5,14(sp)
1c004e8a:	02d5d6b3          	divu	a3,a1,a3
1c004e8e:	00a10623          	sb	a0,12(sp)
1c004e92:	00d106a3          	sb	a3,13(sp)
1c004e96:	a029                	j	1c004ea0 <findGate+0x1dc>
    }

    return (Point){0, 0, 0};
1c004e98:	00011623          	sh	zero,12(sp)
1c004e9c:	00010723          	sb	zero,14(sp)
1c004ea0:	00c14683          	lbu	a3,12(sp)
1c004ea4:	00d14703          	lbu	a4,13(sp)
1c004ea8:	00e14783          	lbu	a5,14(sp)
}
1c004eac:	50b2                	lw	ra,44(sp)
1c004eae:	5422                	lw	s0,40(sp)
1c004eb0:	4501                	li	a0,0
1c004eb2:	ce06a533          	p.insert	a0,a3,7,0
1c004eb6:	ce872533          	p.insert	a0,a4,7,8
1c004eba:	5492                	lw	s1,36(sp)
1c004ebc:	5902                	lw	s2,32(sp)
1c004ebe:	49f2                	lw	s3,28(sp)
1c004ec0:	4a62                	lw	s4,24(sp)
1c004ec2:	4ad2                	lw	s5,20(sp)
1c004ec4:	4b42                	lw	s6,16(sp)
1c004ec6:	cf07a533          	p.insert	a0,a5,7,16
1c004eca:	6145                	addi	sp,sp,48
1c004ecc:	8082                	ret
1c004ece:	00e30633          	add	a2,t1,a4
                sumH += pixelIndex % imageWidth;
1c004ed2:	035668b3          	rem	a7,a2,s5
                counter++;
1c004ed6:	0685                	addi	a3,a3,1
1c004ed8:	1006d6b3          	p.exthz	a3,a3
                sumV += pixelIndex / imageWidth;
1c004edc:	03564633          	div	a2,a2,s5
                sumH += pixelIndex % imageWidth;
1c004ee0:	9546                	add	a0,a0,a7
                sumV += pixelIndex / imageWidth;
1c004ee2:	95b2                	add	a1,a1,a2
1c004ee4:	17fd                	addi	a5,a5,-1
1c004ee6:	f7c9                	bnez	a5,1c004e70 <findGate+0x1ac>
1c004ee8:	bf51                	j	1c004e7c <findGate+0x1b8>
        for(pixelIndex = 0; pixelIndex < imageSize; ++pixelIndex)
1c004eea:	4681                	li	a3,0
        uint32_t sumH = 0, sumV = 0;
1c004eec:	4581                	li	a1,0
1c004eee:	4501                	li	a0,0
1c004ef0:	b779                	j	1c004e7e <findGate+0x1ba>
                if(firstPixelIndex == imageSize)
1c004ef2:	e2ea17e3          	bne	s4,a4,1c004d20 <findGate+0x5c>
1c004ef6:	b551                	j	1c004d7a <findGate+0xb6>

1c004ef8 <findPeaks>:
}

void peaksBoundsValleyTechnique(uint16_t *restrict histogram, uint8_t firstPeak, uint8_t secondPeak, uint8_t *restrict upperBound,uint8_t *restrict lowerBound)
{
    uint8_t i, valley = firstPeak < secondPeak ? firstPeak + 1 : secondPeak + 1;
    uint32_t sum1 = 0, sum2 = 0;
1c004ef8:	0005d883          	lhu	a7,0(a1)
1c004efc:	882a                	mv	a6,a0
1c004efe:	86aa                	mv	a3,a0
1c004f00:	00189793          	slli	a5,a7,0x1
1c004f04:	97aa                	add	a5,a5,a0
1c004f06:	0007de03          	lhu	t3,0(a5)
1c004f0a:	4701                	li	a4,0
1c004f0c:	0ff6d0fb          	lp.setupi	x1,255,1c004f26 <findPeaks+0x2e>
1c004f10:	0026d30b          	p.lhu	t1,2(a3!)
1c004f14:	006e7863          	bleu	t1,t3,1c004f24 <findPeaks+0x2c>
1c004f18:	100758b3          	p.exthz	a7,a4
1c004f1c:	01159023          	sh	a7,0(a1)
1c004f20:	ffe6de03          	lhu	t3,-2(a3)
1c004f24:	0705                	addi	a4,a4,1
1c004f26:	0001                	nop
1c004f28:	1fe55f03          	lhu	t5,510(a0)
1c004f2c:	07ee6763          	bltu	t3,t5,1c004f9a <findPeaks+0xa2>
1c004f30:	f0188e93          	addi	t4,a7,-255
1c004f34:	100eceb3          	p.exths	t4,t4
1c004f38:	040e8eb3          	p.avg	t4,t4,zero
1c004f3c:	100eceb3          	p.exths	t4,t4
1c004f40:	00065783          	lhu	a5,0(a2)
1c004f44:	4701                	li	a4,0
1c004f46:	03200e13          	li	t3,50
1c004f4a:	0786                	slli	a5,a5,0x1
1c004f4c:	953e                	add	a0,a0,a5
1c004f4e:	00055303          	lhu	t1,0(a0)
1c004f52:	0ff00693          	li	a3,255
1c004f56:	0186c0fb          	lp.setup	x1,a3,1c004f86 <findPeaks+0x8e>
1c004f5a:	40e887b3          	sub	a5,a7,a4
1c004f5e:	0028550b          	p.lhu	a0,2(a6!)
1c004f62:	1007c7b3          	p.exths	a5,a5
1c004f66:	040787b3          	p.avg	a5,a5,zero
1c004f6a:	00170593          	addi	a1,a4,1
1c004f6e:	1007c7b3          	p.exths	a5,a5
1c004f72:	00a37863          	bleu	a0,t1,1c004f82 <findPeaks+0x8a>
1c004f76:	00fe5663          	ble	a5,t3,1c004f82 <findPeaks+0x8a>
1c004f7a:	00e61023          	sh	a4,0(a2)
1c004f7e:	ffe85303          	lhu	t1,-2(a6)
1c004f82:	1005d733          	p.exthz	a4,a1
1c004f86:	0001                	nop
1c004f88:	01e37863          	bleu	t5,t1,1c004f98 <findPeaks+0xa0>
1c004f8c:	03200793          	li	a5,50
1c004f90:	01d7d463          	ble	t4,a5,1c004f98 <findPeaks+0xa0>
1c004f94:	00e61023          	sh	a4,0(a2)
1c004f98:	8082                	ret
1c004f9a:	00e59023          	sh	a4,0(a1)
1c004f9e:	4e81                	li	t4,0
1c004fa0:	0ff00893          	li	a7,255
1c004fa4:	bf71                	j	1c004f40 <findPeaks+0x48>

1c004fa6 <smoothHistogram>:
1c004fa6:	7129                	addi	sp,sp,-320
1c004fa8:	12812c23          	sw	s0,312(sp)
1c004fac:	006c                	addi	a1,sp,12
1c004fae:	842a                	mv	s0,a0
1c004fb0:	20000513          	li	a0,512
1c004fb4:	12112e23          	sw	ra,316(sp)
1c004fb8:	175010ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
1c004fbc:	09814783          	lbu	a5,152(sp)
1c004fc0:	0ff7f793          	andi	a5,a5,255
1c004fc4:	ef99                	bnez	a5,1c004fe2 <smoothHistogram+0x3c>
1c004fc6:	4689                	li	a3,2
1c004fc8:	00204737          	lui	a4,0x204
1c004fcc:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c004fd0:	03c76783          	p.elw	a5,60(a4)
1c004fd4:	00d72223          	sw	a3,4(a4)
1c004fd8:	09814783          	lbu	a5,152(sp)
1c004fdc:	0ff7f793          	andi	a5,a5,255
1c004fe0:	d7f5                	beqz	a5,1c004fcc <smoothHistogram+0x26>
1c004fe2:	4832                	lw	a6,12(sp)
1c004fe4:	20000613          	li	a2,512
1c004fe8:	4581                	li	a1,0
1c004fea:	8542                	mv	a0,a6
1c004fec:	61a040ef          	jal	ra,1c009606 <memset>
1c004ff0:	1fc45583          	lhu	a1,508(s0)
1c004ff4:	00045603          	lhu	a2,0(s0)
1c004ff8:	00245683          	lhu	a3,2(s0)
1c004ffc:	1fe45783          	lhu	a5,510(s0)
1c005000:	882a                	mv	a6,a0
1c005002:	82d6275b          	p.addun	a4,a2,a3,1
1c005006:	82b7a7db          	p.addun	a5,a5,a1,1
1c00500a:	00e51023          	sh	a4,0(a0)
1c00500e:	1ef51f23          	sh	a5,510(a0)
1c005012:	00250e13          	addi	t3,a0,2
1c005016:	00450893          	addi	a7,a0,4
1c00501a:	00440e93          	addi	t4,s0,4
1c00501e:	00640313          	addi	t1,s0,6
1c005022:	450d                	li	a0,3
1c005024:	07e950fb          	lp.setupi	x1,126,1c005048 <smoothHistogram+0xa2>
1c005028:	00d60733          	add	a4,a2,a3
1c00502c:	004ed60b          	p.lhu	a2,4(t4!)
1c005030:	9732                	add	a4,a4,a2
1c005032:	02a74733          	div	a4,a4,a0
1c005036:	00c687b3          	add	a5,a3,a2
1c00503a:	00ee122b          	p.sh	a4,4(t3!)
1c00503e:	0043568b          	p.lhu	a3,4(t1!)
1c005042:	97b6                	add	a5,a5,a3
1c005044:	02a7c7b3          	div	a5,a5,a0
1c005048:	00f8922b          	p.sh	a5,4(a7!)
1c00504c:	1fa40713          	addi	a4,s0,506
1c005050:	1fa80613          	addi	a2,a6,506
1c005054:	1f840693          	addi	a3,s0,504
1c005058:	1fe40313          	addi	t1,s0,510
1c00505c:	488d                	li	a7,3
1c00505e:	0027550b          	p.lhu	a0,2(a4!)
1c005062:	0026d78b          	p.lhu	a5,2(a3!)
1c005066:	00075583          	lhu	a1,0(a4)
1c00506a:	97aa                	add	a5,a5,a0
1c00506c:	97ae                	add	a5,a5,a1
1c00506e:	0317c7b3          	div	a5,a5,a7
1c005072:	00f6112b          	p.sh	a5,2(a2!)
1c005076:	fe6714e3          	bne	a4,t1,1c00505e <smoothHistogram+0xb8>
1c00507a:	00145593          	srli	a1,s0,0x1
1c00507e:	fc15b5b3          	p.bclr	a1,a1,30,1
1c005082:	c589                	beqz	a1,1c00508c <smoothHistogram+0xe6>
1c005084:	00085783          	lhu	a5,0(a6)
1c005088:	00f41023          	sh	a5,0(s0)
1c00508c:	00159713          	slli	a4,a1,0x1
1c005090:	00e406b3          	add	a3,s0,a4
1c005094:	9742                	add	a4,a4,a6
1c005096:	07f250fb          	lp.setupi	x1,127,1c00509e <smoothHistogram+0xf8>
1c00509a:	0047260b          	p.lw	a2,4(a4!)
1c00509e:	00c6a22b          	p.sw	a2,4(a3!)
1c0050a2:	e589                	bnez	a1,1c0050ac <smoothHistogram+0x106>
1c0050a4:	1fc85783          	lhu	a5,508(a6)
1c0050a8:	1ef41e23          	sh	a5,508(s0)
1c0050ac:	1fe85783          	lhu	a5,510(a6)
1c0050b0:	0970                	addi	a2,sp,156
1c0050b2:	20000593          	li	a1,512
1c0050b6:	1ef41f23          	sh	a5,510(s0)
1c0050ba:	8542                	mv	a0,a6
1c0050bc:	079010ef          	jal	ra,1c006934 <pi_cl_l2_free>
1c0050c0:	12c14783          	lbu	a5,300(sp)
1c0050c4:	0ff7f793          	andi	a5,a5,255
1c0050c8:	ef99                	bnez	a5,1c0050e6 <smoothHistogram+0x140>
1c0050ca:	4689                	li	a3,2
1c0050cc:	00204737          	lui	a4,0x204
1c0050d0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0050d4:	03c76783          	p.elw	a5,60(a4)
1c0050d8:	00d72223          	sw	a3,4(a4)
1c0050dc:	12c14783          	lbu	a5,300(sp)
1c0050e0:	0ff7f793          	andi	a5,a5,255
1c0050e4:	d7f5                	beqz	a5,1c0050d0 <smoothHistogram+0x12a>
1c0050e6:	13c12083          	lw	ra,316(sp)
1c0050ea:	13812403          	lw	s0,312(sp)
1c0050ee:	6131                	addi	sp,sp,320
1c0050f0:	8082                	ret

1c0050f2 <adaptiveHistogramTechnique>:
    pi_cl_l2_free_wait(&free_req);
}


void __attribute__((noinline)) adaptiveHistogramTechnique(PGMImage* img)
{
1c0050f2:	714d                	addi	sp,sp,-336
    uint16_t firstPeak = MAX_PIXEL_VALUE + 1, secondPeak = MAX_PIXEL_VALUE + 1;
1c0050f4:	10000793          	li	a5,256
{
1c0050f8:	14812423          	sw	s0,328(sp)
    uint8_t upperBound, lowerBound, object, background;
    pi_cl_alloc_req_t alloc_req;
    pi_cl_free_req_t free_req;

    /* initializing memory with 0 because some shades may never appear on the image */
    pi_cl_l2_malloc((MAX_PIXEL_VALUE + 2 -MIN_PIXEL_VALUE) * sizeof(uint16_t), &alloc_req);
1c0050fc:	006c                	addi	a1,sp,12
{
1c0050fe:	842a                	mv	s0,a0
    pi_cl_l2_malloc((MAX_PIXEL_VALUE + 2 -MIN_PIXEL_VALUE) * sizeof(uint16_t), &alloc_req);
1c005100:	20200513          	li	a0,514
    uint16_t firstPeak = MAX_PIXEL_VALUE + 1, secondPeak = MAX_PIXEL_VALUE + 1;
1c005104:	00f11423          	sh	a5,8(sp)
1c005108:	00f11523          	sh	a5,10(sp)
{
1c00510c:	14112623          	sw	ra,332(sp)
1c005110:	14912223          	sw	s1,324(sp)
1c005114:	15212023          	sw	s2,320(sp)
1c005118:	13312e23          	sw	s3,316(sp)
    pi_cl_l2_malloc((MAX_PIXEL_VALUE + 2 -MIN_PIXEL_VALUE) * sizeof(uint16_t), &alloc_req);
1c00511c:	011010ef          	jal	ra,1c00692c <pi_cl_l2_malloc>
  while((*(volatile char *)&req->done) == 0)
1c005120:	09814783          	lbu	a5,152(sp)
1c005124:	0ff7f793          	andi	a5,a5,255
1c005128:	ef99                	bnez	a5,1c005146 <adaptiveHistogramTechnique+0x54>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00512a:	4689                	li	a3,2
1c00512c:	00204737          	lui	a4,0x204
1c005130:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005134:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005138:	00d72223          	sw	a3,4(a4)
1c00513c:	09814783          	lbu	a5,152(sp)
1c005140:	0ff7f793          	andi	a5,a5,255
1c005144:	d7f5                	beqz	a5,1c005130 <adaptiveHistogramTechnique+0x3e>
  return req->result;
1c005146:	44b2                	lw	s1,12(sp)
    uint16_t *histogram = pi_cl_l2_malloc_wait(&alloc_req);
    memset(histogram, 0, (MAX_PIXEL_VALUE + 2 -MIN_PIXEL_VALUE) * sizeof(uint16_t));
1c005148:	20200613          	li	a2,514
1c00514c:	4581                	li	a1,0
1c00514e:	8526                	mv	a0,s1
1c005150:	4b6040ef          	jal	ra,1c009606 <memset>
    uint16_t i, size = img->x * img->y;
1c005154:	00044703          	lbu	a4,0(s0)
1c005158:	00144783          	lbu	a5,1(s0)
1c00515c:	00f7075b          	p.mac	a4,a4,a5,zero
    for(i = 0; i < size; i++)
1c005160:	c715                	beqz	a4,1c00518c <adaptiveHistogramTechnique+0x9a>
1c005162:	00242583          	lw	a1,2(s0)
1c005166:	177d                	addi	a4,a4,-1
1c005168:	10075733          	p.exthz	a4,a4
1c00516c:	00158613          	addi	a2,a1,1
1c005170:	0705                	addi	a4,a4,1
1c005172:	00b740fb          	lp.setup	x1,a4,1c005188 <adaptiveHistogramTechnique+0x96>
        pixel = img->data[i];
1c005176:	0005c783          	lbu	a5,0(a1)
1c00517a:	85b2                	mv	a1,a2
1c00517c:	0605                	addi	a2,a2,1
        histogram[index < 0 ? 0 : index] += 1;
1c00517e:	0786                	slli	a5,a5,0x1
1c005180:	97a6                	add	a5,a5,s1
1c005182:	0007d683          	lhu	a3,0(a5)
1c005186:	0685                	addi	a3,a3,1
1c005188:	00d79023          	sh	a3,0(a5)

    calculateHistogram(img, histogram);
    smoothHistogram(histogram);
1c00518c:	8526                	mv	a0,s1
1c00518e:	3d21                	jal	1c004fa6 <smoothHistogram>
    findPeaks(histogram, &firstPeak, &secondPeak);
1c005190:	00a10613          	addi	a2,sp,10
1c005194:	002c                	addi	a1,sp,8
1c005196:	8526                	mv	a0,s1
1c005198:	3385                	jal	1c004ef8 <findPeaks>

    #ifdef DEBUG_ON
    printf("first peak: %u; second peak: %u\n", firstPeak, secondPeak);
1c00519a:	00815583          	lhu	a1,8(sp)
1c00519e:	00a15603          	lhu	a2,10(sp)
1c0051a2:	1c00b537          	lui	a0,0x1c00b
1c0051a6:	f7450513          	addi	a0,a0,-140 # 1c00af74 <__clz_tab+0x538>
1c0051aa:	762040ef          	jal	ra,1c00990c <printf>
    uint8_t i, midPoint = ((secondPeak + firstPeak)>>1);
1c0051ae:	00a14583          	lbu	a1,10(sp)
1c0051b2:	00814783          	lbu	a5,8(sp)
1c0051b6:	82f5a5db          	p.addun	a1,a1,a5,1
1c0051ba:	0ff5f913          	andi	s2,a1,255
    for(i = 0; i < midPoint; ++i)
1c0051be:	18058063          	beqz	a1,1c00533e <adaptiveHistogramTechnique+0x24c>
1c0051c2:	fff90793          	addi	a5,s2,-1
    uint32_t sum1 = 0, sum2 = 0;
1c0051c6:	0ff7f793          	andi	a5,a5,255
1c0051ca:	8726                	mv	a4,s1
1c0051cc:	4601                	li	a2,0
1c0051ce:	0785                	addi	a5,a5,1
1c0051d0:	0047c0fb          	lp.setup	x1,a5,1c0051d8 <adaptiveHistogramTechnique+0xe6>
        sum1 += histogram[i];
1c0051d4:	0027568b          	p.lhu	a3,2(a4!)
1c0051d8:	9636                	add	a2,a2,a3
    for(i=midPoint; i<MAX_PIXEL_VALUE - MIN_PIXEL_VALUE; ++i)
1c0051da:	0ff00793          	li	a5,255
1c0051de:	14f90a63          	beq	s2,a5,1c005332 <adaptiveHistogramTechnique+0x240>
1c0051e2:	fff94693          	not	a3,s2
1c0051e6:	0ff68693          	addi	a3,a3,255
1c0051ea:	0ff6f693          	andi	a3,a3,255
    uint8_t i, midPoint = ((secondPeak + firstPeak)>>1);
1c0051ee:	874a                	mv	a4,s2
1c0051f0:	4501                	li	a0,0
    for(i=midPoint; i<MAX_PIXEL_VALUE - MIN_PIXEL_VALUE; ++i)
1c0051f2:	0685                	addi	a3,a3,1
1c0051f4:	00b6c0fb          	lp.setup	x1,a3,1c00520a <adaptiveHistogramTechnique+0x118>
        sum2 += histogram[i];
1c0051f8:	100757b3          	p.exthz	a5,a4
1c0051fc:	0786                	slli	a5,a5,0x1
1c0051fe:	97a6                	add	a5,a5,s1
1c005200:	0007d783          	lhu	a5,0(a5)
    for(i=midPoint; i<MAX_PIXEL_VALUE - MIN_PIXEL_VALUE; ++i)
1c005204:	0705                	addi	a4,a4,1
1c005206:	0ff77713          	andi	a4,a4,255
        sum2 += histogram[i];
1c00520a:	953e                	add	a0,a0,a5
    sum2 += histogram[MAX_PIXEL_VALUE - MIN_PIXEL_VALUE];
1c00520c:	1fe4d783          	lhu	a5,510(s1)
1c005210:	953e                	add	a0,a0,a5
    if(sum1 >= sum2)
1c005212:	10a67263          	bleu	a0,a2,1c005316 <adaptiveHistogramTechnique+0x224>
1c005216:	4601                	li	a2,0
        *lowerBound = MIN_PIXEL_VALUE;
1c005218:	4981                	li	s3,0
    #endif

    peaksBoundsPeakTechnique(histogram, firstPeak, secondPeak, &upperBound, &lowerBound);
    #ifdef DEBUG_ON
    printf("1st iteration: upper bound: %u; lower bound: %u\n", upperBound, lowerBound);
1c00521a:	1c00b537          	lui	a0,0x1c00b
1c00521e:	ee450513          	addi	a0,a0,-284 # 1c00aee4 <__clz_tab+0x4a8>
1c005222:	6ea040ef          	jal	ra,1c00990c <printf>
    #endif

    thresholdAndFindMeans(img, upperBound, lowerBound, &object, &background);
1c005226:	85ca                	mv	a1,s2
1c005228:	00710713          	addi	a4,sp,7
1c00522c:	00610693          	addi	a3,sp,6
1c005230:	864e                	mv	a2,s3
1c005232:	8522                	mv	a0,s0
1c005234:	d85fe0ef          	jal	ra,1c003fb8 <thresholdAndFindMeans>

    #ifdef DEBUG_ON
    printf("object mean: %u; background mean: %u\n", object, background);
1c005238:	00614583          	lbu	a1,6(sp)
1c00523c:	00714603          	lbu	a2,7(sp)
1c005240:	1c00b537          	lui	a0,0x1c00b
1c005244:	f1850513          	addi	a0,a0,-232 # 1c00af18 <__clz_tab+0x4dc>
1c005248:	6c4040ef          	jal	ra,1c00990c <printf>
    uint8_t i, midPoint = ((secondPeak + firstPeak)>>1);
1c00524c:	00714583          	lbu	a1,7(sp)
1c005250:	00614783          	lbu	a5,6(sp)
1c005254:	82f5a5db          	p.addun	a1,a1,a5,1
1c005258:	0ff5f913          	andi	s2,a1,255
    for(i = 0; i < midPoint; ++i)
1c00525c:	cde9                	beqz	a1,1c005336 <adaptiveHistogramTechnique+0x244>
1c00525e:	fff90793          	addi	a5,s2,-1
    uint32_t sum1 = 0, sum2 = 0;
1c005262:	0ff7f793          	andi	a5,a5,255
1c005266:	8726                	mv	a4,s1
1c005268:	4601                	li	a2,0
1c00526a:	0785                	addi	a5,a5,1
1c00526c:	0047c0fb          	lp.setup	x1,a5,1c005274 <adaptiveHistogramTechnique+0x182>
        sum1 += histogram[i];
1c005270:	0027568b          	p.lhu	a3,2(a4!)
1c005274:	9636                	add	a2,a2,a3
    for(i=midPoint; i<MAX_PIXEL_VALUE - MIN_PIXEL_VALUE; ++i)
1c005276:	0ff00793          	li	a5,255
1c00527a:	0cf90063          	beq	s2,a5,1c00533a <adaptiveHistogramTechnique+0x248>
1c00527e:	fff94693          	not	a3,s2
1c005282:	0ff68693          	addi	a3,a3,255
1c005286:	0ff6f693          	andi	a3,a3,255
    uint8_t i, midPoint = ((secondPeak + firstPeak)>>1);
1c00528a:	874a                	mv	a4,s2
1c00528c:	4501                	li	a0,0
    for(i=midPoint; i<MAX_PIXEL_VALUE - MIN_PIXEL_VALUE; ++i)
1c00528e:	0685                	addi	a3,a3,1
1c005290:	00b6c0fb          	lp.setup	x1,a3,1c0052a6 <adaptiveHistogramTechnique+0x1b4>
        sum2 += histogram[i];
1c005294:	100757b3          	p.exthz	a5,a4
1c005298:	0786                	slli	a5,a5,0x1
1c00529a:	97a6                	add	a5,a5,s1
1c00529c:	0007d783          	lhu	a5,0(a5)
    for(i=midPoint; i<MAX_PIXEL_VALUE - MIN_PIXEL_VALUE; ++i)
1c0052a0:	0705                	addi	a4,a4,1
1c0052a2:	0ff77713          	andi	a4,a4,255
        sum2 += histogram[i];
1c0052a6:	953e                	add	a0,a0,a5
    sum2 += histogram[MAX_PIXEL_VALUE - MIN_PIXEL_VALUE];
1c0052a8:	1fe4d783          	lhu	a5,510(s1)
1c0052ac:	953e                	add	a0,a0,a5
    if(sum1 >= sum2)
1c0052ae:	06a67b63          	bleu	a0,a2,1c005324 <adaptiveHistogramTechnique+0x232>
1c0052b2:	4601                	li	a2,0
        *lowerBound = MIN_PIXEL_VALUE;
1c0052b4:	4981                	li	s3,0
    #endif

    peaksBoundsPeakTechnique(histogram, object - MIN_PIXEL_VALUE, background - MIN_PIXEL_VALUE, &upperBound, &lowerBound);

    #ifdef DEBUG_ON
    printf("2nd iteration: upper bound: %u; lower bound: %u\n", upperBound, lowerBound);
1c0052b6:	1c00b537          	lui	a0,0x1c00b
1c0052ba:	f4050513          	addi	a0,a0,-192 # 1c00af40 <__clz_tab+0x504>
1c0052be:	64e040ef          	jal	ra,1c00990c <printf>
    #endif

    rangeThresholdImage(img, lowerBound, upperBound);
1c0052c2:	864a                	mv	a2,s2
1c0052c4:	85ce                	mv	a1,s3
1c0052c6:	8522                	mv	a0,s0
1c0052c8:	ca5fe0ef          	jal	ra,1c003f6c <rangeThresholdImage>
    pi_cl_l2_free(histogram, (MAX_PIXEL_VALUE + 2 -MIN_PIXEL_VALUE) * sizeof(uint16_t), &free_req);
1c0052cc:	0970                	addi	a2,sp,156
1c0052ce:	20200593          	li	a1,514
1c0052d2:	8526                	mv	a0,s1
1c0052d4:	660010ef          	jal	ra,1c006934 <pi_cl_l2_free>
  while((*(volatile char *)&req->done) == 0)
1c0052d8:	12c14783          	lbu	a5,300(sp)
1c0052dc:	0ff7f793          	andi	a5,a5,255
1c0052e0:	ef99                	bnez	a5,1c0052fe <adaptiveHistogramTechnique+0x20c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0052e2:	4689                	li	a3,2
1c0052e4:	00204737          	lui	a4,0x204
1c0052e8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0052ec:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0052f0:	00d72223          	sw	a3,4(a4)
1c0052f4:	12c14783          	lbu	a5,300(sp)
1c0052f8:	0ff7f793          	andi	a5,a5,255
1c0052fc:	d7f5                	beqz	a5,1c0052e8 <adaptiveHistogramTechnique+0x1f6>
    pi_cl_l2_free_wait(&free_req);
}
1c0052fe:	14c12083          	lw	ra,332(sp)
1c005302:	14812403          	lw	s0,328(sp)
1c005306:	14412483          	lw	s1,324(sp)
1c00530a:	14012903          	lw	s2,320(sp)
1c00530e:	13c12983          	lw	s3,316(sp)
1c005312:	6171                	addi	sp,sp,336
1c005314:	8082                	ret
    if(sum1 >= sum2)
1c005316:	862e                	mv	a2,a1
    uint8_t i, midPoint = ((secondPeak + firstPeak)>>1);
1c005318:	89ca                	mv	s3,s2
    if(sum1 >= sum2)
1c00531a:	0ff00593          	li	a1,255
        *upperBound = MAX_PIXEL_VALUE;
1c00531e:	0ff00913          	li	s2,255
1c005322:	bde5                	j	1c00521a <adaptiveHistogramTechnique+0x128>
    if(sum1 >= sum2)
1c005324:	862e                	mv	a2,a1
    uint8_t i, midPoint = ((secondPeak + firstPeak)>>1);
1c005326:	89ca                	mv	s3,s2
    if(sum1 >= sum2)
1c005328:	0ff00593          	li	a1,255
        *upperBound = MAX_PIXEL_VALUE;
1c00532c:	0ff00913          	li	s2,255
1c005330:	b759                	j	1c0052b6 <adaptiveHistogramTechnique+0x1c4>
    uint32_t sum1 = 0, sum2 = 0;
1c005332:	4501                	li	a0,0
1c005334:	bde1                	j	1c00520c <adaptiveHistogramTechnique+0x11a>
1c005336:	4601                	li	a2,0
1c005338:	b799                	j	1c00527e <adaptiveHistogramTechnique+0x18c>
1c00533a:	4501                	li	a0,0
1c00533c:	b7b5                	j	1c0052a8 <adaptiveHistogramTechnique+0x1b6>
1c00533e:	4601                	li	a2,0
1c005340:	b54d                	j	1c0051e2 <adaptiveHistogramTechnique+0xf0>

1c005342 <pi_camera_open>:
  __builtin_pulp_spr_write(reg, val);
1c005342:	415c                	lw	a5,4(a0)
1c005344:	43dc                	lw	a5,4(a5)
1c005346:	0007a303          	lw	t1,0(a5)
1c00534a:	c11c                	sw	a5,0(a0)
1c00534c:	8302                	jr	t1

1c00534e <__camera_conf_init>:



void __camera_conf_init(struct pi_camera_conf *conf)
{
}
1c00534e:	8082                	ret

1c005350 <__himax_reg_write>:
static void __himax_reg_write(himax_t *himax, uint16_t addr, uint8_t value)
{
  if (is_i2c_active())
  {
    himax->i2c_req.value = value;
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c005350:	00859793          	slli	a5,a1,0x8
1c005354:	81a1                	srli	a1,a1,0x8
1c005356:	8ddd                	or	a1,a1,a5
    himax->i2c_req.value = value;
1c005358:	02c50f23          	sb	a2,62(a0)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c00535c:	02b51e23          	sh	a1,60(a0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 3, PI_I2C_XFER_STOP);
1c005360:	4681                	li	a3,0
1c005362:	03c50593          	addi	a1,a0,60
1c005366:	460d                	li	a2,3
1c005368:	03050513          	addi	a0,a0,48
1c00536c:	7a80206f          	j	1c007b14 <pi_i2c_write>

1c005370 <__himax_init_regs>:
}



static void __himax_init_regs(himax_t *himax)
{
1c005370:	1101                	addi	sp,sp,-32
1c005372:	cc22                	sw	s0,24(sp)
1c005374:	1c00b437          	lui	s0,0x1c00b
1c005378:	ca26                	sw	s1,20(sp)
1c00537a:	c84a                	sw	s2,16(sp)
1c00537c:	c64e                	sw	s3,12(sp)
1c00537e:	ce06                	sw	ra,28(sp)
1c005380:	89aa                	mv	s3,a0
1c005382:	fe440413          	addi	s0,s0,-28 # 1c00afe4 <__himax_reg_init>
  int32_t i;
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c005386:	4481                	li	s1,0
1c005388:	04700913          	li	s2,71
  {
    __himax_reg_write(himax, __himax_reg_init[i].addr, __himax_reg_init[i].data);
1c00538c:	00244603          	lbu	a2,2(s0)
1c005390:	0044558b          	p.lhu	a1,4(s0!)
1c005394:	854e                	mv	a0,s3
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c005396:	0485                	addi	s1,s1,1
    __himax_reg_write(himax, __himax_reg_init[i].addr, __himax_reg_init[i].data);
1c005398:	3f65                	jal	1c005350 <__himax_reg_write>
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c00539a:	ff2499e3          	bne	s1,s2,1c00538c <__himax_init_regs+0x1c>
  }
}
1c00539e:	40f2                	lw	ra,28(sp)
1c0053a0:	4462                	lw	s0,24(sp)
1c0053a2:	44d2                	lw	s1,20(sp)
1c0053a4:	4942                	lw	s2,16(sp)
1c0053a6:	49b2                	lw	s3,12(sp)
1c0053a8:	6105                	addi	sp,sp,32
1c0053aa:	8082                	ret

1c0053ac <__himax_set_qqvga>:
    __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
    pi_time_wait_us(50);
  }
}

static void __himax_set_qqvga(himax_t *himax){
1c0053ac:	1141                	addi	sp,sp,-16
  __himax_reg_write(himax, HIMAX_BINNING_MODE, 0x03);
1c0053ae:	460d                	li	a2,3
1c0053b0:	39000593          	li	a1,912
static void __himax_set_qqvga(himax_t *himax){
1c0053b4:	c606                	sw	ra,12(sp)
1c0053b6:	c422                	sw	s0,8(sp)
1c0053b8:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_BINNING_MODE, 0x03);
1c0053ba:	3f59                	jal	1c005350 <__himax_reg_write>
  __himax_reg_write(himax, HIMAX_READOUT_X, 0x03);
1c0053bc:	8522                	mv	a0,s0
1c0053be:	460d                	li	a2,3
1c0053c0:	38300593          	li	a1,899
1c0053c4:	3771                	jal	1c005350 <__himax_reg_write>
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c0053c6:	8522                	mv	a0,s0
}
1c0053c8:	4422                	lw	s0,8(sp)
1c0053ca:	40b2                	lw	ra,12(sp)
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c0053cc:	460d                	li	a2,3
1c0053ce:	38700593          	li	a1,903
}
1c0053d2:	0141                	addi	sp,sp,16
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c0053d4:	bfb5                	j	1c005350 <__himax_reg_write>

1c0053d6 <__himax_reg_set>:
}



int32_t __himax_reg_set(struct pi_device *device, uint32_t addr, uint8_t *value)
{
1c0053d6:	1141                	addi	sp,sp,-16
1c0053d8:	c606                	sw	ra,12(sp)
  himax_t *himax = (himax_t *)device->data;
  __himax_reg_write(himax, addr, *value);
1c0053da:	4508                	lw	a0,8(a0)
1c0053dc:	00064603          	lbu	a2,0(a2)
1c0053e0:	1005d5b3          	p.exthz	a1,a1
1c0053e4:	37b5                	jal	1c005350 <__himax_reg_write>
  return 0;
}
1c0053e6:	40b2                	lw	ra,12(sp)
1c0053e8:	4501                	li	a0,0
1c0053ea:	0141                	addi	sp,sp,16
1c0053ec:	8082                	ret

1c0053ee <__himax_reg_get>:



int32_t __himax_reg_get(struct pi_device *device, uint32_t addr, uint8_t *value)
{
1c0053ee:	1141                	addi	sp,sp,-16
1c0053f0:	c422                	sw	s0,8(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c0053f2:	01000737          	lui	a4,0x1000
  himax_t *himax = (himax_t *)device->data;
1c0053f6:	4500                	lw	s0,8(a0)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c0053f8:	f0070713          	addi	a4,a4,-256 # ffff00 <__L2+0xf7ff00>
1c0053fc:	00859793          	slli	a5,a1,0x8
1c005400:	8ff9                	and	a5,a5,a4
1c005402:	ce8595b3          	p.extractu	a1,a1,7,8
{
1c005406:	c606                	sw	ra,12(sp)
1c005408:	c226                	sw	s1,4(sp)
1c00540a:	c04a                	sw	s2,0(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c00540c:	8ddd                	or	a1,a1,a5
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c00540e:	03040493          	addi	s1,s0,48
{
1c005412:	8932                	mv	s2,a2
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c005414:	02b41e23          	sh	a1,60(s0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c005418:	4685                	li	a3,1
1c00541a:	03c40593          	addi	a1,s0,60
1c00541e:	4609                	li	a2,2
1c005420:	8526                	mv	a0,s1
1c005422:	6f2020ef          	jal	ra,1c007b14 <pi_i2c_write>
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c005426:	04040593          	addi	a1,s0,64
1c00542a:	8526                	mv	a0,s1
1c00542c:	4681                	li	a3,0
1c00542e:	4605                	li	a2,1
1c005430:	7c4020ef          	jal	ra,1c007bf4 <pi_i2c_read>
    return *(volatile uint8_t *)&himax->i2c_read_value;
1c005434:	04044783          	lbu	a5,64(s0)
  *value = __himax_reg_read(himax, addr);
  return 0;
}
1c005438:	40b2                	lw	ra,12(sp)
1c00543a:	4422                	lw	s0,8(sp)
  *value = __himax_reg_read(himax, addr);
1c00543c:	00f90023          	sb	a5,0(s2)
}
1c005440:	4492                	lw	s1,4(sp)
1c005442:	4902                	lw	s2,0(sp)
1c005444:	4501                	li	a0,0
1c005446:	0141                	addi	sp,sp,16
1c005448:	8082                	ret

1c00544a <__himax_capture_async>:
  pi_cpi_capture_async(&himax->cpi_device, buffer, bufferlen, task);
1c00544a:	4508                	lw	a0,8(a0)
1c00544c:	02450513          	addi	a0,a0,36
1c005450:	54e0206f          	j	1c00799e <pi_cpi_capture_async>

1c005454 <__himax_standby>:
  if (himax->is_awake)
1c005454:	4178                	lw	a4,68(a0)
1c005456:	cf19                	beqz	a4,1c005474 <__himax_standby+0x20>
{
1c005458:	1141                	addi	sp,sp,-16
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c00545a:	4601                	li	a2,0
1c00545c:	10000593          	li	a1,256
{
1c005460:	c422                	sw	s0,8(sp)
1c005462:	c606                	sw	ra,12(sp)
1c005464:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c005466:	35ed                	jal	1c005350 <__himax_reg_write>
}
1c005468:	40b2                	lw	ra,12(sp)
    himax->is_awake = 0;
1c00546a:	04042223          	sw	zero,68(s0)
}
1c00546e:	4422                	lw	s0,8(sp)
1c005470:	0141                	addi	sp,sp,16
1c005472:	8082                	ret
1c005474:	8082                	ret

1c005476 <__himax_close>:
{
1c005476:	1141                	addi	sp,sp,-16
1c005478:	c422                	sw	s0,8(sp)
  himax_t *himax = (himax_t *)device->data;
1c00547a:	4500                	lw	s0,8(a0)
{
1c00547c:	c606                	sw	ra,12(sp)
  __himax_standby(himax);
1c00547e:	8522                	mv	a0,s0
1c005480:	3fd1                	jal	1c005454 <__himax_standby>
  pi_cpi_close(&himax->cpi_device);
1c005482:	02440513          	addi	a0,s0,36
1c005486:	4d0020ef          	jal	ra,1c007956 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c00548a:	8522                	mv	a0,s0
}
1c00548c:	4422                	lw	s0,8(sp)
1c00548e:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c005490:	04800593          	li	a1,72
}
1c005494:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c005496:	4c80106f          	j	1c00695e <pi_l2_free>

1c00549a <__himax_reset>:
{
1c00549a:	1101                	addi	sp,sp,-32
1c00549c:	cc22                	sw	s0,24(sp)
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c00549e:	4605                	li	a2,1
{
1c0054a0:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c0054a2:	10300593          	li	a1,259
{
1c0054a6:	ca26                	sw	s1,20(sp)
1c0054a8:	c84a                	sw	s2,16(sp)
1c0054aa:	c64e                	sw	s3,12(sp)
1c0054ac:	c452                	sw	s4,8(sp)
1c0054ae:	ce06                	sw	ra,28(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c0054b0:	4a05                	li	s4,1
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c0054b2:	3d79                	jal	1c005350 <__himax_reg_write>
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c0054b4:	03040493          	addi	s1,s0,48
1c0054b8:	03c40993          	addi	s3,s0,60
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c0054bc:	04040913          	addi	s2,s0,64
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c0054c0:	4685                	li	a3,1
1c0054c2:	4609                	li	a2,2
1c0054c4:	85ce                	mv	a1,s3
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c0054c6:	03441e23          	sh	s4,60(s0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c0054ca:	8526                	mv	a0,s1
1c0054cc:	648020ef          	jal	ra,1c007b14 <pi_i2c_write>
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c0054d0:	4681                	li	a3,0
1c0054d2:	4605                	li	a2,1
1c0054d4:	85ca                	mv	a1,s2
1c0054d6:	8526                	mv	a0,s1
1c0054d8:	71c020ef          	jal	ra,1c007bf4 <pi_i2c_read>
    return *(volatile uint8_t *)&himax->i2c_read_value;
1c0054dc:	04044783          	lbu	a5,64(s0)
1c0054e0:	0ff7f793          	andi	a5,a5,255
  while (__himax_reg_read(himax, HIMAX_MODE_SELECT) != HIMAX_STANDBY)
1c0054e4:	eb89                	bnez	a5,1c0054f6 <__himax_reset+0x5c>
}
1c0054e6:	40f2                	lw	ra,28(sp)
1c0054e8:	4462                	lw	s0,24(sp)
1c0054ea:	44d2                	lw	s1,20(sp)
1c0054ec:	4942                	lw	s2,16(sp)
1c0054ee:	49b2                	lw	s3,12(sp)
1c0054f0:	4a22                	lw	s4,8(sp)
1c0054f2:	6105                	addi	sp,sp,32
1c0054f4:	8082                	ret
    __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c0054f6:	8522                	mv	a0,s0
1c0054f8:	4605                	li	a2,1
1c0054fa:	10300593          	li	a1,259
1c0054fe:	3d89                	jal	1c005350 <__himax_reg_write>
    pi_time_wait_us(50);
1c005500:	03200513          	li	a0,50
1c005504:	538010ef          	jal	ra,1c006a3c <pi_time_wait_us>
1c005508:	bf65                	j	1c0054c0 <__himax_reset+0x26>

1c00550a <__himax_open>:
{
1c00550a:	7179                	addi	sp,sp,-48
1c00550c:	d226                	sw	s1,36(sp)
1c00550e:	d04a                	sw	s2,32(sp)
  struct pi_himax_conf *conf = (struct pi_himax_conf *)device->config;
1c005510:	4144                	lw	s1,4(a0)
{
1c005512:	892a                	mv	s2,a0
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c005514:	04800513          	li	a0,72
{
1c005518:	d606                	sw	ra,44(sp)
1c00551a:	d422                	sw	s0,40(sp)
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c00551c:	434010ef          	jal	ra,1c006950 <pi_l2_malloc>
  if (himax == NULL) return -1;
1c005520:	12050f63          	beqz	a0,1c00565e <__himax_open+0x154>
  memcpy(&himax->conf, conf, sizeof(*conf));
1c005524:	02400613          	li	a2,36
1c005528:	85a6                	mv	a1,s1
1c00552a:	842a                	mv	s0,a0
1c00552c:	0ea040ef          	jal	ra,1c009616 <memcpy>
  if (bsp_himax_open(conf))
1c005530:	8526                	mv	a0,s1
  device->data = (void *)himax;
1c005532:	00892423          	sw	s0,8(s2)
  if (bsp_himax_open(conf))
1c005536:	06d000ef          	jal	ra,1c005da2 <bsp_himax_open>
1c00553a:	10051d63          	bnez	a0,1c005654 <__himax_open+0x14a>
  pi_cpi_conf_init(&cpi_conf);
1c00553e:	0048                	addi	a0,sp,4
1c005540:	3a2020ef          	jal	ra,1c0078e2 <pi_cpi_conf_init>
  cpi_conf.itf = conf->cpi_itf;
1c005544:	449c                	lw	a5,8(s1)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c005546:	02440913          	addi	s2,s0,36
1c00554a:	854a                	mv	a0,s2
1c00554c:	004c                	addi	a1,sp,4
  cpi_conf.itf = conf->cpi_itf;
1c00554e:	00f10423          	sb	a5,8(sp)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c005552:	21d000ef          	jal	ra,1c005f6e <pi_open_from_conf>
  if (pi_cpi_open(&himax->cpi_device))
1c005556:	854a                	mv	a0,s2
1c005558:	394020ef          	jal	ra,1c0078ec <pi_cpi_open>
1c00555c:	0e051c63          	bnez	a0,1c005654 <__himax_open+0x14a>
  pi_i2c_conf_init(&i2c_conf);
1c005560:	0068                	addi	a0,sp,12
1c005562:	7ce020ef          	jal	ra,1c007d30 <pi_i2c_conf_init>
  i2c_conf.cs = 0x48;
1c005566:	04800793          	li	a5,72
1c00556a:	00f11923          	sh	a5,18(sp)
  i2c_conf.itf = conf->i2c_itf;
1c00556e:	44dc                	lw	a5,12(s1)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c005570:	03040493          	addi	s1,s0,48
1c005574:	8526                	mv	a0,s1
1c005576:	006c                	addi	a1,sp,12
  i2c_conf.itf = conf->i2c_itf;
1c005578:	00f10823          	sb	a5,16(sp)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c00557c:	1f3000ef          	jal	ra,1c005f6e <pi_open_from_conf>
  if (pi_i2c_open(&himax->i2c_device))
1c005580:	8526                	mv	a0,s1
1c005582:	696020ef          	jal	ra,1c007c18 <pi_i2c_open>
1c005586:	e561                	bnez	a0,1c00564e <__himax_open+0x144>
1c005588:	5450                	lw	a2,44(s0)
static inline void udma_cpi_cam_tx_cfg_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_TX_CFG_OFFSET, value); }

static inline uint32_t udma_cpi_cam_tx_initcfg_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_TX_INITCFG_OFFSET); }
static inline void udma_cpi_cam_tx_initcfg_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_TX_INITCFG_OFFSET, value); }

static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c00558a:	4618                	lw	a4,8(a2)
}

static inline void pi_cpi_set_format(struct pi_device *device, pi_cpi_format_e format)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c00558c:	02072783          	lw	a5,32(a4)
  reg.format = format;
1c005590:	4695                	li	a3,5
1c005592:	c486a7b3          	p.insert	a5,a3,2,8
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c005596:	02f72023          	sw	a5,32(a4)
  if(himax->conf.format>PI_CAMERA_QQVGA){
1c00559a:	4858                	lw	a4,20(s0)
1c00559c:	4789                	li	a5,2
1c00559e:	0ae7f163          	bleu	a4,a5,1c005640 <__himax_open+0x136>
      rowlen = himax->conf.format;
1c0055a2:	100757b3          	p.exthz	a5,a4

static inline void pi_cpi_set_rowlen(struct pi_device *device, uint16_t rowlen)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;
  /* the rowlen should be the weidth of each frame devided by the channel size in byte */
  udma_cpi_cam_cfg_size_set(cpi->base, UDMA_CPI_CAM_CFG_SIZE_ROWLEN(
1c0055a6:	01c64703          	lbu	a4,28(a2)
1c0055aa:	4614                	lw	a3,8(a2)
1c0055ac:	e311                	bnez	a4,1c0055b0 <__himax_open+0xa6>
1c0055ae:	4705                	li	a4,1
1c0055b0:	02e7c7b3          	div	a5,a5,a4
1c0055b4:	17fd                	addi	a5,a5,-1
1c0055b6:	07c2                	slli	a5,a5,0x10

static inline uint32_t udma_cpi_cam_cfg_ur_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_UR_OFFSET); }
static inline void udma_cpi_cam_cfg_ur_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_UR_OFFSET, value); }

static inline uint32_t udma_cpi_cam_cfg_size_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_SIZE_OFFSET); }
static inline void udma_cpi_cam_cfg_size_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_SIZE_OFFSET, value); }
1c0055b8:	02f6a623          	sw	a5,44(a3)
  if (himax->conf.roi.slice_en != 0)
1c0055bc:	02044783          	lbu	a5,32(s0)
1c0055c0:	cfa9                	beqz	a5,1c00561a <__himax_open+0x110>
    pi_cpi_set_slice(&himax->cpi_device, himax->conf.roi.x>>div,
1c0055c2:	01845703          	lhu	a4,24(s0)
            himax->conf.roi.y,
1c0055c6:	01a45803          	lhu	a6,26(s0)
    pi_cpi_set_slice(&himax->cpi_device, himax->conf.roi.x>>div,
1c0055ca:	01c45683          	lhu	a3,28(s0)
            himax->conf.roi.h);
1c0055ce:	01e45783          	lhu	a5,30(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c0055d2:	4608                	lw	a0,8(a2)

static inline void pi_cpi_set_slice(struct pi_device *device, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;

  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c0055d4:	02052883          	lw	a7,32(a0)
  reg.frameslice_en = w != 0;
1c0055d8:	00d035b3          	snez	a1,a3
1c0055dc:	c075a8b3          	p.insert	a7,a1,0,7
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c0055e0:	03152023          	sw	a7,32(a0)
  udma_cpi_cam_cfg_glob_set(cpi->base, reg.raw);

  if (w)
1c0055e4:	ca9d                	beqz	a3,1c00561a <__himax_open+0x110>
  {
    udma_cpi_cam_cfg_ll_set(cpi->base,
      UDMA_CPI_CAM_CFG_LL_FRAMESLICE_LLX(x/(cpi->datasize ? cpi->datasize : 1)) |
1c0055e6:	01c64603          	lbu	a2,28(a2)
1c0055ea:	85b2                	mv	a1,a2
1c0055ec:	e211                	bnez	a2,1c0055f0 <__himax_open+0xe6>
1c0055ee:	4605                	li	a2,1
1c0055f0:	02c75633          	divu	a2,a4,a2
      UDMA_CPI_CAM_CFG_LL_FRAMESLICE_LLY(y)
1c0055f4:	01081893          	slli	a7,a6,0x10
    udma_cpi_cam_cfg_ll_set(cpi->base,
1c0055f8:	01166633          	or	a2,a2,a7
static inline void udma_cpi_cam_cfg_ll_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_LL_OFFSET, value); }
1c0055fc:	02c52223          	sw	a2,36(a0)
    );

    udma_cpi_cam_cfg_ur_set(cpi->base,
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URX((x + w)/(cpi->datasize ? cpi->datasize : 1) - 1) |
1c005600:	96ba                	add	a3,a3,a4
1c005602:	872e                	mv	a4,a1
1c005604:	e191                	bnez	a1,1c005608 <__himax_open+0xfe>
1c005606:	4705                	li	a4,1
1c005608:	02e6d733          	divu	a4,a3,a4
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URY(y + h - 1)
1c00560c:	97c2                	add	a5,a5,a6
1c00560e:	17fd                	addi	a5,a5,-1
1c005610:	07c2                	slli	a5,a5,0x10
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URX((x + w)/(cpi->datasize ? cpi->datasize : 1) - 1) |
1c005612:	177d                	addi	a4,a4,-1
    udma_cpi_cam_cfg_ur_set(cpi->base,
1c005614:	8fd9                	or	a5,a5,a4
static inline void udma_cpi_cam_cfg_ur_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_UR_OFFSET, value); }
1c005616:	02f52423          	sw	a5,40(a0)
  __himax_reset(himax);
1c00561a:	8522                	mv	a0,s0
  himax->is_awake = 0;
1c00561c:	04042223          	sw	zero,68(s0)
  __himax_reset(himax);
1c005620:	3dad                	jal	1c00549a <__himax_reset>
  __himax_init_regs(himax);
1c005622:	8522                	mv	a0,s0
1c005624:	33b1                	jal	1c005370 <__himax_init_regs>
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c005626:	485c                	lw	a5,20(s0)
  return 0;
1c005628:	4481                	li	s1,0
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c00562a:	0027b463          	p.bneimm	a5,2,1c005632 <__himax_open+0x128>
    __himax_set_qqvga(himax);
1c00562e:	8522                	mv	a0,s0
1c005630:	3bb5                	jal	1c0053ac <__himax_set_qqvga>
}
1c005632:	50b2                	lw	ra,44(sp)
1c005634:	5422                	lw	s0,40(sp)
1c005636:	8526                	mv	a0,s1
1c005638:	5902                	lw	s2,32(sp)
1c00563a:	5492                	lw	s1,36(sp)
1c00563c:	6145                	addi	sp,sp,48
1c00563e:	8082                	ret
      rowlen = 160+2;
1c005640:	0a200793          	li	a5,162
  }else if(himax->conf.format==PI_CAMERA_QQVGA){
1c005644:	f62721e3          	p.beqimm	a4,2,1c0055a6 <__himax_open+0x9c>
      rowlen = 320+4;
1c005648:	14400793          	li	a5,324
1c00564c:	bfa9                	j	1c0055a6 <__himax_open+0x9c>
  pi_cpi_close(&himax->cpi_device);
1c00564e:	854a                	mv	a0,s2
1c005650:	306020ef          	jal	ra,1c007956 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c005654:	04800593          	li	a1,72
1c005658:	8522                	mv	a0,s0
1c00565a:	304010ef          	jal	ra,1c00695e <pi_l2_free>
  if (himax == NULL) return -1;
1c00565e:	54fd                	li	s1,-1
1c005660:	bfc9                	j	1c005632 <__himax_open+0x128>

1c005662 <__himax_reopen>:
{
1c005662:	7139                	addi	sp,sp,-64
1c005664:	da26                	sw	s1,52(sp)
1c005666:	d84a                	sw	s2,48(sp)
  struct pi_himax_conf *conf = (struct pi_himax_conf *)device->config;
1c005668:	4144                	lw	s1,4(a0)
{
1c00566a:	892a                	mv	s2,a0
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c00566c:	04800513          	li	a0,72
{
1c005670:	d64e                	sw	s3,44(sp)
1c005672:	de06                	sw	ra,60(sp)
1c005674:	dc22                	sw	s0,56(sp)
1c005676:	89ae                	mv	s3,a1
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c005678:	2d8010ef          	jal	ra,1c006950 <pi_l2_malloc>
  if (himax == NULL) return -1;
1c00567c:	c955                	beqz	a0,1c005730 <__himax_reopen+0xce>
  memcpy(&himax->conf, conf, sizeof(*conf));
1c00567e:	02400613          	li	a2,36
1c005682:	85a6                	mv	a1,s1
1c005684:	842a                	mv	s0,a0
1c005686:	791030ef          	jal	ra,1c009616 <memcpy>
  if (bsp_himax_open(conf))
1c00568a:	8526                	mv	a0,s1
  device->data = (void *)himax;
1c00568c:	00892423          	sw	s0,8(s2)
  if (bsp_himax_open(conf))
1c005690:	712000ef          	jal	ra,1c005da2 <bsp_himax_open>
1c005694:	e949                	bnez	a0,1c005726 <__himax_reopen+0xc4>
  pi_cpi_conf_init(&cpi_conf);
1c005696:	0048                	addi	a0,sp,4
1c005698:	24a020ef          	jal	ra,1c0078e2 <pi_cpi_conf_init>
  cpi_conf.itf = conf->cpi_itf;
1c00569c:	449c                	lw	a5,8(s1)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c00569e:	02440913          	addi	s2,s0,36
1c0056a2:	854a                	mv	a0,s2
1c0056a4:	004c                	addi	a1,sp,4
  cpi_conf.itf = conf->cpi_itf;
1c0056a6:	00f10423          	sb	a5,8(sp)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c0056aa:	0c5000ef          	jal	ra,1c005f6e <pi_open_from_conf>
  if (pi_cpi_open(&himax->cpi_device))
1c0056ae:	854a                	mv	a0,s2
1c0056b0:	23c020ef          	jal	ra,1c0078ec <pi_cpi_open>
1c0056b4:	e92d                	bnez	a0,1c005726 <__himax_reopen+0xc4>
  pi_i2c_conf_init(&i2c_conf);
1c0056b6:	0068                	addi	a0,sp,12
1c0056b8:	678020ef          	jal	ra,1c007d30 <pi_i2c_conf_init>
  i2c_conf.cs = 0x48;
1c0056bc:	04800793          	li	a5,72
1c0056c0:	00f11923          	sh	a5,18(sp)
  i2c_conf.itf = conf->i2c_itf;
1c0056c4:	44dc                	lw	a5,12(s1)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c0056c6:	03040493          	addi	s1,s0,48
1c0056ca:	8526                	mv	a0,s1
1c0056cc:	006c                	addi	a1,sp,12
  i2c_conf.itf = conf->i2c_itf;
1c0056ce:	00f10823          	sb	a5,16(sp)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c0056d2:	09d000ef          	jal	ra,1c005f6e <pi_open_from_conf>
  if (pi_i2c_open(&himax->i2c_device))
1c0056d6:	8526                	mv	a0,s1
1c0056d8:	540020ef          	jal	ra,1c007c18 <pi_i2c_open>
1c0056dc:	e131                	bnez	a0,1c005720 <__himax_reopen+0xbe>
1c0056de:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c0056e0:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c0056e2:	02072783          	lw	a5,32(a4)
  reg.format = format;
1c0056e6:	4695                	li	a3,5
1c0056e8:	c486a7b3          	p.insert	a5,a3,2,8
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c0056ec:	02f72023          	sw	a5,32(a4)
  himax->is_awake = 0;
1c0056f0:	04042223          	sw	zero,68(s0)
  if(opts != PI_CAMERA_OPT_NO_REG_INIT){
1c0056f4:	0019a763          	p.beqimm	s3,1,1c005702 <__himax_reopen+0xa0>
    __himax_reset(himax);
1c0056f8:	8522                	mv	a0,s0
1c0056fa:	3345                	jal	1c00549a <__himax_reset>
    __himax_init_regs(himax);
1c0056fc:	8522                	mv	a0,s0
1c0056fe:	c73ff0ef          	jal	ra,1c005370 <__himax_init_regs>
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c005702:	485c                	lw	a5,20(s0)
  return 0;
1c005704:	4481                	li	s1,0
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c005706:	0027b563          	p.bneimm	a5,2,1c005710 <__himax_reopen+0xae>
    __himax_set_qqvga(himax);
1c00570a:	8522                	mv	a0,s0
1c00570c:	ca1ff0ef          	jal	ra,1c0053ac <__himax_set_qqvga>
}
1c005710:	50f2                	lw	ra,60(sp)
1c005712:	5462                	lw	s0,56(sp)
1c005714:	8526                	mv	a0,s1
1c005716:	5942                	lw	s2,48(sp)
1c005718:	54d2                	lw	s1,52(sp)
1c00571a:	59b2                	lw	s3,44(sp)
1c00571c:	6121                	addi	sp,sp,64
1c00571e:	8082                	ret
  pi_cpi_close(&himax->cpi_device);
1c005720:	854a                	mv	a0,s2
1c005722:	234020ef          	jal	ra,1c007956 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c005726:	04800593          	li	a1,72
1c00572a:	8522                	mv	a0,s0
1c00572c:	232010ef          	jal	ra,1c00695e <pi_l2_free>
  if (himax == NULL) return -1;
1c005730:	54fd                	li	s1,-1
1c005732:	bff9                	j	1c005710 <__himax_reopen+0xae>

1c005734 <__himax_control>:
{
1c005734:	1141                	addi	sp,sp,-16
1c005736:	c606                	sw	ra,12(sp)
1c005738:	c422                	sw	s0,8(sp)
1c00573a:	c226                	sw	s1,4(sp)
1c00573c:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00573e:	300474f3          	csrrci	s1,mstatus,8
  switch (cmd)
1c005742:	471d                	li	a4,7
  himax_t *himax = (himax_t *)device->data;
1c005744:	4500                	lw	s0,8(a0)
  switch (cmd)
1c005746:	00b76d63          	bltu	a4,a1,1c005760 <__himax_control+0x2c>
1c00574a:	87ae                	mv	a5,a1
1c00574c:	1c00b737          	lui	a4,0x1c00b
1c005750:	078a                	slli	a5,a5,0x2
1c005752:	fc470713          	addi	a4,a4,-60 # 1c00afc4 <__clz_tab+0x588>
1c005756:	20f77783          	p.lw	a5,a5(a4)
1c00575a:	85b2                	mv	a1,a2
1c00575c:	8782                	jr	a5
      __himax_reopen(device, open_opt);
1c00575e:	3711                	jal	1c005662 <__himax_reopen>
  __builtin_pulp_spr_write(reg, val);
1c005760:	30049073          	csrw	mstatus,s1
}
1c005764:	40b2                	lw	ra,12(sp)
1c005766:	4422                	lw	s0,8(sp)
1c005768:	4492                	lw	s1,4(sp)
1c00576a:	4902                	lw	s2,0(sp)
1c00576c:	4501                	li	a0,0
1c00576e:	0141                	addi	sp,sp,16
1c005770:	8082                	ret
1c005772:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c005774:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c005776:	02072783          	lw	a5,32(a4)
  reg.en = 1;
1c00577a:	4905                	li	s2,1
1c00577c:	c1f927b3          	p.insert	a5,s2,0,31
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c005780:	02f72023          	sw	a5,32(a4)
  if (!himax->is_awake)
1c005784:	407c                	lw	a5,68(s0)
1c005786:	ffe9                	bnez	a5,1c005760 <__himax_control+0x2c>
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c005788:	4605                	li	a2,1
1c00578a:	10000593          	li	a1,256
1c00578e:	8522                	mv	a0,s0
1c005790:	bc1ff0ef          	jal	ra,1c005350 <__himax_reg_write>
    himax->is_awake = 1;
1c005794:	05242223          	sw	s2,68(s0)
1c005798:	b7e1                	j	1c005760 <__himax_control+0x2c>
      __himax_standby(himax);
1c00579a:	8522                	mv	a0,s0
1c00579c:	cb9ff0ef          	jal	ra,1c005454 <__himax_standby>
1c0057a0:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c0057a2:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c0057a4:	02072783          	lw	a5,32(a4)
  reg.en = 0;
1c0057a8:	c1f027b3          	p.insert	a5,zero,0,31
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c0057ac:	02f72023          	sw	a5,32(a4)
1c0057b0:	bf45                	j	1c005760 <__himax_control+0x2c>
  if (!himax->is_awake)
1c0057b2:	407c                	lw	a5,68(s0)
1c0057b4:	eb89                	bnez	a5,1c0057c6 <__himax_control+0x92>
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c0057b6:	4605                	li	a2,1
1c0057b8:	10000593          	li	a1,256
1c0057bc:	8522                	mv	a0,s0
1c0057be:	b93ff0ef          	jal	ra,1c005350 <__himax_reg_write>
    himax->is_awake = 1;
1c0057c2:	4785                	li	a5,1
1c0057c4:	c07c                	sw	a5,68(s0)
    pi_time_wait_us(1000000);
1c0057c6:	000f4537          	lui	a0,0xf4
1c0057ca:	24050513          	addi	a0,a0,576 # f4240 <__L2+0x74240>
1c0057ce:	26e010ef          	jal	ra,1c006a3c <pi_time_wait_us>
    __himax_standby(himax);
1c0057d2:	8522                	mv	a0,s0
1c0057d4:	c81ff0ef          	jal	ra,1c005454 <__himax_standby>
1c0057d8:	b761                	j	1c005760 <__himax_control+0x2c>

1c0057da <pi_himax_conf_init>:
  .reg_set        = &__himax_reg_set,
  .reg_get        = &__himax_reg_get
};

void pi_himax_conf_init(struct pi_himax_conf *conf)
{
1c0057da:	1141                	addi	sp,sp,-16
  conf->camera.api = &himax_api;
1c0057dc:	1c00b7b7          	lui	a5,0x1c00b
{
1c0057e0:	c422                	sw	s0,8(sp)
1c0057e2:	c606                	sw	ra,12(sp)
  conf->camera.api = &himax_api;
1c0057e4:	42878793          	addi	a5,a5,1064 # 1c00b428 <himax_api>
1c0057e8:	c15c                	sw	a5,4(a0)
  conf->skip_pads_config = 0;
  conf->format = PI_CAMERA_QVGA; //By Default QVGA
1c0057ea:	4785                	li	a5,1
  conf->skip_pads_config = 0;
1c0057ec:	00050823          	sb	zero,16(a0)
  conf->format = PI_CAMERA_QVGA; //By Default QVGA
1c0057f0:	c95c                	sw	a5,20(a0)
  conf->roi.slice_en = 0; //Disable the ROI by default.
1c0057f2:	02050023          	sb	zero,32(a0)
{
1c0057f6:	842a                	mv	s0,a0
  bsp_himax_conf_init(conf);
1c0057f8:	2b49                	jal	1c005d8a <bsp_himax_conf_init>
  __camera_conf_init(&conf->camera);
1c0057fa:	8522                	mv	a0,s0
}
1c0057fc:	4422                	lw	s0,8(sp)
1c0057fe:	40b2                	lw	ra,12(sp)
1c005800:	0141                	addi	sp,sp,16
  __camera_conf_init(&conf->camera);
1c005802:	b4dff06f          	j	1c00534e <__camera_conf_init>

1c005806 <pi_task_wait_on.isra.3>:
};

static inline int pi_transport_send_async(struct pi_device *device, void *buffer, size_t size, pi_task_t *task)
{
  pi_transport_api_t *api = (pi_transport_api_t *)device->api;
  return api->send_async(device, buffer, size, task);
1c005806:	1141                	addi	sp,sp,-16
1c005808:	c422                	sw	s0,8(sp)
1c00580a:	c226                	sw	s1,4(sp)
1c00580c:	c606                	sw	ra,12(sp)
1c00580e:	c04a                	sw	s2,0(sp)
1c005810:	842a                	mv	s0,a0
1c005812:	00040783          	lb	a5,0(s0)
1c005816:	c799                	beqz	a5,1c005824 <pi_task_wait_on.isra.3+0x1e>
1c005818:	40b2                	lw	ra,12(sp)
1c00581a:	4422                	lw	s0,8(sp)
1c00581c:	4492                	lw	s1,4(sp)
1c00581e:	4902                	lw	s2,0(sp)
1c005820:	0141                	addi	sp,sp,16
1c005822:	8082                	ret
1c005824:	30047973          	csrrci	s2,mstatus,8
1c005828:	4585                	li	a1,1
1c00582a:	01c00513          	li	a0,28
1c00582e:	5a7000ef          	jal	ra,1c0065d4 <__rt_event_execute>
1c005832:	30091073          	csrw	mstatus,s2
1c005836:	bff1                	j	1c005812 <pi_task_wait_on.isra.3+0xc>

1c005838 <pi_transport_open>:
1c005838:	415c                	lw	a5,4(a0)
1c00583a:	439c                	lw	a5,0(a5)
1c00583c:	0007a303          	lw	t1,0(a5)
1c005840:	c11c                	sw	a5,0(a0)
1c005842:	8302                	jr	t1

1c005844 <pi_transport_connect>:
1c005844:	1c00b7b7          	lui	a5,0x1c00b
1c005848:	57078793          	addi	a5,a5,1392 # 1c00b570 <connection.13465>
1c00584c:	4388                	lw	a0,0(a5)
1c00584e:	00150713          	addi	a4,a0,1
1c005852:	c398                	sw	a4,0(a5)
1c005854:	8082                	ret

1c005856 <pi_transport_send_header>:
1c005856:	411c                	lw	a5,0(a0)
}



int pi_transport_send_header(struct pi_device *device, struct pi_transport_header *header, int channel, size_t size)
{
1c005858:	7175                	addi	sp,sp,-144
  task->done = 0;
1c00585a:	00010a23          	sb	zero,20(sp)
1c00585e:	479c                	lw	a5,8(a5)
  task->id = PI_TASK_NONE_ID;
1c005860:	4705                	li	a4,1
1c005862:	c522                	sw	s0,136(sp)
  header->channel = channel;
1c005864:	c190                	sw	a2,0(a1)
  header->packet_size = size;
1c005866:	c1d4                	sw	a3,4(a1)
{
1c005868:	c706                	sw	ra,140(sp)
1c00586a:	cc3a                	sw	a4,24(sp)
  task->arg[0] = (uint32_t)0;
1c00586c:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c00586e:	d43a                	sw	a4,40(sp)
1c005870:	868a                	mv	a3,sp
1c005872:	4631                	li	a2,12
1c005874:	9782                	jalr	a5
  pi_task_t task;
  if (pi_transport_send_header_async(device, header, channel, size, pi_task_block(&task)))
  	return -1;
1c005876:	547d                	li	s0,-1
  if (pi_transport_send_header_async(device, header, channel, size, pi_task_block(&task)))
1c005878:	e501                	bnez	a0,1c005880 <pi_transport_send_header+0x2a>
1c00587a:	842a                	mv	s0,a0
  pi_task_wait_on(&task);
1c00587c:	0848                	addi	a0,sp,20
1c00587e:	3761                	jal	1c005806 <pi_task_wait_on.isra.3>
  return 0;
}
1c005880:	8522                	mv	a0,s0
1c005882:	40ba                	lw	ra,140(sp)
1c005884:	442a                	lw	s0,136(sp)
1c005886:	6149                	addi	sp,sp,144
1c005888:	8082                	ret

1c00588a <pi_transport_send>:



int pi_transport_send(struct pi_device *device, void *buffer, size_t size)
{
1c00588a:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00588c:	4785                	li	a5,1
1c00588e:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c005890:	d43e                	sw	a5,40(sp)
1c005892:	411c                	lw	a5,0(a0)
1c005894:	00010a23          	sb	zero,20(sp)
1c005898:	c522                	sw	s0,136(sp)
1c00589a:	479c                	lw	a5,8(a5)
1c00589c:	c706                	sw	ra,140(sp)
  task->arg[0] = (uint32_t)0;
1c00589e:	c202                	sw	zero,4(sp)
1c0058a0:	868a                	mv	a3,sp
1c0058a2:	9782                	jalr	a5
  pi_task_t task;
  if (pi_transport_send_async(device, buffer, size, pi_task_block(&task)))
  	return -1;
1c0058a4:	547d                	li	s0,-1
  if (pi_transport_send_async(device, buffer, size, pi_task_block(&task)))
1c0058a6:	e501                	bnez	a0,1c0058ae <pi_transport_send+0x24>
1c0058a8:	842a                	mv	s0,a0
  pi_task_wait_on(&task);
1c0058aa:	0848                	addi	a0,sp,20
1c0058ac:	3fa9                	jal	1c005806 <pi_task_wait_on.isra.3>
  return 0;
}
1c0058ae:	8522                	mv	a0,s0
1c0058b0:	40ba                	lw	ra,140(sp)
1c0058b2:	442a                	lw	s0,136(sp)
1c0058b4:	6149                	addi	sp,sp,144
1c0058b6:	8082                	ret

1c0058b8 <__nina_w10_append_string>:
}



static int __nina_w10_append_string(uint8_t *buffer, const char *str)
{
1c0058b8:	872a                	mv	a4,a0
1c0058ba:	87ae                	mv	a5,a1
  int index = 0;
  while(1)
  {
    buffer[index] = str[index];
1c0058bc:	0017c68b          	p.lbu	a3,1(a5!)
1c0058c0:	00d700ab          	p.sb	a3,1(a4!)
    if (str[index] == 0)
1c0058c4:	fff7c683          	lbu	a3,-1(a5)
1c0058c8:	40b78533          	sub	a0,a5,a1
1c0058cc:	fae5                	bnez	a3,1c0058bc <__nina_w10_append_string+0x4>
      break;
    index++;
  }
  return index + 1;
}
1c0058ce:	8082                	ret

1c0058d0 <__nina_w10_connect>:


int __nina_w10_connect(struct pi_device *device, int channel, void (*rcv_callback(void *arg, struct pi_transport_header)), void *arg)
{
  return 0;
}
1c0058d0:	4501                	li	a0,0
1c0058d2:	8082                	ret

1c0058d4 <__nina_w10_close>:


void __nina_w10_close(struct pi_device *device)
{

}
1c0058d4:	8082                	ret

1c0058d6 <__nina_w10_receive_async>:


int __nina_w10_receive_async(struct pi_device *device, void *buffer, size_t size, pi_task_t *task)
{
  return 0;
}
1c0058d6:	4501                	li	a0,0
1c0058d8:	8082                	ret

1c0058da <__nina_w10_get_response.constprop.6>:
  if (nina->access_done)
1c0058da:	0bc52783          	lw	a5,188(a0)
static int __nina_w10_get_response(nina_t *nina, uint8_t *response, int size, pi_task_t *task)
1c0058de:	1101                	addi	sp,sp,-32
1c0058e0:	cc22                	sw	s0,24(sp)
1c0058e2:	ca26                	sw	s1,20(sp)
1c0058e4:	c84a                	sw	s2,16(sp)
1c0058e6:	c64e                	sw	s3,12(sp)
1c0058e8:	ce06                	sw	ra,28(sp)
1c0058ea:	c452                	sw	s4,8(sp)
1c0058ec:	c256                	sw	s5,4(sp)
1c0058ee:	842a                	mv	s0,a0
1c0058f0:	892e                	mv	s2,a1
1c0058f2:	89b2                	mv	s3,a2
1c0058f4:	00c50493          	addi	s1,a0,12
  if (nina->access_done)
1c0058f8:	c791                	beqz	a5,1c005904 <__nina_w10_get_response.constprop.6+0x2a>
    while(pi_gpio_pin_notif_get(&nina->gpio_ready, CONFIG_NINA_GPIO_NINA_ACK) == 0)
1c0058fa:	45c9                	li	a1,18
1c0058fc:	8526                	mv	a0,s1
1c0058fe:	6a6030ef          	jal	ra,1c008fa4 <pi_gpio_pin_notif_get>
1c005902:	c915                	beqz	a0,1c005936 <__nina_w10_get_response.constprop.6+0x5c>
  pi_gpio_pin_notif_clear(&nina->gpio_ready, CONFIG_NINA_GPIO_NINA_ACK);
1c005904:	8526                	mv	a0,s1
1c005906:	45c9                	li	a1,18
1c005908:	684030ef          	jal	ra,1c008f8c <pi_gpio_pin_notif_clear>
  pi_spi_receive_async(&nina->spim, (void *)response, size*8, PI_SPI_CS_AUTO, task);
1c00590c:	8522                	mv	a0,s0
1c00590e:	874e                	mv	a4,s3
1c005910:	85ca                	mv	a1,s2
1c005912:	4681                	li	a3,0
1c005914:	04000613          	li	a2,64
1c005918:	2e7020ef          	jal	ra,1c0083fe <pi_spi_receive_async>
  nina->access_done = 1;
1c00591c:	4785                	li	a5,1
1c00591e:	0af42e23          	sw	a5,188(s0)
}
1c005922:	40f2                	lw	ra,28(sp)
1c005924:	4462                	lw	s0,24(sp)
1c005926:	44d2                	lw	s1,20(sp)
1c005928:	4942                	lw	s2,16(sp)
1c00592a:	49b2                	lw	s3,12(sp)
1c00592c:	4a22                	lw	s4,8(sp)
1c00592e:	4a92                	lw	s5,4(sp)
1c005930:	4501                	li	a0,0
1c005932:	6105                	addi	sp,sp,32
1c005934:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005936:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00593a:	4585                	li	a1,1
1c00593c:	01c00513          	li	a0,28
1c005940:	495000ef          	jal	ra,1c0065d4 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005944:	300a9073          	csrw	mstatus,s5
1c005948:	bf4d                	j	1c0058fa <__nina_w10_get_response.constprop.6+0x20>

1c00594a <__nina_w10_setup_resume>:
{
1c00594a:	1141                	addi	sp,sp,-16
1c00594c:	c422                	sw	s0,8(sp)
  pmsis_l2_malloc_free(nina->setup_command, nina->setup_size);
1c00594e:	0ac52583          	lw	a1,172(a0)
{
1c005952:	842a                	mv	s0,a0
  pmsis_l2_malloc_free(nina->setup_command, nina->setup_size);
1c005954:	0b052503          	lw	a0,176(a0)
{
1c005958:	c606                	sw	ra,12(sp)
  pmsis_l2_malloc_free(nina->setup_command, nina->setup_size);
1c00595a:	004010ef          	jal	ra,1c00695e <pi_l2_free>
  pi_task_t *task = nina->pending_task;
1c00595e:	0a042603          	lw	a2,160(s0)
  __nina_w10_get_response(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), task);
1c005962:	0b440593          	addi	a1,s0,180
  nina->pending_task = NULL;
1c005966:	0a042023          	sw	zero,160(s0)
  __nina_w10_get_response(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), task);
1c00596a:	8522                	mv	a0,s0
}
1c00596c:	4422                	lw	s0,8(sp)
1c00596e:	40b2                	lw	ra,12(sp)
1c005970:	0141                	addi	sp,sp,16
  __nina_w10_get_response(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), task);
1c005972:	b7a5                	j	1c0058da <__nina_w10_get_response.constprop.6>

1c005974 <__nina_w10_send_command>:
  if (nina->access_done)
1c005974:	0bc52783          	lw	a5,188(a0)
{
1c005978:	1101                	addi	sp,sp,-32
1c00597a:	cc22                	sw	s0,24(sp)
1c00597c:	ca26                	sw	s1,20(sp)
1c00597e:	c84a                	sw	s2,16(sp)
1c005980:	c64e                	sw	s3,12(sp)
1c005982:	c452                	sw	s4,8(sp)
1c005984:	ce06                	sw	ra,28(sp)
1c005986:	c256                	sw	s5,4(sp)
1c005988:	c05a                	sw	s6,0(sp)
1c00598a:	842a                	mv	s0,a0
1c00598c:	892e                	mv	s2,a1
1c00598e:	89b2                	mv	s3,a2
1c005990:	8a36                	mv	s4,a3
1c005992:	00c50493          	addi	s1,a0,12
  if (nina->access_done)
1c005996:	c791                	beqz	a5,1c0059a2 <__nina_w10_send_command+0x2e>
    while(pi_gpio_pin_notif_get(&nina->gpio_ready, CONFIG_NINA_GPIO_NINA_ACK) == 0)
1c005998:	45c9                	li	a1,18
1c00599a:	8526                	mv	a0,s1
1c00599c:	608030ef          	jal	ra,1c008fa4 <pi_gpio_pin_notif_get>
1c0059a0:	c91d                	beqz	a0,1c0059d6 <__nina_w10_send_command+0x62>
  pi_gpio_pin_notif_clear(&nina->gpio_ready, CONFIG_NINA_GPIO_NINA_ACK);
1c0059a2:	8526                	mv	a0,s1
1c0059a4:	45c9                	li	a1,18
1c0059a6:	5e6030ef          	jal	ra,1c008f8c <pi_gpio_pin_notif_clear>
  pi_spi_send_async(&nina->spim, (void *)command, size*8, PI_SPI_CS_AUTO, task);
1c0059aa:	8522                	mv	a0,s0
1c0059ac:	8752                	mv	a4,s4
1c0059ae:	00399613          	slli	a2,s3,0x3
1c0059b2:	85ca                	mv	a1,s2
1c0059b4:	4681                	li	a3,0
1c0059b6:	0f1020ef          	jal	ra,1c0082a6 <pi_spi_send_async>
  nina->access_done = 1;
1c0059ba:	4785                	li	a5,1
1c0059bc:	0af42e23          	sw	a5,188(s0)
}
1c0059c0:	40f2                	lw	ra,28(sp)
1c0059c2:	4462                	lw	s0,24(sp)
1c0059c4:	44d2                	lw	s1,20(sp)
1c0059c6:	4942                	lw	s2,16(sp)
1c0059c8:	49b2                	lw	s3,12(sp)
1c0059ca:	4a22                	lw	s4,8(sp)
1c0059cc:	4a92                	lw	s5,4(sp)
1c0059ce:	4b02                	lw	s6,0(sp)
1c0059d0:	4501                	li	a0,0
1c0059d2:	6105                	addi	sp,sp,32
1c0059d4:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0059d6:	30047b73          	csrrci	s6,mstatus,8
1c0059da:	4585                	li	a1,1
1c0059dc:	01c00513          	li	a0,28
1c0059e0:	3f5000ef          	jal	ra,1c0065d4 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0059e4:	300b1073          	csrw	mstatus,s6
1c0059e8:	bf45                	j	1c005998 <__nina_w10_send_command+0x24>

1c0059ea <__nina_w10_send_async>:
  nina_t *nina = (nina_t *)device->data;
1c0059ea:	4508                	lw	a0,8(a0)
{
1c0059ec:	1141                	addi	sp,sp,-16
1c0059ee:	c606                	sw	ra,12(sp)
1c0059f0:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0059f2:	30047473          	csrrci	s0,mstatus,8
  if (nina->pending_task)
1c0059f6:	0a052783          	lw	a5,160(a0)
1c0059fa:	c79d                	beqz	a5,1c005a28 <__nina_w10_send_async+0x3e>
    if (nina->pending_first)
1c0059fc:	0a452783          	lw	a5,164(a0)
1c005a00:	c38d                	beqz	a5,1c005a22 <__nina_w10_send_async+0x38>
      nina->pending_last->implem.next = task;
1c005a02:	0a852783          	lw	a5,168(a0)
1c005a06:	cfd4                	sw	a3,28(a5)
    nina->pending_last = task;
1c005a08:	0ad52423          	sw	a3,168(a0)
    task->implem.next = NULL;
1c005a0c:	0006ae23          	sw	zero,28(a3)
    task->implem.data[0] = (int)buffer;
1c005a10:	de8c                	sw	a1,56(a3)
    task->implem.data[1] = size;
1c005a12:	ded0                	sw	a2,60(a3)
  __builtin_pulp_spr_write(reg, val);
1c005a14:	30041073          	csrw	mstatus,s0
}
1c005a18:	40b2                	lw	ra,12(sp)
1c005a1a:	4422                	lw	s0,8(sp)
1c005a1c:	4501                	li	a0,0
1c005a1e:	0141                	addi	sp,sp,16
1c005a20:	8082                	ret
      nina->pending_first = task;
1c005a22:	0ad52223          	sw	a3,164(a0)
1c005a26:	b7cd                	j	1c005a08 <__nina_w10_send_async+0x1e>
  req->type = NINA_W10_CMD_SEND_PACKET;
1c005a28:	08100793          	li	a5,129
1c005a2c:	0af52a23          	sw	a5,180(a0)
  task->arg[0] = (uint32_t)callback;
1c005a30:	1c0067b7          	lui	a5,0x1c006
1c005a34:	a6678793          	addi	a5,a5,-1434 # 1c005a66 <__nina_w10_send_packet_resume>
1c005a38:	cd5c                	sw	a5,28(a0)
  task->implem.keep = 1;
1c005a3a:	4785                	li	a5,1
  req->size = size;
1c005a3c:	0ac52c23          	sw	a2,184(a0)
  nina->pending_task = task;
1c005a40:	0ad52023          	sw	a3,160(a0)
  nina->pending_size = size;
1c005a44:	08c52c23          	sw	a2,152(a0)
  nina->pending_packet = packet;
1c005a48:	08b52e23          	sw	a1,156(a0)
1c005a4c:	c13c                	sw	a5,64(a0)
  __nina_w10_send_command(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), pi_task_callback(&nina->task, __nina_w10_send_packet_resume, nina));
1c005a4e:	01850693          	addi	a3,a0,24
1c005a52:	4621                	li	a2,8
1c005a54:	0b450593          	addi	a1,a0,180
  task->id = PI_TASK_CALLBACK_ID;
1c005a58:	02052823          	sw	zero,48(a0)
  task->arg[1] = (uint32_t)arg;
1c005a5c:	d108                	sw	a0,32(a0)
  task->done = 0;
1c005a5e:	02050623          	sb	zero,44(a0)
1c005a62:	3f09                	jal	1c005974 <__nina_w10_send_command>
1c005a64:	bf45                	j	1c005a14 <__nina_w10_send_async+0x2a>

1c005a66 <__nina_w10_send_packet_resume>:
{
1c005a66:	1141                	addi	sp,sp,-16
1c005a68:	c226                	sw	s1,4(sp)
  if (nina->pending_size)
1c005a6a:	09852483          	lw	s1,152(a0)
{
1c005a6e:	c422                	sw	s0,8(sp)
1c005a70:	c606                	sw	ra,12(sp)
1c005a72:	842a                	mv	s0,a0
1c005a74:	01850693          	addi	a3,a0,24
  if (nina->pending_size)
1c005a78:	c4b9                	beqz	s1,1c005ac6 <__nina_w10_send_packet_resume+0x60>
    if (iter_size > nina->pending_size)
1c005a7a:	3ff00793          	li	a5,1023
1c005a7e:	0097f463          	bleu	s1,a5,1c005a86 <__nina_w10_send_packet_resume+0x20>
    uint32_t iter_size = 1024;
1c005a82:	40000493          	li	s1,1024
  task->arg[0] = (uint32_t)callback;
1c005a86:	1c0067b7          	lui	a5,0x1c006
1c005a8a:	a6678793          	addi	a5,a5,-1434 # 1c005a66 <__nina_w10_send_packet_resume>
    __nina_w10_send_command(nina, nina->pending_packet, iter_size, pi_task_callback(&nina->task, __nina_w10_send_packet_resume, nina));
1c005a8e:	09c42583          	lw	a1,156(s0)
1c005a92:	cc5c                	sw	a5,28(s0)
  task->implem.keep = 1;
1c005a94:	4785                	li	a5,1
1c005a96:	c03c                	sw	a5,64(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c005a98:	02042823          	sw	zero,48(s0)
  task->arg[1] = (uint32_t)arg;
1c005a9c:	d000                	sw	s0,32(s0)
1c005a9e:	02040623          	sb	zero,44(s0)
1c005aa2:	8626                	mv	a2,s1
1c005aa4:	8522                	mv	a0,s0
1c005aa6:	35f9                	jal	1c005974 <__nina_w10_send_command>
    nina->pending_size -= iter_size;
1c005aa8:	09842783          	lw	a5,152(s0)
}
1c005aac:	40b2                	lw	ra,12(sp)
    nina->pending_size -= iter_size;
1c005aae:	8f85                	sub	a5,a5,s1
1c005ab0:	08f42c23          	sw	a5,152(s0)
    nina->pending_packet += iter_size;
1c005ab4:	09c42783          	lw	a5,156(s0)
1c005ab8:	94be                	add	s1,s1,a5
1c005aba:	08942e23          	sw	s1,156(s0)
}
1c005abe:	4422                	lw	s0,8(sp)
1c005ac0:	4492                	lw	s1,4(sp)
1c005ac2:	0141                	addi	sp,sp,16
1c005ac4:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c005ac6:	1c0067b7          	lui	a5,0x1c006
1c005aca:	c9a78793          	addi	a5,a5,-870 # 1c005c9a <__nina_w10_send_packet_end>
1c005ace:	cd5c                	sw	a5,28(a0)
  task->id = PI_TASK_CALLBACK_ID;
1c005ad0:	02052823          	sw	zero,48(a0)
  task->arg[1] = (uint32_t)arg;
1c005ad4:	d008                	sw	a0,32(s0)
1c005ad6:	02050623          	sb	zero,44(a0)
1c005ada:	4422                	lw	s0,8(sp)
1c005adc:	40b2                	lw	ra,12(sp)
1c005ade:	4492                	lw	s1,4(sp)
  task->implem.keep = 1;
1c005ae0:	4785                	li	a5,1
1c005ae2:	c13c                	sw	a5,64(a0)
    __nina_w10_get_response(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), pi_task_callback(&nina->task, __nina_w10_send_packet_end, nina));
1c005ae4:	8636                	mv	a2,a3
1c005ae6:	0b450593          	addi	a1,a0,180
}
1c005aea:	0141                	addi	sp,sp,16
    __nina_w10_get_response(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), pi_task_callback(&nina->task, __nina_w10_send_packet_end, nina));
1c005aec:	b3fd                	j	1c0058da <__nina_w10_get_response.constprop.6>

1c005aee <__nina_w10_open>:
{
1c005aee:	7115                	addi	sp,sp,-224
1c005af0:	c9ca                	sw	s2,208(sp)
1c005af2:	c7ce                	sw	s3,204(sp)
  struct pi_nina_w10_conf *conf = (struct pi_nina_w10_conf *)device->config;
1c005af4:	00452903          	lw	s2,4(a0)
{
1c005af8:	89aa                	mv	s3,a0
  nina_t *nina = (nina_t *)pmsis_l2_malloc(sizeof(nina_t));
1c005afa:	0c000513          	li	a0,192
{
1c005afe:	cf86                	sw	ra,220(sp)
1c005b00:	cda2                	sw	s0,216(sp)
1c005b02:	cba6                	sw	s1,212(sp)
1c005b04:	c5d2                	sw	s4,200(sp)
1c005b06:	c3d6                	sw	s5,196(sp)
1c005b08:	c1da                	sw	s6,192(sp)
1c005b0a:	df5e                	sw	s7,188(sp)
  nina_t *nina = (nina_t *)pmsis_l2_malloc(sizeof(nina_t));
1c005b0c:	645000ef          	jal	ra,1c006950 <pi_l2_malloc>
  if (nina == NULL) return -1;
1c005b10:	18050363          	beqz	a0,1c005c96 <__nina_w10_open+0x1a8>
1c005b14:	842a                	mv	s0,a0
  pi_gpio_conf_init(&gpio_conf);
1c005b16:	0028                	addi	a0,sp,8
1c005b18:	33c030ef          	jal	ra,1c008e54 <pi_gpio_conf_init>
  pi_open_from_conf(&nina->gpio_ready, &gpio_conf);
1c005b1c:	00c40493          	addi	s1,s0,12
1c005b20:	002c                	addi	a1,sp,8
1c005b22:	8526                	mv	a0,s1
1c005b24:	21a9                	jal	1c005f6e <pi_open_from_conf>
  pi_gpio_open(&nina->gpio_ready);
1c005b26:	8526                	mv	a0,s1
1c005b28:	332030ef          	jal	ra,1c008e5a <pi_gpio_open>
  pi_gpio_pin_configure(&nina->gpio_ready, CONFIG_NINA_GPIO_NINA_ACK, PI_GPIO_INPUT);
1c005b2c:	4601                	li	a2,0
1c005b2e:	45c9                	li	a1,18
1c005b30:	8526                	mv	a0,s1
1c005b32:	4d0030ef          	jal	ra,1c009002 <pi_gpio_pin_configure>
  pi_gpio_pin_notif_configure(&nina->gpio_ready, CONFIG_NINA_GPIO_NINA_ACK, PI_GPIO_NOTIF_RISE);
1c005b36:	4605                	li	a2,1
1c005b38:	45c9                	li	a1,18
1c005b3a:	8526                	mv	a0,s1
1c005b3c:	3ec030ef          	jal	ra,1c008f28 <pi_gpio_pin_notif_configure>
  pi_pad_set_function(CONFIG_NINA_GPIO_NINA_ACK_PAD, CONFIG_NINA_GPIO_NINA_ACK_PAD_FUNC);
1c005b40:	4585                	li	a1,1
1c005b42:	4561                	li	a0,24
1c005b44:	54d010ef          	jal	ra,1c007890 <pi_pad_set_function>
  pi_spi_conf_init(&spi_conf);
1c005b48:	0808                	addi	a0,sp,16
1c005b4a:	204030ef          	jal	ra,1c008d4e <pi_spi_conf_init>
  spi_conf.itf = conf->spi_itf;
1c005b4e:	00492783          	lw	a5,4(s2)
  pi_open_from_conf(&nina->spim, &spi_conf);
1c005b52:	080c                	addi	a1,sp,16
1c005b54:	8522                	mv	a0,s0
  spi_conf.itf = conf->spi_itf;
1c005b56:	02f100a3          	sb	a5,33(sp)
  spi_conf.cs = conf->spi_cs;
1c005b5a:	00892783          	lw	a5,8(s2)
  spi_conf.polarity = 0;
1c005b5e:	cc02                	sw	zero,24(sp)
  spi_conf.phase = 0;
1c005b60:	ce02                	sw	zero,28(sp)
  spi_conf.cs = conf->spi_cs;
1c005b62:	02f10023          	sb	a5,32(sp)
  spi_conf.max_baudrate = 30000000;
1c005b66:	01c9c7b7          	lui	a5,0x1c9c
1c005b6a:	38078793          	addi	a5,a5,896 # 1c9c380 <__L2+0x1c1c380>
1c005b6e:	c83e                	sw	a5,16(sp)
1c005b70:	10000793          	li	a5,256
1c005b74:	00f11a23          	sh	a5,20(sp)
  pi_open_from_conf(&nina->spim, &spi_conf);
1c005b78:	2edd                	jal	1c005f6e <pi_open_from_conf>
  if (pi_spi_open(&nina->spim))
1c005b7a:	8522                	mv	a0,s0
1c005b7c:	2f0020ef          	jal	ra,1c007e6c <pi_spi_open>
1c005b80:	8a2a                	mv	s4,a0
1c005b82:	10051563          	bnez	a0,1c005c8c <__nina_w10_open+0x19e>
  device->data = (void *)nina;
1c005b86:	0089a423          	sw	s0,8(s3)
  nina->pending_task = NULL;
1c005b8a:	0a042023          	sw	zero,160(s0)
  nina->pending_first = NULL;
1c005b8e:	0a042223          	sw	zero,164(s0)
    pi_gpio_pin_read(&nina->gpio_ready, CONFIG_NINA_GPIO_NINA_ACK, &value);
1c005b92:	03010b93          	addi	s7,sp,48
1c005b96:	865e                	mv	a2,s7
1c005b98:	45c9                	li	a1,18
1c005b9a:	8526                	mv	a0,s1
1c005b9c:	354030ef          	jal	ra,1c008ef0 <pi_gpio_pin_read>
    if (value == 1)
1c005ba0:	5b42                	lw	s6,48(sp)
1c005ba2:	001b2663          	p.beqimm	s6,1,1c005bae <__nina_w10_open+0xc0>
    pi_time_wait_us(10);
1c005ba6:	4529                	li	a0,10
1c005ba8:	695000ef          	jal	ra,1c006a3c <pi_time_wait_us>
  do {
1c005bac:	b7ed                	j	1c005b96 <__nina_w10_open+0xa8>
  nina->access_done = 0;
1c005bae:	0a042e23          	sw	zero,188(s0)
1c005bb2:	04010223          	sb	zero,68(sp)
  int setup_size = sizeof(nina_req_t) + strlen(conf->ip_addr) + 1 + strlen(conf->ssid) + 1 + strlen(conf->passwd) + 1;
1c005bb6:	01492503          	lw	a0,20(s2)
  task->id = PI_TASK_NONE_ID;
1c005bba:	c4da                	sw	s6,72(sp)
  task->arg[0] = (uint32_t)0;
1c005bbc:	da02                	sw	zero,52(sp)
  task->implem.keep = 1;
1c005bbe:	ccda                	sw	s6,88(sp)
1c005bc0:	231030ef          	jal	ra,1c0095f0 <strlen>
1c005bc4:	89aa                	mv	s3,a0
1c005bc6:	00c92503          	lw	a0,12(s2)
1c005bca:	227030ef          	jal	ra,1c0095f0 <strlen>
1c005bce:	84aa                	mv	s1,a0
1c005bd0:	01092503          	lw	a0,16(s2)
1c005bd4:	99a6                	add	s3,s3,s1
1c005bd6:	09ad                	addi	s3,s3,11
1c005bd8:	219030ef          	jal	ra,1c0095f0 <strlen>
1c005bdc:	99aa                	add	s3,s3,a0
  uint8_t *setup_command = pmsis_l2_malloc(setup_size);
1c005bde:	854e                	mv	a0,s3
1c005be0:	571000ef          	jal	ra,1c006950 <pi_l2_malloc>
1c005be4:	8aaa                	mv	s5,a0
  if (setup_command == NULL)
1c005be6:	c935                	beqz	a0,1c005c5a <__nina_w10_open+0x16c>
  req->type = NINA_W10_CMD_SETUP;
1c005be8:	08000793          	li	a5,128
1c005bec:	84aa                	mv	s1,a0
  current += __nina_w10_append_string(current, conf->ssid);
1c005bee:	00c92583          	lw	a1,12(s2)
  req->type = NINA_W10_CMD_SETUP;
1c005bf2:	00f4a42b          	p.sw	a5,8(s1!)
  current += __nina_w10_append_string(current, conf->ssid);
1c005bf6:	8526                	mv	a0,s1
  nina->pending_task = task;
1c005bf8:	0b742023          	sw	s7,160(s0)
  current += __nina_w10_append_string(current, conf->ssid);
1c005bfc:	cbdff0ef          	jal	ra,1c0058b8 <__nina_w10_append_string>
  current += __nina_w10_append_string(current, conf->passwd);
1c005c00:	01092583          	lw	a1,16(s2)
  current += __nina_w10_append_string(current, conf->ssid);
1c005c04:	94aa                	add	s1,s1,a0
  current += __nina_w10_append_string(current, conf->passwd);
1c005c06:	8526                	mv	a0,s1
1c005c08:	cb1ff0ef          	jal	ra,1c0058b8 <__nina_w10_append_string>
  current += __nina_w10_append_string(current, conf->ip_addr);
1c005c0c:	01492583          	lw	a1,20(s2)
  current += __nina_w10_append_string(current, conf->passwd);
1c005c10:	94aa                	add	s1,s1,a0
  current += __nina_w10_append_string(current, conf->ip_addr);
1c005c12:	8526                	mv	a0,s1
1c005c14:	ca5ff0ef          	jal	ra,1c0058b8 <__nina_w10_append_string>
  current += __nina_w10_append_uint32(current, conf->port);
1c005c18:	01892783          	lw	a5,24(s2)
  *(uint32_t *)buffer = value;
1c005c1c:	9526                	add	a0,a0,s1
  __nina_w10_send_command(nina, setup_command, size, pi_task_callback(&nina->task, __nina_w10_setup_resume, (void *)nina));
1c005c1e:	01840693          	addi	a3,s0,24
  *(uint32_t *)buffer = value;
1c005c22:	00f5222b          	p.sw	a5,4(a0!)
  int size = ((current - setup_command) + 3) & ~3;
1c005c26:	41550533          	sub	a0,a0,s5
  task->arg[0] = (uint32_t)callback;
1c005c2a:	1c0067b7          	lui	a5,0x1c006
1c005c2e:	00350613          	addi	a2,a0,3
1c005c32:	94a78793          	addi	a5,a5,-1718 # 1c00594a <__nina_w10_setup_resume>
  nina->setup_size = setup_size;
1c005c36:	0b342623          	sw	s3,172(s0)
  nina->setup_command = setup_command;
1c005c3a:	0b542823          	sw	s5,176(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c005c3e:	02042823          	sw	zero,48(s0)
  task->arg[0] = (uint32_t)callback;
1c005c42:	cc5c                	sw	a5,28(s0)
  task->arg[1] = (uint32_t)arg;
1c005c44:	d000                	sw	s0,32(s0)
  task->implem.keep = 1;
1c005c46:	05642023          	sw	s6,64(s0)
1c005c4a:	02040623          	sb	zero,44(s0)
  __nina_w10_send_command(nina, setup_command, size, pi_task_callback(&nina->task, __nina_w10_setup_resume, (void *)nina));
1c005c4e:	c2063633          	p.bclr	a2,a2,1,0
1c005c52:	85d6                	mv	a1,s5
1c005c54:	8522                	mv	a0,s0
1c005c56:	d1fff0ef          	jal	ra,1c005974 <__nina_w10_send_command>
  while(!task->done)
1c005c5a:	04410783          	lb	a5,68(sp)
1c005c5e:	cf89                	beqz	a5,1c005c78 <__nina_w10_open+0x18a>
}
1c005c60:	40fe                	lw	ra,220(sp)
1c005c62:	446e                	lw	s0,216(sp)
1c005c64:	8552                	mv	a0,s4
1c005c66:	44de                	lw	s1,212(sp)
1c005c68:	494e                	lw	s2,208(sp)
1c005c6a:	49be                	lw	s3,204(sp)
1c005c6c:	4a2e                	lw	s4,200(sp)
1c005c6e:	4a9e                	lw	s5,196(sp)
1c005c70:	4b0e                	lw	s6,192(sp)
1c005c72:	5bfa                	lw	s7,188(sp)
1c005c74:	612d                	addi	sp,sp,224
1c005c76:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005c78:	300474f3          	csrrci	s1,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005c7c:	4585                	li	a1,1
1c005c7e:	01c00513          	li	a0,28
1c005c82:	153000ef          	jal	ra,1c0065d4 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005c86:	30049073          	csrw	mstatus,s1
1c005c8a:	bfc1                	j	1c005c5a <__nina_w10_open+0x16c>
  pmsis_l2_malloc_free(nina, sizeof(nina_t));
1c005c8c:	0c000593          	li	a1,192
1c005c90:	8522                	mv	a0,s0
1c005c92:	4cd000ef          	jal	ra,1c00695e <pi_l2_free>
  if (nina == NULL) return -1;
1c005c96:	5a7d                	li	s4,-1
1c005c98:	b7e1                	j	1c005c60 <__nina_w10_open+0x172>

1c005c9a <__nina_w10_send_packet_end>:
{
1c005c9a:	1141                	addi	sp,sp,-16
1c005c9c:	c606                	sw	ra,12(sp)
1c005c9e:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005ca0:	30047473          	csrrci	s0,mstatus,8
  pi_task_push(nina->pending_task);
1c005ca4:	0a052783          	lw	a5,160(a0)
1c005ca8:	30047673          	csrrci	a2,mstatus,8
  if (sched->first) {
1c005cac:	01c02583          	lw	a1,28(zero) # 1c <_l1_preload_size>
  event->next = NULL;
1c005cb0:	0007a023          	sw	zero,0(a5)
1c005cb4:	01c00693          	li	a3,28
  if (sched->first) {
1c005cb8:	c5ad                	beqz	a1,1c005d22 <__nina_w10_send_packet_end+0x88>
    sched->last->next = event;
1c005cba:	42d8                	lw	a4,4(a3)
1c005cbc:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c005cbe:	c2dc                	sw	a5,4(a3)
  __builtin_pulp_spr_write(reg, val);
1c005cc0:	30061073          	csrw	mstatus,a2
  if (nina->pending_first)
1c005cc4:	0a452783          	lw	a5,164(a0)
  nina->pending_task = NULL;
1c005cc8:	0a052023          	sw	zero,160(a0)
  if (nina->pending_first)
1c005ccc:	c7a9                	beqz	a5,1c005d16 <__nina_w10_send_packet_end+0x7c>
    nina->pending_first = task->implem.next;
1c005cce:	4fd8                	lw	a4,28(a5)
  req->type = NINA_W10_CMD_SEND_PACKET;
1c005cd0:	08100613          	li	a2,129
  __nina_w10_send_command(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), pi_task_callback(&nina->task, __nina_w10_send_packet_resume, nina));
1c005cd4:	0b450593          	addi	a1,a0,180
    nina->pending_first = task->implem.next;
1c005cd8:	0ae52223          	sw	a4,164(a0)
    __nina_w10_send_packet(nina, (uint8_t *)task->implem.data[0], task->implem.data[1], task);
1c005cdc:	5f94                	lw	a3,56(a5)
1c005cde:	5fd8                	lw	a4,60(a5)
  nina->pending_task = task;
1c005ce0:	0af52023          	sw	a5,160(a0)
  task->arg[0] = (uint32_t)callback;
1c005ce4:	1c0067b7          	lui	a5,0x1c006
1c005ce8:	a6678793          	addi	a5,a5,-1434 # 1c005a66 <__nina_w10_send_packet_resume>
1c005cec:	cd5c                	sw	a5,28(a0)
  task->implem.keep = 1;
1c005cee:	4785                	li	a5,1
  req->type = NINA_W10_CMD_SEND_PACKET;
1c005cf0:	0ac52a23          	sw	a2,180(a0)
  nina->pending_packet = packet;
1c005cf4:	08d52e23          	sw	a3,156(a0)
  req->size = size;
1c005cf8:	0ae52c23          	sw	a4,184(a0)
  nina->pending_size = size;
1c005cfc:	08e52c23          	sw	a4,152(a0)
  task->id = PI_TASK_CALLBACK_ID;
1c005d00:	02052823          	sw	zero,48(a0)
  task->arg[1] = (uint32_t)arg;
1c005d04:	d108                	sw	a0,32(a0)
  task->implem.keep = 1;
1c005d06:	c13c                	sw	a5,64(a0)
  task->done = 0;
1c005d08:	02050623          	sb	zero,44(a0)
  __nina_w10_send_command(nina, (uint8_t *)&nina->req, sizeof(nina_req_t), pi_task_callback(&nina->task, __nina_w10_send_packet_resume, nina));
1c005d0c:	01850693          	addi	a3,a0,24
1c005d10:	4621                	li	a2,8
1c005d12:	c63ff0ef          	jal	ra,1c005974 <__nina_w10_send_command>
1c005d16:	30041073          	csrw	mstatus,s0
}
1c005d1a:	40b2                	lw	ra,12(sp)
1c005d1c:	4422                	lw	s0,8(sp)
1c005d1e:	0141                	addi	sp,sp,16
1c005d20:	8082                	ret
    sched->first = event;
1c005d22:	00f02e23          	sw	a5,28(zero) # 1c <_l1_preload_size>
1c005d26:	bf61                	j	1c005cbe <__nina_w10_send_packet_end+0x24>

1c005d28 <pi_nina_w10_conf_init>:
};


void pi_nina_w10_conf_init(struct pi_nina_w10_conf *conf)
{
  conf->transport.api = &nina_w10_api;
1c005d28:	1c00b7b7          	lui	a5,0x1c00b
1c005d2c:	44478793          	addi	a5,a5,1092 # 1c00b444 <nina_w10_api>
1c005d30:	c11c                	sw	a5,0(a0)
  bsp_nina_w10_conf_init(conf);
1c005d32:	a8bd                	j	1c005db0 <bsp_nina_w10_conf_init>

1c005d34 <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c005d34:	01f01013          	slli	zero,zero,0x1f
1c005d38:	00100073          	ebreak
1c005d3c:	40705013          	srai	zero,zero,0x7
1c005d40:	8082                	ret

1c005d42 <semihost_write0>:
1c005d42:	85aa                	mv	a1,a0
1c005d44:	4511                	li	a0,4
1c005d46:	b7fd                	j	1c005d34 <__internal_semihost>

1c005d48 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c005d48:	85aa                	mv	a1,a0
1c005d4a:	4561                	li	a0,24
1c005d4c:	b7e5                	j	1c005d34 <__internal_semihost>

1c005d4e <__bsp_init_pads>:
  conf->ram_start = CONFIG_SPIRAM_START;
  conf->ram_size = CONFIG_SPIRAM_SIZE;
  conf->skip_pads_config = 0;
  conf->spi_itf = CONFIG_SPIRAM_SPI_ITF;
  conf->spi_cs = CONFIG_SPIRAM_SPI_CS;
}
1c005d4e:	1c00c7b7          	lui	a5,0x1c00c
1c005d52:	36078793          	addi	a5,a5,864 # 1c00c360 <__bsp_init_pads_done>
1c005d56:	4398                	lw	a4,0(a5)
1c005d58:	eb05                	bnez	a4,1c005d88 <__bsp_init_pads+0x3a>
1c005d5a:	1101                	addi	sp,sp,-32
1c005d5c:	ce06                	sw	ra,28(sp)
1c005d5e:	4705                	li	a4,1
1c005d60:	c398                	sw	a4,0(a5)
1c005d62:	000557b7          	lui	a5,0x55
1c005d66:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c005d6a:	c03e                	sw	a5,0(sp)
1c005d6c:	0f0007b7          	lui	a5,0xf000
1c005d70:	c23e                	sw	a5,4(sp)
1c005d72:	004007b7          	lui	a5,0x400
1c005d76:	17fd                	addi	a5,a5,-1
1c005d78:	850a                	mv	a0,sp
1c005d7a:	c43e                	sw	a5,8(sp)
1c005d7c:	c602                	sw	zero,12(sp)
1c005d7e:	347010ef          	jal	ra,1c0078c4 <pi_pad_init>
1c005d82:	40f2                	lw	ra,28(sp)
1c005d84:	6105                	addi	sp,sp,32
1c005d86:	8082                	ret
1c005d88:	8082                	ret

1c005d8a <bsp_himax_conf_init>:
  return 0;
}


void bsp_himax_conf_init(struct pi_himax_conf *conf)
{
1c005d8a:	1101                	addi	sp,sp,-32
1c005d8c:	ce06                	sw	ra,28(sp)
  __bsp_init_pads();
1c005d8e:	c62a                	sw	a0,12(sp)
1c005d90:	3f7d                	jal	1c005d4e <__bsp_init_pads>
  conf->i2c_itf = CONFIG_HIMAX_I2C_ITF;
1c005d92:	4532                	lw	a0,12(sp)
  conf->cpi_itf = CONFIG_HIMAX_CPI_ITF;
}
1c005d94:	40f2                	lw	ra,28(sp)
  conf->i2c_itf = CONFIG_HIMAX_I2C_ITF;
1c005d96:	00052623          	sw	zero,12(a0)
  conf->cpi_itf = CONFIG_HIMAX_CPI_ITF;
1c005d9a:	00052423          	sw	zero,8(a0)
}
1c005d9e:	6105                	addi	sp,sp,32
1c005da0:	8082                	ret

1c005da2 <bsp_himax_open>:

int bsp_himax_open(struct pi_himax_conf *conf)
{
1c005da2:	1141                	addi	sp,sp,-16
1c005da4:	c606                	sw	ra,12(sp)
  __bsp_init_pads();
1c005da6:	3765                	jal	1c005d4e <__bsp_init_pads>
  return 0;
}
1c005da8:	40b2                	lw	ra,12(sp)
1c005daa:	4501                	li	a0,0
1c005dac:	0141                	addi	sp,sp,16
1c005dae:	8082                	ret

1c005db0 <bsp_nina_w10_conf_init>:



void bsp_nina_w10_conf_init(struct pi_nina_w10_conf *conf)
{
  conf->spi_itf = CONFIG_NINA_W10_SPI_ITF;
1c005db0:	4785                	li	a5,1
1c005db2:	c15c                	sw	a5,4(a0)
  conf->spi_cs = CONFIG_NINA_W10_SPI_CS;
1c005db4:	00052423          	sw	zero,8(a0)
}
1c005db8:	8082                	ret

1c005dba <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005dba:	002047b7          	lui	a5,0x204
1c005dbe:	00070737          	lui	a4,0x70
1c005dc2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005dc6:	0ff00713          	li	a4,255
1c005dca:	002046b7          	lui	a3,0x204
1c005dce:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005dd2:	20078793          	addi	a5,a5,512
1c005dd6:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005dda:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c005dde:	8082                	ret

1c005de0 <__rt_init>:
{
1c005de0:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c005de2:	1a104737          	lui	a4,0x1a104
1c005de6:	ce06                	sw	ra,28(sp)
1c005de8:	cc22                	sw	s0,24(sp)
1c005dea:	ca26                	sw	s1,20(sp)
1c005dec:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa104050>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c005df0:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c005df4:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c005df8:	2361                	jal	1c006380 <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c005dfa:	1b0007b7          	lui	a5,0x1b000
1c005dfe:	3e878793          	addi	a5,a5,1000 # 1b0003e8 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c005e02:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c005e06:	7d179073          	csrw	0x7d1,a5
1c005e0a:	1c00b737          	lui	a4,0x1c00b
1c005e0e:	56072703          	lw	a4,1376(a4) # 1c00b560 <__rt_fc_stack_size>
1c005e12:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c005e14:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c005e18:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c005e1c:	2ad5                	jal	1c006010 <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c005e1e:	54fd                	li	s1,-1
1c005e20:	1a1067b7          	lui	a5,0x1a106
1c005e24:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fe4>
1c005e28:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c005e2c:	1c0025b7          	lui	a1,0x1c002
1c005e30:	17258593          	addi	a1,a1,370 # 1c002172 <__rt_fc_socevents_handler>
1c005e34:	456d                	li	a0,27
1c005e36:	2a35                	jal	1c005f72 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c005e38:	080007b7          	lui	a5,0x8000
1c005e3c:	00204737          	lui	a4,0x204
1c005e40:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005e44:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c005e48:	358010ef          	jal	ra,1c0071a0 <__rt_pmu_init>
  __rt_freq_init();
1c005e4c:	7a3000ef          	jal	ra,1c006dee <__rt_freq_init>
1c005e50:	002017b7          	lui	a5,0x201
1c005e54:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c005e58:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c005e5a:	01402473          	csrr	s0,uhartid
1c005e5e:	1c00b4b7          	lui	s1,0x1c00b
  return (hart_id >> 5) & 0x3f;
1c005e62:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c005e64:	24e5                	jal	1c00614c <__rt_utils_init>
1c005e66:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c005e6a:	1ed000ef          	jal	ra,1c006856 <__rt_allocs_init>
1c005e6e:	9ec48493          	addi	s1,s1,-1556 # 1c00a9ec <ctor_list+0x4>
  __rt_event_sched_init();
1c005e72:	009000ef          	jal	ra,1c00667a <__rt_event_sched_init>
  __rt_padframe_init();
1c005e76:	1ea030ef          	jal	ra,1c009060 <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c005e7a:	0044a78b          	p.lw	a5,4(s1!)
1c005e7e:	ebad                	bnez	a5,1c005ef0 <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c005e80:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c005e84:	4501                	li	a0,0
1c005e86:	2c59                	jal	1c00611c <__rt_cbsys_exec>
1c005e88:	e539                	bnez	a0,1c005ed6 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c005e8a:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c005e8e:	8795                	srai	a5,a5,0x5
1c005e90:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c005e94:	02000713          	li	a4,32
1c005e98:	0ae78263          	beq	a5,a4,1c005f3c <__rt_init+0x15c>
    rt_cluster_mount(1, cid, 0, NULL);
1c005e9c:	4681                	li	a3,0
1c005e9e:	4601                	li	a2,0
1c005ea0:	4581                	li	a1,0
1c005ea2:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c005ea4:	cba1                	beqz	a5,1c005ef4 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c005ea6:	04b010ef          	jal	ra,1c0076f0 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c005eaa:	6591                	lui	a1,0x4
1c005eac:	4509                	li	a0,2
1c005eae:	097000ef          	jal	ra,1c006744 <rt_alloc>
1c005eb2:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c005eb4:	c10d                	beqz	a0,1c005ed6 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c005eb6:	6805                	lui	a6,0x1
1c005eb8:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c005ebc:	1c006637          	lui	a2,0x1c006
1c005ec0:	c002                	sw	zero,0(sp)
1c005ec2:	48a1                	li	a7,8
1c005ec4:	87c2                	mv	a5,a6
1c005ec6:	4681                	li	a3,0
1c005ec8:	dba60613          	addi	a2,a2,-582 # 1c005dba <cluster_start>
1c005ecc:	4581                	li	a1,0
1c005ece:	4501                	li	a0,0
1c005ed0:	790010ef          	jal	ra,1c007660 <rt_cluster_call>
1c005ed4:	c525                	beqz	a0,1c005f3c <__rt_init+0x15c>
  rt_fatal("There was an error during runtime initialization\n");
1c005ed6:	1c00b537          	lui	a0,0x1c00b
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c005eda:	01402673          	csrr	a2,uhartid
1c005ede:	85a2                	mv	a1,s0
1c005ee0:	f4563633          	p.bclr	a2,a2,26,5
1c005ee4:	10050513          	addi	a0,a0,256 # 1c00b100 <__himax_reg_init+0x11c>
1c005ee8:	225030ef          	jal	ra,1c00990c <printf>
1c005eec:	1a5030ef          	jal	ra,1c009890 <abort>
    (**fpp)();
1c005ef0:	9782                	jalr	a5
1c005ef2:	b761                	j	1c005e7a <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c005ef4:	7fc010ef          	jal	ra,1c0076f0 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c005ef8:	6591                	lui	a1,0x4
1c005efa:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c005efe:	4509                	li	a0,2
1c005f00:	045000ef          	jal	ra,1c006744 <rt_alloc>
    if (stacks == NULL) return -1;
1c005f04:	d969                	beqz	a0,1c005ed6 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005f06:	00204737          	lui	a4,0x204
1c005f0a:	0ff00793          	li	a5,255
1c005f0e:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c005f12:	1c00b7b7          	lui	a5,0x1c00b
1c005f16:	93078793          	addi	a5,a5,-1744 # 1c00a930 <__rt_set_slave_stack>
1c005f1a:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005f1e:	08f72023          	sw	a5,128(a4)
1c005f22:	6785                	lui	a5,0x1
1c005f24:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c005f28:	08f72023          	sw	a5,128(a4)
1c005f2c:	08a72023          	sw	a0,128(a4)
}
1c005f30:	4462                	lw	s0,24(sp)
1c005f32:	40f2                	lw	ra,28(sp)
1c005f34:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c005f36:	4501                	li	a0,0
}
1c005f38:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c005f3a:	b541                	j	1c005dba <cluster_start>
}
1c005f3c:	40f2                	lw	ra,28(sp)
1c005f3e:	4462                	lw	s0,24(sp)
1c005f40:	44d2                	lw	s1,20(sp)
1c005f42:	6105                	addi	sp,sp,32
1c005f44:	8082                	ret

1c005f46 <__rt_deinit>:
{
1c005f46:	1141                	addi	sp,sp,-16
1c005f48:	c606                	sw	ra,12(sp)
1c005f4a:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c005f4c:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c005f50:	4505                	li	a0,1
1c005f52:	1c00b437          	lui	s0,0x1c00b
1c005f56:	22d9                	jal	1c00611c <__rt_cbsys_exec>
1c005f58:	a3840413          	addi	s0,s0,-1480 # 1c00aa38 <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c005f5c:	0044278b          	p.lw	a5,4(s0!)
1c005f60:	e789                	bnez	a5,1c005f6a <__rt_deinit+0x24>
}
1c005f62:	40b2                	lw	ra,12(sp)
1c005f64:	4422                	lw	s0,8(sp)
1c005f66:	0141                	addi	sp,sp,16
1c005f68:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c005f6a:	9782                	jalr	a5
1c005f6c:	bfc5                	j	1c005f5c <__rt_deinit+0x16>

1c005f6e <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c005f6e:	c14c                	sw	a1,4(a0)
}
1c005f70:	8082                	ret

1c005f72 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c005f72:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c005f76:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c005f7a:	ca5797b3          	p.extractu	a5,a5,5,5
1c005f7e:	02e79c63          	bne	a5,a4,1c005fb6 <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c005f82:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c005f86:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c005f88:	8d89                	sub	a1,a1,a0
1c005f8a:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c005f8c:	c14586b3          	p.extract	a3,a1,0,20
1c005f90:	06f00793          	li	a5,111
1c005f94:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c005f98:	d21586b3          	p.extract	a3,a1,9,1
1c005f9c:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c005fa0:	c0b586b3          	p.extract	a3,a1,0,11
1c005fa4:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c005fa8:	cec585b3          	p.extract	a1,a1,7,12
1c005fac:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c005fb0:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c005fb4:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c005fb6:	002007b7          	lui	a5,0x200
1c005fba:	43b8                	lw	a4,64(a5)
1c005fbc:	b7e9                	j	1c005f86 <rt_irq_set_handler+0x14>

1c005fbe <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c005fbe:	8082                	ret

1c005fc0 <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c005fc0:	1b0017b7          	lui	a5,0x1b001

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c005fc4:	bec7a703          	lw	a4,-1044(a5) # 1b000bec <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c005fc8:	1141                	addi	sp,sp,-16
1c005fca:	c422                	sw	s0,8(sp)
1c005fcc:	c606                	sw	ra,12(sp)
1c005fce:	fc173733          	p.bclr	a4,a4,30,1
1c005fd2:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c005fd4:	c315                	beqz	a4,1c005ff8 <__rt_handle_illegal_instr+0x38>
1c005fd6:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c005fda:	01402673          	csrr	a2,uhartid
1c005fde:	1c00b537          	lui	a0,0x1c00b
1c005fe2:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c005fe4:	40565593          	srai	a1,a2,0x5
1c005fe8:	f265b5b3          	p.bclr	a1,a1,25,6
1c005fec:	f4563633          	p.bclr	a2,a2,26,5
1c005ff0:	15850513          	addi	a0,a0,344 # 1c00b158 <__himax_reg_init+0x174>
1c005ff4:	119030ef          	jal	ra,1c00990c <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c005ff8:	bec42783          	lw	a5,-1044(s0)
1c005ffc:	c01797b3          	p.extractu	a5,a5,0,1
1c006000:	c399                	beqz	a5,1c006006 <__rt_handle_illegal_instr+0x46>
1c006002:	08f030ef          	jal	ra,1c009890 <abort>
  illegal_insn_handler_c();
#endif
}
1c006006:	4422                	lw	s0,8(sp)
1c006008:	40b2                	lw	ra,12(sp)
1c00600a:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c00600c:	fb3ff06f          	j	1c005fbe <illegal_insn_handler_c>

1c006010 <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c006010:	57fd                	li	a5,-1
1c006012:	00204737          	lui	a4,0x204
1c006016:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c00601a:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00601e:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c006022:	ca5797b3          	p.extractu	a5,a5,5,5
1c006026:	00e79763          	bne	a5,a4,1c006034 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00602a:	57fd                	li	a5,-1
1c00602c:	00204737          	lui	a4,0x204
1c006030:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c006034:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c006038:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00603c:	ca5797b3          	p.extractu	a5,a5,5,5
1c006040:	00e79963          	bne	a5,a4,1c006052 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c006044:	1c0007b7          	lui	a5,0x1c000
1c006048:	00078793          	mv	a5,a5
1c00604c:	30579073          	csrw	mtvec,a5
1c006050:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c006052:	1c0007b7          	lui	a5,0x1c000
1c006056:	00200737          	lui	a4,0x200
1c00605a:	00078793          	mv	a5,a5
1c00605e:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c006060:	8082                	ret

1c006062 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c006062:	300476f3          	csrrci	a3,mstatus,8
1c006066:	08a54703          	lbu	a4,138(a0)
1c00606a:	411c                	lw	a5,0(a0)
1c00606c:	c321                	beqz	a4,1c0060ac <__rt_fc_cluster_lock_req+0x4a>
1c00606e:	4398                	lw	a4,0(a5)
1c006070:	cf09                	beqz	a4,1c00608a <__rt_fc_cluster_lock_req+0x28>
1c006072:	43d8                	lw	a4,4(a5)
1c006074:	cb09                	beqz	a4,1c006086 <__rt_fc_cluster_lock_req+0x24>
1c006076:	4798                	lw	a4,8(a5)
1c006078:	c348                	sw	a0,4(a4)
1c00607a:	c788                	sw	a0,8(a5)
1c00607c:	00052223          	sw	zero,4(a0)
1c006080:	30069073          	csrw	mstatus,a3
1c006084:	8082                	ret
1c006086:	c3c8                	sw	a0,4(a5)
1c006088:	bfcd                	j	1c00607a <__rt_fc_cluster_lock_req+0x18>
1c00608a:	4705                	li	a4,1
1c00608c:	08e50423          	sb	a4,136(a0)
1c006090:	4705                	li	a4,1
1c006092:	c398                	sw	a4,0(a5)
1c006094:	08954783          	lbu	a5,137(a0)
1c006098:	00201737          	lui	a4,0x201
1c00609c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0060a0:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c0060a4:	07da                	slli	a5,a5,0x16
1c0060a6:	0007e723          	p.sw	zero,a4(a5)
1c0060aa:	bfd9                	j	1c006080 <__rt_fc_cluster_lock_req+0x1e>
1c0060ac:	43d8                	lw	a4,4(a5)
1c0060ae:	e719                	bnez	a4,1c0060bc <__rt_fc_cluster_lock_req+0x5a>
1c0060b0:	0007a023          	sw	zero,0(a5)
1c0060b4:	4785                	li	a5,1
1c0060b6:	08f50423          	sb	a5,136(a0)
1c0060ba:	bfe9                	j	1c006094 <__rt_fc_cluster_lock_req+0x32>
1c0060bc:	4350                	lw	a2,4(a4)
1c0060be:	c3d0                	sw	a2,4(a5)
1c0060c0:	4785                	li	a5,1
1c0060c2:	08f70423          	sb	a5,136(a4)
1c0060c6:	08974783          	lbu	a5,137(a4)
1c0060ca:	00201737          	lui	a4,0x201
1c0060ce:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0060d2:	04078793          	addi	a5,a5,64
1c0060d6:	07da                	slli	a5,a5,0x16
1c0060d8:	0007e723          	p.sw	zero,a4(a5)
1c0060dc:	bfe1                	j	1c0060b4 <__rt_fc_cluster_lock_req+0x52>

1c0060de <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c0060de:	1101                	addi	sp,sp,-32
1c0060e0:	cc22                	sw	s0,24(sp)
1c0060e2:	ca26                	sw	s1,20(sp)
1c0060e4:	842a                	mv	s0,a0
1c0060e6:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0060e8:	4501                	li	a0,0
1c0060ea:	45b1                	li	a1,12
1c0060ec:	c632                	sw	a2,12(sp)
{
1c0060ee:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0060f0:	2d91                	jal	1c006744 <rt_alloc>
  if (cbsys == NULL) return -1;
1c0060f2:	4632                	lw	a2,12(sp)
1c0060f4:	c115                	beqz	a0,1c006118 <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c0060f6:	1b0017b7          	lui	a5,0x1b001
1c0060fa:	040a                	slli	s0,s0,0x2
1c0060fc:	bf078793          	addi	a5,a5,-1040 # 1b000bf0 <cbsys_first>
1c006100:	97a2                	add	a5,a5,s0
1c006102:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c006104:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c006106:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c006108:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c00610a:	c388                	sw	a0,0(a5)

  return 0;
1c00610c:	4501                	li	a0,0
}
1c00610e:	40f2                	lw	ra,28(sp)
1c006110:	4462                	lw	s0,24(sp)
1c006112:	44d2                	lw	s1,20(sp)
1c006114:	6105                	addi	sp,sp,32
1c006116:	8082                	ret
  if (cbsys == NULL) return -1;
1c006118:	557d                	li	a0,-1
1c00611a:	bfd5                	j	1c00610e <__rt_cbsys_add+0x30>

1c00611c <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c00611c:	1141                	addi	sp,sp,-16
1c00611e:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c006120:	1b001437          	lui	s0,0x1b001
1c006124:	050a                	slli	a0,a0,0x2
1c006126:	bf040413          	addi	s0,s0,-1040 # 1b000bf0 <cbsys_first>
1c00612a:	20a47403          	p.lw	s0,a0(s0)
{
1c00612e:	c606                	sw	ra,12(sp)
  while (cbsys)
1c006130:	e411                	bnez	s0,1c00613c <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c006132:	4501                	li	a0,0
}
1c006134:	40b2                	lw	ra,12(sp)
1c006136:	4422                	lw	s0,8(sp)
1c006138:	0141                	addi	sp,sp,16
1c00613a:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c00613c:	401c                	lw	a5,0(s0)
1c00613e:	4048                	lw	a0,4(s0)
1c006140:	9782                	jalr	a5
1c006142:	e119                	bnez	a0,1c006148 <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c006144:	4400                	lw	s0,8(s0)
1c006146:	b7ed                	j	1c006130 <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c006148:	557d                	li	a0,-1
1c00614a:	b7ed                	j	1c006134 <__rt_cbsys_exec+0x18>

1c00614c <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c00614c:	1b0017b7          	lui	a5,0x1b001
1c006150:	bf078793          	addi	a5,a5,-1040 # 1b000bf0 <cbsys_first>
1c006154:	0007a023          	sw	zero,0(a5)
1c006158:	0007a223          	sw	zero,4(a5)
1c00615c:	0007a423          	sw	zero,8(a5)
1c006160:	0007a623          	sw	zero,12(a5)
1c006164:	0007a823          	sw	zero,16(a5)
1c006168:	0007aa23          	sw	zero,20(a5)
  }
}
1c00616c:	8082                	ret

1c00616e <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c00616e:	1141                	addi	sp,sp,-16
1c006170:	c422                	sw	s0,8(sp)
1c006172:	842a                	mv	s0,a0
1c006174:	c606                	sw	ra,12(sp)
1c006176:	c226                	sw	s1,4(sp)
1c006178:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00617a:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c00617e:	401c                	lw	a5,0(s0)
1c006180:	eb99                	bnez	a5,1c006196 <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c006182:	4785                	li	a5,1
1c006184:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c006186:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c00618a:	40b2                	lw	ra,12(sp)
1c00618c:	4422                	lw	s0,8(sp)
1c00618e:	4492                	lw	s1,4(sp)
1c006190:	4902                	lw	s2,0(sp)
1c006192:	0141                	addi	sp,sp,16
1c006194:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c006196:	4585                	li	a1,1
1c006198:	01c00513          	li	a0,28
1c00619c:	2925                	jal	1c0065d4 <__rt_event_execute>
1c00619e:	b7c5                	j	1c00617e <__rt_fc_lock+0x10>

1c0061a0 <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0061a0:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c0061a4:	415c                	lw	a5,4(a0)
1c0061a6:	e791                	bnez	a5,1c0061b2 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c0061a8:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c0061ac:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c0061b0:	8082                	ret
    lock->waiting = req->next;
1c0061b2:	43d8                	lw	a4,4(a5)
1c0061b4:	c158                	sw	a4,4(a0)
    req->done = 1;
1c0061b6:	4705                	li	a4,1
1c0061b8:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c0061bc:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c0061c0:	00201737          	lui	a4,0x201
1c0061c4:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c0061c8:	04078793          	addi	a5,a5,64
1c0061cc:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c0061ce:	0007e723          	p.sw	zero,a4(a5)
1c0061d2:	bfe9                	j	1c0061ac <__rt_fc_unlock+0xc>

1c0061d4 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0061d4:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0061d8:	8795                	srai	a5,a5,0x5
1c0061da:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c0061de:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c0061e2:	4785                	li	a5,1
1c0061e4:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c0061e8:	1c0067b7          	lui	a5,0x1c006
1c0061ec:	06278793          	addi	a5,a5,98 # 1c006062 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c0061f0:	c188                	sw	a0,0(a1)
  req->done = 0;
1c0061f2:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c0061f6:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c0061fa:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c0061fe:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c006200:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c006202:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c006204:	c005c533          	p.bset	a0,a1,0,0
1c006208:	3700106f          	j	1c007578 <__rt_cluster_push_fc_event>

1c00620c <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00620c:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c006210:	8795                	srai	a5,a5,0x5
1c006212:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c006216:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c00621a:	1c0067b7          	lui	a5,0x1c006
1c00621e:	06278793          	addi	a5,a5,98 # 1c006062 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c006222:	c188                	sw	a0,0(a1)
  req->done = 0;
1c006224:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c006228:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c00622c:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c006230:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c006234:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c006236:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c006238:	05a1                	addi	a1,a1,8
1c00623a:	c005c533          	p.bset	a0,a1,0,0
1c00623e:	33a0106f          	j	1c007578 <__rt_cluster_push_fc_event>

1c006242 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c006242:	01c02683          	lw	a3,28(zero) # 1c <_l1_preload_size>
1c006246:	00052023          	sw	zero,0(a0)
1c00624a:	01c00713          	li	a4,28
1c00624e:	c689                	beqz	a3,1c006258 <__rt_event_enqueue+0x16>
1c006250:	435c                	lw	a5,4(a4)
1c006252:	c388                	sw	a0,0(a5)
1c006254:	c348                	sw	a0,4(a4)
1c006256:	8082                	ret
1c006258:	00a02e23          	sw	a0,28(zero) # 1c <_l1_preload_size>
1c00625c:	bfe5                	j	1c006254 <__rt_event_enqueue+0x12>

1c00625e <__rt_bridge_check_bridge_req.part.5>:
1c00625e:	1c00b737          	lui	a4,0x1c00b
1c006262:	4a070793          	addi	a5,a4,1184 # 1c00b4a0 <__hal_debug_struct>
1c006266:	0a47a783          	lw	a5,164(a5)
1c00626a:	4a070713          	addi	a4,a4,1184
1c00626e:	c789                	beqz	a5,1c006278 <__rt_bridge_check_bridge_req.part.5+0x1a>
1c006270:	4f94                	lw	a3,24(a5)
1c006272:	e681                	bnez	a3,1c00627a <__rt_bridge_check_bridge_req.part.5+0x1c>
1c006274:	0af72623          	sw	a5,172(a4)
1c006278:	8082                	ret
1c00627a:	479c                	lw	a5,8(a5)
1c00627c:	bfcd                	j	1c00626e <__rt_bridge_check_bridge_req.part.5+0x10>

1c00627e <__rt_bridge_wait>:
1c00627e:	014027f3          	csrr	a5,uhartid
1c006282:	02000713          	li	a4,32
1c006286:	ca5797b3          	p.extractu	a5,a5,5,5
1c00628a:	02e79c63          	bne	a5,a4,1c0062c2 <__rt_bridge_wait+0x44>
1c00628e:	1141                	addi	sp,sp,-16
1c006290:	c422                	sw	s0,8(sp)
1c006292:	1a106437          	lui	s0,0x1a106
1c006296:	c606                	sw	ra,12(sp)
1c006298:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fe4>
1c00629c:	c187b7b3          	p.bclr	a5,a5,0,24
1c0062a0:	00f42223          	sw	a5,4(s0)
1c0062a4:	4585                	li	a1,1
1c0062a6:	03800513          	li	a0,56
1c0062aa:	247000ef          	jal	ra,1c006cf0 <__rt_periph_wait_event>
1c0062ae:	00442783          	lw	a5,4(s0)
1c0062b2:	c187c7b3          	p.bset	a5,a5,0,24
1c0062b6:	00f42223          	sw	a5,4(s0)
1c0062ba:	40b2                	lw	ra,12(sp)
1c0062bc:	4422                	lw	s0,8(sp)
1c0062be:	0141                	addi	sp,sp,16
1c0062c0:	8082                	ret
1c0062c2:	8082                	ret

1c0062c4 <__rt_bridge_handle_notif>:
1c0062c4:	1141                	addi	sp,sp,-16
1c0062c6:	c422                	sw	s0,8(sp)
1c0062c8:	1c00b437          	lui	s0,0x1c00b
1c0062cc:	4a040793          	addi	a5,s0,1184 # 1c00b4a0 <__hal_debug_struct>
1c0062d0:	0a47a783          	lw	a5,164(a5)
1c0062d4:	c606                	sw	ra,12(sp)
1c0062d6:	c226                	sw	s1,4(sp)
1c0062d8:	c04a                	sw	s2,0(sp)
1c0062da:	4a040413          	addi	s0,s0,1184
1c0062de:	c399                	beqz	a5,1c0062e4 <__rt_bridge_handle_notif+0x20>
1c0062e0:	4bd8                	lw	a4,20(a5)
1c0062e2:	e30d                	bnez	a4,1c006304 <__rt_bridge_handle_notif+0x40>
1c0062e4:	0b442783          	lw	a5,180(s0)
1c0062e8:	c789                	beqz	a5,1c0062f2 <__rt_bridge_handle_notif+0x2e>
1c0062ea:	43a8                	lw	a0,64(a5)
1c0062ec:	0a042a23          	sw	zero,180(s0)
1c0062f0:	3f89                	jal	1c006242 <__rt_event_enqueue>
1c0062f2:	0ac42783          	lw	a5,172(s0)
1c0062f6:	eb95                	bnez	a5,1c00632a <__rt_bridge_handle_notif+0x66>
1c0062f8:	4422                	lw	s0,8(sp)
1c0062fa:	40b2                	lw	ra,12(sp)
1c0062fc:	4492                	lw	s1,4(sp)
1c0062fe:	4902                	lw	s2,0(sp)
1c006300:	0141                	addi	sp,sp,16
1c006302:	bfb1                	j	1c00625e <__rt_bridge_check_bridge_req.part.5>
1c006304:	4784                	lw	s1,8(a5)
1c006306:	4fd8                	lw	a4,28(a5)
1c006308:	0a942223          	sw	s1,164(s0)
1c00630c:	cb01                	beqz	a4,1c00631c <__rt_bridge_handle_notif+0x58>
1c00630e:	0b042703          	lw	a4,176(s0)
1c006312:	c798                	sw	a4,8(a5)
1c006314:	0af42823          	sw	a5,176(s0)
1c006318:	87a6                	mv	a5,s1
1c00631a:	b7d1                	j	1c0062de <__rt_bridge_handle_notif+0x1a>
1c00631c:	43a8                	lw	a0,64(a5)
1c00631e:	30047973          	csrrci	s2,mstatus,8
1c006322:	3705                	jal	1c006242 <__rt_event_enqueue>
1c006324:	30091073          	csrw	mstatus,s2
1c006328:	bfc5                	j	1c006318 <__rt_bridge_handle_notif+0x54>
1c00632a:	40b2                	lw	ra,12(sp)
1c00632c:	4422                	lw	s0,8(sp)
1c00632e:	4492                	lw	s1,4(sp)
1c006330:	4902                	lw	s2,0(sp)
1c006332:	0141                	addi	sp,sp,16
1c006334:	8082                	ret

1c006336 <__rt_bridge_check_connection>:
1c006336:	1c00b6b7          	lui	a3,0x1c00b
1c00633a:	4a068693          	addi	a3,a3,1184 # 1c00b4a0 <__hal_debug_struct>
1c00633e:	469c                	lw	a5,8(a3)
1c006340:	ef9d                	bnez	a5,1c00637e <__rt_bridge_check_connection+0x48>
1c006342:	1a1047b7          	lui	a5,0x1a104
1c006346:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104054>
1c00634a:	4398                	lw	a4,0(a5)
1c00634c:	8325                	srli	a4,a4,0x9
1c00634e:	f8373733          	p.bclr	a4,a4,28,3
1c006352:	02773663          	p.bneimm	a4,7,1c00637e <__rt_bridge_check_connection+0x48>
1c006356:	1141                	addi	sp,sp,-16
1c006358:	c422                	sw	s0,8(sp)
1c00635a:	c606                	sw	ra,12(sp)
1c00635c:	4705                	li	a4,1
1c00635e:	c698                	sw	a4,8(a3)
1c006360:	4709                	li	a4,2
1c006362:	c398                	sw	a4,0(a5)
1c006364:	843e                	mv	s0,a5
1c006366:	401c                	lw	a5,0(s0)
1c006368:	83a5                	srli	a5,a5,0x9
1c00636a:	f837b7b3          	p.bclr	a5,a5,28,3
1c00636e:	0077a663          	p.beqimm	a5,7,1c00637a <__rt_bridge_check_connection+0x44>
1c006372:	40b2                	lw	ra,12(sp)
1c006374:	4422                	lw	s0,8(sp)
1c006376:	0141                	addi	sp,sp,16
1c006378:	8082                	ret
1c00637a:	3711                	jal	1c00627e <__rt_bridge_wait>
1c00637c:	b7ed                	j	1c006366 <__rt_bridge_check_connection+0x30>
1c00637e:	8082                	ret

1c006380 <__rt_bridge_set_available>:
1c006380:	1c00b7b7          	lui	a5,0x1c00b
1c006384:	4a078793          	addi	a5,a5,1184 # 1c00b4a0 <__hal_debug_struct>
1c006388:	4798                	lw	a4,8(a5)
1c00638a:	1a1047b7          	lui	a5,0x1a104
1c00638e:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104054>
1c006392:	e701                	bnez	a4,1c00639a <__rt_bridge_set_available+0x1a>
1c006394:	4721                	li	a4,8
1c006396:	c398                	sw	a4,0(a5)
1c006398:	8082                	ret
1c00639a:	4709                	li	a4,2
1c00639c:	bfed                	j	1c006396 <__rt_bridge_set_available+0x16>

1c00639e <__rt_bridge_send_notif>:
1c00639e:	1141                	addi	sp,sp,-16
1c0063a0:	c606                	sw	ra,12(sp)
1c0063a2:	3f51                	jal	1c006336 <__rt_bridge_check_connection>
1c0063a4:	1c00b7b7          	lui	a5,0x1c00b
1c0063a8:	4a078793          	addi	a5,a5,1184 # 1c00b4a0 <__hal_debug_struct>
1c0063ac:	479c                	lw	a5,8(a5)
1c0063ae:	c789                	beqz	a5,1c0063b8 <__rt_bridge_send_notif+0x1a>
1c0063b0:	1a1047b7          	lui	a5,0x1a104
1c0063b4:	4719                	li	a4,6
1c0063b6:	dbf8                	sw	a4,116(a5)
1c0063b8:	40b2                	lw	ra,12(sp)
1c0063ba:	0141                	addi	sp,sp,16
1c0063bc:	8082                	ret

1c0063be <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c0063be:	1141                	addi	sp,sp,-16
1c0063c0:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c0063c2:	3f95                	jal	1c006336 <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c0063c4:	1c00b7b7          	lui	a5,0x1c00b
1c0063c8:	4a078793          	addi	a5,a5,1184 # 1c00b4a0 <__hal_debug_struct>
1c0063cc:	479c                	lw	a5,8(a5)
1c0063ce:	c781                	beqz	a5,1c0063d6 <__rt_bridge_clear_notif+0x18>
  {
    __rt_bridge_set_available();
  }
}
1c0063d0:	40b2                	lw	ra,12(sp)
1c0063d2:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c0063d4:	b775                	j	1c006380 <__rt_bridge_set_available>
}
1c0063d6:	40b2                	lw	ra,12(sp)
1c0063d8:	0141                	addi	sp,sp,16
1c0063da:	8082                	ret

1c0063dc <__rt_bridge_printf_flush>:
{
1c0063dc:	1141                	addi	sp,sp,-16
1c0063de:	c422                	sw	s0,8(sp)
1c0063e0:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c0063e2:	1c00b437          	lui	s0,0x1c00b
  __rt_bridge_check_connection();
1c0063e6:	3f81                	jal	1c006336 <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c0063e8:	4a040793          	addi	a5,s0,1184 # 1c00b4a0 <__hal_debug_struct>
1c0063ec:	479c                	lw	a5,8(a5)
1c0063ee:	c38d                	beqz	a5,1c006410 <__rt_bridge_printf_flush+0x34>
1c0063f0:	4a040413          	addi	s0,s0,1184
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c0063f4:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c0063f6:	e399                	bnez	a5,1c0063fc <__rt_bridge_printf_flush+0x20>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c0063f8:	4c1c                	lw	a5,24(s0)
1c0063fa:	cb99                	beqz	a5,1c006410 <__rt_bridge_printf_flush+0x34>
      __rt_bridge_send_notif();
1c0063fc:	374d                	jal	1c00639e <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c0063fe:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c006400:	e789                	bnez	a5,1c00640a <__rt_bridge_printf_flush+0x2e>
}
1c006402:	4422                	lw	s0,8(sp)
1c006404:	40b2                	lw	ra,12(sp)
1c006406:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c006408:	bf5d                	j	1c0063be <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c00640a:	e75ff0ef          	jal	ra,1c00627e <__rt_bridge_wait>
1c00640e:	bfc5                	j	1c0063fe <__rt_bridge_printf_flush+0x22>
}
1c006410:	40b2                	lw	ra,12(sp)
1c006412:	4422                	lw	s0,8(sp)
1c006414:	0141                	addi	sp,sp,16
1c006416:	8082                	ret

1c006418 <__rt_bridge_req_shutdown>:
{
1c006418:	1141                	addi	sp,sp,-16
1c00641a:	c606                	sw	ra,12(sp)
1c00641c:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c00641e:	3f21                	jal	1c006336 <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c006420:	1c00b7b7          	lui	a5,0x1c00b
1c006424:	4a078793          	addi	a5,a5,1184 # 1c00b4a0 <__hal_debug_struct>
1c006428:	479c                	lw	a5,8(a5)
1c00642a:	c7a1                	beqz	a5,1c006472 <__rt_bridge_req_shutdown+0x5a>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00642c:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c006430:	3775                	jal	1c0063dc <__rt_bridge_printf_flush>
1c006432:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104054>
1c006436:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c006438:	83a5                	srli	a5,a5,0x9
1c00643a:	f837b7b3          	p.bclr	a5,a5,28,3
1c00643e:	0277ae63          	p.beqimm	a5,7,1c00647a <__rt_bridge_req_shutdown+0x62>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c006442:	4791                	li	a5,4
1c006444:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c006446:	1a104437          	lui	s0,0x1a104
1c00644a:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104054>
1c00644e:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c006450:	83a5                	srli	a5,a5,0x9
1c006452:	f837b7b3          	p.bclr	a5,a5,28,3
1c006456:	0277b563          	p.bneimm	a5,7,1c006480 <__rt_bridge_req_shutdown+0x68>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00645a:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00645e:	1a104437          	lui	s0,0x1a104
1c006462:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104054>
1c006466:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c006468:	83a5                	srli	a5,a5,0x9
1c00646a:	f837b7b3          	p.bclr	a5,a5,28,3
1c00646e:	0077ac63          	p.beqimm	a5,7,1c006486 <__rt_bridge_req_shutdown+0x6e>
}
1c006472:	40b2                	lw	ra,12(sp)
1c006474:	4422                	lw	s0,8(sp)
1c006476:	0141                	addi	sp,sp,16
1c006478:	8082                	ret
      __rt_bridge_wait();
1c00647a:	e05ff0ef          	jal	ra,1c00627e <__rt_bridge_wait>
1c00647e:	bf65                	j	1c006436 <__rt_bridge_req_shutdown+0x1e>
      __rt_bridge_wait();
1c006480:	dffff0ef          	jal	ra,1c00627e <__rt_bridge_wait>
1c006484:	b7e9                	j	1c00644e <__rt_bridge_req_shutdown+0x36>
      __rt_bridge_wait();
1c006486:	df9ff0ef          	jal	ra,1c00627e <__rt_bridge_wait>
1c00648a:	bff1                	j	1c006466 <__rt_bridge_req_shutdown+0x4e>

1c00648c <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c00648c:	1c00b7b7          	lui	a5,0x1c00b
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c006490:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c006494:	4a078793          	addi	a5,a5,1184 # 1c00b4a0 <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c006498:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ff9f0>
1c00649c:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c0064a0:	4705                	li	a4,1
  bridge->first_req = 0;
1c0064a2:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c0064a6:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c0064aa:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c0064ae:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c0064b2:	00400793          	li	a5,4
1c0064b6:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c0064ba:	0007a023          	sw	zero,0(a5)
}
1c0064be:	8082                	ret

1c0064c0 <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c0064c0:	1141                	addi	sp,sp,-16
1c0064c2:	c422                	sw	s0,8(sp)
1c0064c4:	c606                	sw	ra,12(sp)
1c0064c6:	842a                	mv	s0,a0
1c0064c8:	02052223          	sw	zero,36(a0)
1c0064cc:	02052423          	sw	zero,40(a0)
1c0064d0:	45c1                	li	a1,16
1c0064d2:	4501                	li	a0,0
1c0064d4:	2c85                	jal	1c006744 <rt_alloc>
1c0064d6:	dc68                	sw	a0,124(s0)
1c0064d8:	02042a23          	sw	zero,52(s0)
1c0064dc:	00042223          	sw	zero,4(s0)
1c0064e0:	40b2                	lw	ra,12(sp)
1c0064e2:	4422                	lw	s0,8(sp)
1c0064e4:	0141                	addi	sp,sp,16
1c0064e6:	8082                	ret

1c0064e8 <__rt_wait_event_prepare_blocking>:
1c0064e8:	01800793          	li	a5,24
1c0064ec:	4388                	lw	a0,0(a5)
1c0064ee:	4118                	lw	a4,0(a0)
1c0064f0:	02052423          	sw	zero,40(a0)
1c0064f4:	00052223          	sw	zero,4(a0)
1c0064f8:	c398                	sw	a4,0(a5)
1c0064fa:	4785                	li	a5,1
1c0064fc:	d15c                	sw	a5,36(a0)
1c0064fe:	8082                	ret

1c006500 <rt_event_alloc>:
1c006500:	1101                	addi	sp,sp,-32
1c006502:	c64e                	sw	s3,12(sp)
1c006504:	89ae                	mv	s3,a1
1c006506:	ce06                	sw	ra,28(sp)
1c006508:	cc22                	sw	s0,24(sp)
1c00650a:	ca26                	sw	s1,20(sp)
1c00650c:	c84a                	sw	s2,16(sp)
1c00650e:	c452                	sw	s4,8(sp)
1c006510:	c256                	sw	s5,4(sp)
1c006512:	30047a73          	csrrci	s4,mstatus,8
1c006516:	014027f3          	csrr	a5,uhartid
1c00651a:	8795                	srai	a5,a5,0x5
1c00651c:	f267b7b3          	p.bclr	a5,a5,25,6
1c006520:	02000713          	li	a4,32
1c006524:	00278513          	addi	a0,a5,2
1c006528:	00e79363          	bne	a5,a4,1c00652e <rt_event_alloc+0x2e>
1c00652c:	4505                	li	a0,1
1c00652e:	00799593          	slli	a1,s3,0x7
1c006532:	2c09                	jal	1c006744 <rt_alloc>
1c006534:	842a                	mv	s0,a0
1c006536:	557d                	li	a0,-1
1c006538:	c819                	beqz	s0,1c00654e <rt_event_alloc+0x4e>
1c00653a:	01800493          	li	s1,24
1c00653e:	4901                	li	s2,0
1c006540:	00448a93          	addi	s5,s1,4
1c006544:	01394e63          	blt	s2,s3,1c006560 <rt_event_alloc+0x60>
1c006548:	300a1073          	csrw	mstatus,s4
1c00654c:	4501                	li	a0,0
1c00654e:	40f2                	lw	ra,28(sp)
1c006550:	4462                	lw	s0,24(sp)
1c006552:	44d2                	lw	s1,20(sp)
1c006554:	4942                	lw	s2,16(sp)
1c006556:	49b2                	lw	s3,12(sp)
1c006558:	4a22                	lw	s4,8(sp)
1c00655a:	4a92                	lw	s5,4(sp)
1c00655c:	6105                	addi	sp,sp,32
1c00655e:	8082                	ret
1c006560:	8522                	mv	a0,s0
1c006562:	85d6                	mv	a1,s5
1c006564:	3fb1                	jal	1c0064c0 <__rt_event_init>
1c006566:	409c                	lw	a5,0(s1)
1c006568:	0905                	addi	s2,s2,1
1c00656a:	c01c                	sw	a5,0(s0)
1c00656c:	c080                	sw	s0,0(s1)
1c00656e:	08040413          	addi	s0,s0,128
1c006572:	bfc9                	j	1c006544 <rt_event_alloc+0x44>

1c006574 <rt_event_get>:
1c006574:	30047773          	csrrci	a4,mstatus,8
1c006578:	01800793          	li	a5,24
1c00657c:	4388                	lw	a0,0(a5)
1c00657e:	c509                	beqz	a0,1c006588 <rt_event_get+0x14>
1c006580:	4114                	lw	a3,0(a0)
1c006582:	c14c                	sw	a1,4(a0)
1c006584:	c510                	sw	a2,8(a0)
1c006586:	c394                	sw	a3,0(a5)
1c006588:	30071073          	csrw	mstatus,a4
1c00658c:	8082                	ret

1c00658e <rt_event_get_blocking>:
1c00658e:	30047773          	csrrci	a4,mstatus,8
1c006592:	01800793          	li	a5,24
1c006596:	4388                	lw	a0,0(a5)
1c006598:	c909                	beqz	a0,1c0065aa <rt_event_get_blocking+0x1c>
1c00659a:	4114                	lw	a3,0(a0)
1c00659c:	00052223          	sw	zero,4(a0)
1c0065a0:	00052423          	sw	zero,8(a0)
1c0065a4:	c394                	sw	a3,0(a5)
1c0065a6:	4785                	li	a5,1
1c0065a8:	d15c                	sw	a5,36(a0)
1c0065aa:	30071073          	csrw	mstatus,a4
1c0065ae:	8082                	ret

1c0065b0 <rt_event_push>:
1c0065b0:	30047773          	csrrci	a4,mstatus,8
1c0065b4:	01800693          	li	a3,24
1c0065b8:	42d4                	lw	a3,4(a3)
1c0065ba:	00052023          	sw	zero,0(a0)
1c0065be:	01800793          	li	a5,24
1c0065c2:	e691                	bnez	a3,1c0065ce <rt_event_push+0x1e>
1c0065c4:	c3c8                	sw	a0,4(a5)
1c0065c6:	c788                	sw	a0,8(a5)
1c0065c8:	30071073          	csrw	mstatus,a4
1c0065cc:	8082                	ret
1c0065ce:	4794                	lw	a3,8(a5)
1c0065d0:	c288                	sw	a0,0(a3)
1c0065d2:	bfd5                	j	1c0065c6 <rt_event_push+0x16>

1c0065d4 <__rt_event_execute>:
1c0065d4:	1141                	addi	sp,sp,-16
1c0065d6:	c422                	sw	s0,8(sp)
1c0065d8:	01800793          	li	a5,24
1c0065dc:	43dc                	lw	a5,4(a5)
1c0065de:	c606                	sw	ra,12(sp)
1c0065e0:	c226                	sw	s1,4(sp)
1c0065e2:	01800413          	li	s0,24
1c0065e6:	ef81                	bnez	a5,1c0065fe <__rt_event_execute+0x2a>
1c0065e8:	c1b9                	beqz	a1,1c00662e <__rt_event_execute+0x5a>
1c0065ea:	002047b7          	lui	a5,0x204
1c0065ee:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c0065f2:	300467f3          	csrrsi	a5,mstatus,8
1c0065f6:	300477f3          	csrrci	a5,mstatus,8
1c0065fa:	405c                	lw	a5,4(s0)
1c0065fc:	cb8d                	beqz	a5,1c00662e <__rt_event_execute+0x5a>
1c0065fe:	4485                	li	s1,1
1c006600:	4398                	lw	a4,0(a5)
1c006602:	5794                	lw	a3,40(a5)
1c006604:	00978a23          	sb	s1,20(a5)
1c006608:	c058                	sw	a4,4(s0)
1c00660a:	4788                	lw	a0,8(a5)
1c00660c:	43d8                	lw	a4,4(a5)
1c00660e:	e691                	bnez	a3,1c00661a <__rt_event_execute+0x46>
1c006610:	53d4                	lw	a3,36(a5)
1c006612:	e681                	bnez	a3,1c00661a <__rt_event_execute+0x46>
1c006614:	4014                	lw	a3,0(s0)
1c006616:	c394                	sw	a3,0(a5)
1c006618:	c01c                	sw	a5,0(s0)
1c00661a:	0207a223          	sw	zero,36(a5)
1c00661e:	c711                	beqz	a4,1c00662a <__rt_event_execute+0x56>
1c006620:	300467f3          	csrrsi	a5,mstatus,8
1c006624:	9702                	jalr	a4
1c006626:	300477f3          	csrrci	a5,mstatus,8
1c00662a:	405c                	lw	a5,4(s0)
1c00662c:	fbf1                	bnez	a5,1c006600 <__rt_event_execute+0x2c>
1c00662e:	40b2                	lw	ra,12(sp)
1c006630:	4422                	lw	s0,8(sp)
1c006632:	4492                	lw	s1,4(sp)
1c006634:	0141                	addi	sp,sp,16
1c006636:	8082                	ret

1c006638 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c006638:	1141                	addi	sp,sp,-16
1c00663a:	c422                	sw	s0,8(sp)
1c00663c:	c606                	sw	ra,12(sp)
1c00663e:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c006640:	505c                	lw	a5,36(s0)
1c006642:	ef81                	bnez	a5,1c00665a <__rt_wait_event+0x22>
1c006644:	585c                	lw	a5,52(s0)
1c006646:	eb91                	bnez	a5,1c00665a <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c006648:	01800793          	li	a5,24
1c00664c:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c00664e:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c006650:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c006652:	c380                	sw	s0,0(a5)
}
1c006654:	4422                	lw	s0,8(sp)
1c006656:	0141                	addi	sp,sp,16
1c006658:	8082                	ret
    __rt_event_execute(NULL, 1);
1c00665a:	4585                	li	a1,1
1c00665c:	4501                	li	a0,0
1c00665e:	3f9d                	jal	1c0065d4 <__rt_event_execute>
1c006660:	b7c5                	j	1c006640 <__rt_wait_event+0x8>

1c006662 <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c006662:	1141                	addi	sp,sp,-16
1c006664:	c606                	sw	ra,12(sp)
1c006666:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006668:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c00666c:	37f1                	jal	1c006638 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00666e:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c006672:	40b2                	lw	ra,12(sp)
1c006674:	4422                	lw	s0,8(sp)
1c006676:	0141                	addi	sp,sp,16
1c006678:	8082                	ret

1c00667a <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c00667a:	01800513          	li	a0,24
1c00667e:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c006682:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c006686:	4585                	li	a1,1
1c006688:	0511                	addi	a0,a0,4
1c00668a:	e77ff06f          	j	1c006500 <rt_event_alloc>

1c00668e <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c00668e:	ae01                	j	1c00699e <rt_event_push_delayed>

1c006690 <rt_user_alloc_init>:
      flags++;
      if (flags == 3) flags = 0;
    }
    return NULL;
#else
    return rt_user_alloc_align(rt_alloc_l2(), size, align);
1c006690:	00758793          	addi	a5,a1,7
1c006694:	c407b7b3          	p.bclr	a5,a5,2,0
1c006698:	40b785b3          	sub	a1,a5,a1
1c00669c:	c11c                	sw	a5,0(a0)
1c00669e:	8e0d                	sub	a2,a2,a1
1c0066a0:	00c05763          	blez	a2,1c0066ae <rt_user_alloc_init+0x1e>
1c0066a4:	c4063633          	p.bclr	a2,a2,2,0
1c0066a8:	c390                	sw	a2,0(a5)
1c0066aa:	0007a223          	sw	zero,4(a5)
1c0066ae:	8082                	ret

1c0066b0 <rt_user_alloc>:
1c0066b0:	411c                	lw	a5,0(a0)
1c0066b2:	059d                	addi	a1,a1,7
1c0066b4:	c405b5b3          	p.bclr	a1,a1,2,0
1c0066b8:	4701                	li	a4,0
1c0066ba:	cb89                	beqz	a5,1c0066cc <rt_user_alloc+0x1c>
1c0066bc:	4394                	lw	a3,0(a5)
1c0066be:	43d0                	lw	a2,4(a5)
1c0066c0:	00b6c863          	blt	a3,a1,1c0066d0 <rt_user_alloc+0x20>
1c0066c4:	00b69b63          	bne	a3,a1,1c0066da <rt_user_alloc+0x2a>
1c0066c8:	c719                	beqz	a4,1c0066d6 <rt_user_alloc+0x26>
1c0066ca:	c350                	sw	a2,4(a4)
1c0066cc:	853e                	mv	a0,a5
1c0066ce:	8082                	ret
1c0066d0:	873e                	mv	a4,a5
1c0066d2:	87b2                	mv	a5,a2
1c0066d4:	b7dd                	j	1c0066ba <rt_user_alloc+0xa>
1c0066d6:	c110                	sw	a2,0(a0)
1c0066d8:	bfd5                	j	1c0066cc <rt_user_alloc+0x1c>
1c0066da:	00b78833          	add	a6,a5,a1
1c0066de:	40b685b3          	sub	a1,a3,a1
1c0066e2:	00b82023          	sw	a1,0(a6)
1c0066e6:	00c82223          	sw	a2,4(a6)
1c0066ea:	c701                	beqz	a4,1c0066f2 <rt_user_alloc+0x42>
1c0066ec:	01072223          	sw	a6,4(a4)
1c0066f0:	bff1                	j	1c0066cc <rt_user_alloc+0x1c>
1c0066f2:	01052023          	sw	a6,0(a0)
1c0066f6:	bfd9                	j	1c0066cc <rt_user_alloc+0x1c>

1c0066f8 <rt_user_free>:
1c0066f8:	411c                	lw	a5,0(a0)
1c0066fa:	061d                	addi	a2,a2,7
1c0066fc:	c4063633          	p.bclr	a2,a2,2,0
1c006700:	4701                	li	a4,0
1c006702:	c399                	beqz	a5,1c006708 <rt_user_free+0x10>
1c006704:	02b7e763          	bltu	a5,a1,1c006732 <rt_user_free+0x3a>
1c006708:	00c586b3          	add	a3,a1,a2
1c00670c:	02d79663          	bne	a5,a3,1c006738 <rt_user_free+0x40>
1c006710:	4394                	lw	a3,0(a5)
1c006712:	43dc                	lw	a5,4(a5)
1c006714:	9636                	add	a2,a2,a3
1c006716:	c190                	sw	a2,0(a1)
1c006718:	c1dc                	sw	a5,4(a1)
1c00671a:	c31d                	beqz	a4,1c006740 <rt_user_free+0x48>
1c00671c:	4314                	lw	a3,0(a4)
1c00671e:	00d707b3          	add	a5,a4,a3
1c006722:	00f59d63          	bne	a1,a5,1c00673c <rt_user_free+0x44>
1c006726:	419c                	lw	a5,0(a1)
1c006728:	97b6                	add	a5,a5,a3
1c00672a:	c31c                	sw	a5,0(a4)
1c00672c:	41dc                	lw	a5,4(a1)
1c00672e:	c35c                	sw	a5,4(a4)
1c006730:	8082                	ret
1c006732:	873e                	mv	a4,a5
1c006734:	43dc                	lw	a5,4(a5)
1c006736:	b7f1                	j	1c006702 <rt_user_free+0xa>
1c006738:	c190                	sw	a2,0(a1)
1c00673a:	bff9                	j	1c006718 <rt_user_free+0x20>
1c00673c:	c34c                	sw	a1,4(a4)
1c00673e:	8082                	ret
1c006740:	c10c                	sw	a1,0(a0)
1c006742:	8082                	ret

1c006744 <rt_alloc>:
1c006744:	4785                	li	a5,1
1c006746:	00a7fa63          	bleu	a0,a5,1c00675a <rt_alloc+0x16>
1c00674a:	1c00c7b7          	lui	a5,0x1c00c
1c00674e:	3907a783          	lw	a5,912(a5) # 1c00c390 <__rt_alloc_l1>
1c006752:	1579                	addi	a0,a0,-2
1c006754:	050a                	slli	a0,a0,0x2
1c006756:	953e                	add	a0,a0,a5
1c006758:	bfa1                	j	1c0066b0 <rt_user_alloc>
1c00675a:	00153763          	p.bneimm	a0,1,1c006768 <rt_alloc+0x24>
1c00675e:	1c00c537          	lui	a0,0x1c00c
1c006762:	39850513          	addi	a0,a0,920 # 1c00c398 <__rt_alloc_fc_tcdm>
1c006766:	bfcd                	j	1c006758 <rt_alloc+0x14>
1c006768:	1c00c537          	lui	a0,0x1c00c
1c00676c:	39450513          	addi	a0,a0,916 # 1c00c394 <__rt_alloc_l2>
1c006770:	b7e5                	j	1c006758 <rt_alloc+0x14>

1c006772 <__rt_alloc_cluster_req>:
1c006772:	1141                	addi	sp,sp,-16
1c006774:	c422                	sw	s0,8(sp)
1c006776:	450c                	lw	a1,8(a0)
1c006778:	842a                	mv	s0,a0
1c00677a:	4148                	lw	a0,4(a0)
1c00677c:	c606                	sw	ra,12(sp)
1c00677e:	37d9                	jal	1c006744 <rt_alloc>
1c006780:	c008                	sw	a0,0(s0)
1c006782:	4785                	li	a5,1
1c006784:	08f40623          	sb	a5,140(s0)
1c006788:	08d44783          	lbu	a5,141(s0)
1c00678c:	40b2                	lw	ra,12(sp)
1c00678e:	4422                	lw	s0,8(sp)
1c006790:	04078793          	addi	a5,a5,64
1c006794:	00201737          	lui	a4,0x201
1c006798:	07da                	slli	a5,a5,0x16
1c00679a:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00679e:	0007e723          	p.sw	zero,a4(a5)
1c0067a2:	0141                	addi	sp,sp,16
1c0067a4:	8082                	ret

1c0067a6 <rt_free>:
1c0067a6:	4785                	li	a5,1
1c0067a8:	00a7fb63          	bleu	a0,a5,1c0067be <rt_free+0x18>
1c0067ac:	1c00c7b7          	lui	a5,0x1c00c
1c0067b0:	3907a783          	lw	a5,912(a5) # 1c00c390 <__rt_alloc_l1>
1c0067b4:	1579                	addi	a0,a0,-2
1c0067b6:	050a                	slli	a0,a0,0x2
1c0067b8:	953e                	add	a0,a0,a5
1c0067ba:	f3fff06f          	j	1c0066f8 <rt_user_free>
1c0067be:	c511                	beqz	a0,1c0067ca <rt_free+0x24>
1c0067c0:	1c00c537          	lui	a0,0x1c00c
1c0067c4:	39850513          	addi	a0,a0,920 # 1c00c398 <__rt_alloc_fc_tcdm>
1c0067c8:	bfcd                	j	1c0067ba <rt_free+0x14>
1c0067ca:	1c00c537          	lui	a0,0x1c00c
1c0067ce:	39450513          	addi	a0,a0,916 # 1c00c394 <__rt_alloc_l2>
1c0067d2:	b7e5                	j	1c0067ba <rt_free+0x14>

1c0067d4 <__rt_free_cluster_req>:
1c0067d4:	1141                	addi	sp,sp,-16
1c0067d6:	c422                	sw	s0,8(sp)
1c0067d8:	4510                	lw	a2,8(a0)
1c0067da:	454c                	lw	a1,12(a0)
1c0067dc:	842a                	mv	s0,a0
1c0067de:	4148                	lw	a0,4(a0)
1c0067e0:	c606                	sw	ra,12(sp)
1c0067e2:	37d1                	jal	1c0067a6 <rt_free>
1c0067e4:	4785                	li	a5,1
1c0067e6:	08f40823          	sb	a5,144(s0)
1c0067ea:	09144783          	lbu	a5,145(s0)
1c0067ee:	40b2                	lw	ra,12(sp)
1c0067f0:	4422                	lw	s0,8(sp)
1c0067f2:	04078793          	addi	a5,a5,64
1c0067f6:	00201737          	lui	a4,0x201
1c0067fa:	07da                	slli	a5,a5,0x16
1c0067fc:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c006800:	0007e723          	p.sw	zero,a4(a5)
1c006804:	0141                	addi	sp,sp,16
1c006806:	8082                	ret

1c006808 <__rt_alloc_init_l1>:
#if defined(ARCHI_HAS_L1)
void __rt_alloc_init_l1(int cid)
{
  // TODO support multu cluster
  rt_trace(RT_TRACE_INIT, "Initializing L1 allocator (cluster: %d, base: 0x%8x, size: 0x%8x)\n", cid, (int)rt_l1_base(cid), rt_l1_size(cid));
  rt_user_alloc_init(&__rt_alloc_l1[cid], rt_l1_base(cid), rt_l1_size(cid));
1c006808:	1c00c7b7          	lui	a5,0x1c00c
1c00680c:	3907a703          	lw	a4,912(a5) # 1c00c390 <__rt_alloc_l1>
1c006810:	100007b7          	lui	a5,0x10000
  return ((char *)&__l1_heap_start) + cid * ARCHI_CLUSTER_SIZE;
1c006814:	01651593          	slli	a1,a0,0x16
1c006818:	6641                	lui	a2,0x10
1c00681a:	050a                	slli	a0,a0,0x2
1c00681c:	02078793          	addi	a5,a5,32 # 10000020 <__l1_end>
1c006820:	fe060613          	addi	a2,a2,-32 # ffe0 <__l1_heap_size>
1c006824:	95be                	add	a1,a1,a5
1c006826:	953a                	add	a0,a0,a4
1c006828:	e69ff06f          	j	1c006690 <rt_user_alloc_init>

1c00682c <__rt_alloc_init_l1_for_fc>:
1c00682c:	100005b7          	lui	a1,0x10000
1c006830:	01651793          	slli	a5,a0,0x16
1c006834:	02058593          	addi	a1,a1,32 # 10000020 <__l1_end>
1c006838:	00b78733          	add	a4,a5,a1

  int size = sizeof(rt_alloc_t)*rt_nb_cluster();
  __rt_alloc_l1 = (rt_alloc_t *)rt_l1_base(cid);

  rt_trace(RT_TRACE_INIT, "Initializing L1 allocator (cluster: %d, base: 0x%8x, size: 0x%8x)\n", cid, (int)rt_l1_base(cid)+size, rt_l1_size(cid)-size);
  rt_user_alloc_init(&__rt_alloc_l1[cid], rt_l1_base(cid)+size, rt_l1_size(cid)-size);
1c00683c:	050a                	slli	a0,a0,0x2
1c00683e:	0791                	addi	a5,a5,4
1c006840:	6641                	lui	a2,0x10
  __rt_alloc_l1 = (rt_alloc_t *)rt_l1_base(cid);
1c006842:	1c00c6b7          	lui	a3,0x1c00c
  rt_user_alloc_init(&__rt_alloc_l1[cid], rt_l1_base(cid)+size, rt_l1_size(cid)-size);
1c006846:	fdc60613          	addi	a2,a2,-36 # ffdc <__rt_stack_size+0xf7dc>
1c00684a:	95be                	add	a1,a1,a5
1c00684c:	953a                	add	a0,a0,a4
  __rt_alloc_l1 = (rt_alloc_t *)rt_l1_base(cid);
1c00684e:	38e6a823          	sw	a4,912(a3) # 1c00c390 <__rt_alloc_l1>
  rt_user_alloc_init(&__rt_alloc_l1[cid], rt_l1_base(cid)+size, rt_l1_size(cid)-size);
1c006852:	e3fff06f          	j	1c006690 <rt_user_alloc_init>

1c006856 <__rt_allocs_init>:
static inline int rt_l2_size() { return ARCHI_L2_ADDR + ARCHI_L2_SIZE - (int)&__l2_end; }
1c006856:	1c00c5b7          	lui	a1,0x1c00c
1c00685a:	3f458793          	addi	a5,a1,1012 # 1c00c3f4 <__l2_end>
  __rt_alloc_l2[2].first_bank_addr = ARCHI_L2_SHARED_ADDR;
  __rt_alloc_account_free(&__rt_alloc_l2[2], rt_l2_shared_base() - sizeof(rt_alloc_chunk_t), rt_l2_shared_size() + sizeof(rt_alloc_chunk_t));
#endif
#else
  rt_trace(RT_TRACE_INIT, "Initializing L2 allocator (base: 0x%8x, size: 0x%8x)\n", (int)rt_l2_base(), rt_l2_size());
  rt_user_alloc_init(&__rt_alloc_l2[0], rt_l2_base(), rt_l2_size());
1c00685e:	1c080637          	lui	a2,0x1c080
1c006862:	1c00c537          	lui	a0,0x1c00c
{
1c006866:	1141                	addi	sp,sp,-16
  rt_user_alloc_init(&__rt_alloc_l2[0], rt_l2_base(), rt_l2_size());
1c006868:	8e1d                	sub	a2,a2,a5
1c00686a:	3f458593          	addi	a1,a1,1012
1c00686e:	39450513          	addi	a0,a0,916 # 1c00c394 <__rt_alloc_l2>
{
1c006872:	c606                	sw	ra,12(sp)
1c006874:	c422                	sw	s0,8(sp)
  rt_user_alloc_init(&__rt_alloc_l2[0], rt_l2_base(), rt_l2_size());
1c006876:	e1bff0ef          	jal	ra,1c006690 <rt_user_alloc_init>
  return ARCHI_FC_TCDM_ADDR + ARCHI_FC_TCDM_SIZE - (int)&__fc_tcdm_end;
1c00687a:	1b0015b7          	lui	a1,0x1b001
1c00687e:	42058793          	addi	a5,a1,1056 # 1b001420 <__fc_tcdm_end>
#endif
#endif

#if defined(ARCHI_HAS_FC_TCDM)
  rt_trace(RT_TRACE_INIT, "Initializing FC TCDM allocator (base: 0x%8x, size: 0x%8x)\n", (int)rt_fc_tcdm_base(), rt_fc_tcdm_size());
  rt_user_alloc_init(&__rt_alloc_fc_tcdm, rt_fc_tcdm_base(), rt_fc_tcdm_size());
1c006882:	1b004637          	lui	a2,0x1b004
1c006886:	1c00c437          	lui	s0,0x1c00c
1c00688a:	8e1d                	sub	a2,a2,a5
1c00688c:	42058593          	addi	a1,a1,1056
1c006890:	39840513          	addi	a0,s0,920 # 1c00c398 <__rt_alloc_fc_tcdm>
1c006894:	dfdff0ef          	jal	ra,1c006690 <rt_user_alloc_init>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c006898:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00689c:	ca5797b3          	p.extractu	a5,a5,5,5
#endif

#if defined(ARCHI_HAS_L1)
  // If the FC is running on cluster 0, initialize now the L1 allocator
  // as it is used for FC data
  if (rt_cluster_id() == 0)
1c0068a0:	e791                	bnez	a5,1c0068ac <__rt_allocs_init+0x56>
  else
  {
    __rt_alloc_l1 = rt_alloc(__RT_ALLOC_FC_DATA, sizeof(rt_alloc_t)*rt_nb_cluster());
  }
#endif
}
1c0068a2:	4422                	lw	s0,8(sp)
1c0068a4:	40b2                	lw	ra,12(sp)
    __rt_alloc_init_l1_for_fc(0);
1c0068a6:	4501                	li	a0,0
}
1c0068a8:	0141                	addi	sp,sp,16
    __rt_alloc_init_l1_for_fc(0);
1c0068aa:	b749                	j	1c00682c <__rt_alloc_init_l1_for_fc>
  if (flags == RT_ALLOC_FC_DATA) return rt_user_alloc(rt_alloc_fc_tcdm(), size);
1c0068ac:	39840513          	addi	a0,s0,920
1c0068b0:	4591                	li	a1,4
1c0068b2:	dffff0ef          	jal	ra,1c0066b0 <rt_user_alloc>
}
1c0068b6:	40b2                	lw	ra,12(sp)
1c0068b8:	4422                	lw	s0,8(sp)
    __rt_alloc_l1 = rt_alloc(__RT_ALLOC_FC_DATA, sizeof(rt_alloc_t)*rt_nb_cluster());
1c0068ba:	1c00c7b7          	lui	a5,0x1c00c
1c0068be:	38a7a823          	sw	a0,912(a5) # 1c00c390 <__rt_alloc_l1>
}
1c0068c2:	0141                	addi	sp,sp,16
1c0068c4:	8082                	ret

1c0068c6 <rt_alloc_cluster>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0068c6:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0068ca:	8795                	srai	a5,a5,0x5
1c0068cc:	f267b7b3          	p.bclr	a5,a5,25,6

void rt_alloc_cluster(rt_alloc_e flags, int size, rt_alloc_req_t *req)
{
  req->flags = flags;
  req->size = size;
  req->cid = rt_cluster_id();
1c0068d0:	08f606a3          	sb	a5,141(a2) # 1b00408d <__fc_tcdm_end+0x2c6d>
  event->arg[0] = (uintptr_t)callback;
1c0068d4:	1c0067b7          	lui	a5,0x1c006
1c0068d8:	77278793          	addi	a5,a5,1906 # 1c006772 <__rt_alloc_cluster_req>
1c0068dc:	ca1c                	sw	a5,16(a2)
  event->implem.pending = 1;  
1c0068de:	4785                	li	a5,1
  req->flags = flags;
1c0068e0:	c248                	sw	a0,4(a2)
  req->size = size;
1c0068e2:	c60c                	sw	a1,8(a2)
  req->done = 0;
1c0068e4:	08060623          	sb	zero,140(a2)
  event->implem.keep = 0;
1c0068e8:	02062a23          	sw	zero,52(a2)
  event->arg[1] = (uintptr_t)arg;
1c0068ec:	ca50                	sw	a2,20(a2)
  event->implem.pending = 1;  
1c0068ee:	da1c                	sw	a5,48(a2)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_alloc_cluster_req, (void *)req);
  // Mark it as pending event so that it is not added to the list of free events
  // as it stands inside the event request
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c0068f0:	00c60513          	addi	a0,a2,12
1c0068f4:	4850006f          	j	1c007578 <__rt_cluster_push_fc_event>

1c0068f8 <rt_free_cluster>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0068f8:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0068fc:	8795                	srai	a5,a5,0x5
1c0068fe:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_free_cluster(rt_alloc_e flags, void *chunk, int size, rt_free_req_t *req)
{
  req->flags = flags;
  req->size = size;
  req->chunk = chunk;
  req->cid = rt_cluster_id();
1c006902:	08f688a3          	sb	a5,145(a3)
  event->arg[0] = (uintptr_t)callback;
1c006906:	1c0067b7          	lui	a5,0x1c006
1c00690a:	7d478793          	addi	a5,a5,2004 # 1c0067d4 <__rt_free_cluster_req>
1c00690e:	cadc                	sw	a5,20(a3)
  event->implem.pending = 1;  
1c006910:	4785                	li	a5,1
  req->flags = flags;
1c006912:	c2c8                	sw	a0,4(a3)
  req->size = size;
1c006914:	c690                	sw	a2,8(a3)
  req->chunk = chunk;
1c006916:	c6cc                	sw	a1,12(a3)
  req->done = 0;
1c006918:	08068823          	sb	zero,144(a3)
  event->implem.keep = 0;
1c00691c:	0206ac23          	sw	zero,56(a3)
  event->arg[1] = (uintptr_t)arg;
1c006920:	ce94                	sw	a3,24(a3)
  event->implem.pending = 1;  
1c006922:	dadc                	sw	a5,52(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_free_cluster_req, (void *)req);
  // Mark it as pending event so that it is not added to the list of free events
  // as it stands inside the event request
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c006924:	01068513          	addi	a0,a3,16
1c006928:	4510006f          	j	1c007578 <__rt_cluster_push_fc_event>

1c00692c <pi_cl_l2_malloc>:
}

void pi_cl_l2_malloc(int size, pi_cl_alloc_req_t *req)
{
  rt_alloc_cluster(RT_ALLOC_PERIPH, size, (rt_alloc_req_t *)req);
1c00692c:	862e                	mv	a2,a1
1c00692e:	85aa                	mv	a1,a0
1c006930:	4501                	li	a0,0
1c006932:	bf51                	j	1c0068c6 <rt_alloc_cluster>

1c006934 <pi_cl_l2_free>:
}

void pi_cl_l2_free(void *chunk, int size, pi_cl_free_req_t *req)
{
  rt_free_cluster(RT_ALLOC_PERIPH, chunk, size, (rt_free_req_t *)req);
1c006934:	86b2                	mv	a3,a2
1c006936:	862e                	mv	a2,a1
1c006938:	85aa                	mv	a1,a0
1c00693a:	4501                	li	a0,0
1c00693c:	bf75                	j	1c0068f8 <rt_free_cluster>

1c00693e <pi_cl_l1_malloc>:
}

void *pi_cl_l1_malloc(struct pi_device *device, uint32_t size)
{
  return rt_alloc(RT_ALLOC_CL_DATA, size);
1c00693e:	4509                	li	a0,2
1c006940:	e05ff06f          	j	1c006744 <rt_alloc>

1c006944 <pi_cl_l1_free>:
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c006944:	1c00c7b7          	lui	a5,0x1c00c
1c006948:	3907a503          	lw	a0,912(a5) # 1c00c390 <__rt_alloc_l1>
1c00694c:	dadff06f          	j	1c0066f8 <rt_user_free>

1c006950 <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c006950:	85aa                	mv	a1,a0
1c006952:	1c00c537          	lui	a0,0x1c00c
1c006956:	39450513          	addi	a0,a0,916 # 1c00c394 <__rt_alloc_l2>
1c00695a:	d57ff06f          	j	1c0066b0 <rt_user_alloc>

1c00695e <pi_l2_free>:
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c00695e:	862e                	mv	a2,a1
1c006960:	85aa                	mv	a1,a0
1c006962:	1c00c537          	lui	a0,0x1c00c
1c006966:	39450513          	addi	a0,a0,916 # 1c00c394 <__rt_alloc_l2>
1c00696a:	d8fff06f          	j	1c0066f8 <rt_user_free>

1c00696e <__rt_time_poweroff>:
  {
    timer->current_time += timer->period;
    __rt_event_set_pending(timer->event);
    rt_event_push_delayed(timer->event, timer->current_time - rt_time_get_us());
  }
}
1c00696e:	002007b7          	lui	a5,0x200
1c006972:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c006976:	0087a783          	lw	a5,8(a5)
1c00697a:	1c00c737          	lui	a4,0x1c00c
1c00697e:	36f72223          	sw	a5,868(a4) # 1c00c364 <timer_count>
1c006982:	4501                	li	a0,0
1c006984:	8082                	ret

1c006986 <__rt_time_poweron>:
1c006986:	1c00c7b7          	lui	a5,0x1c00c
1c00698a:	3647a703          	lw	a4,868(a5) # 1c00c364 <timer_count>
1c00698e:	002007b7          	lui	a5,0x200
1c006992:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c006996:	00e7a423          	sw	a4,8(a5)
1c00699a:	4501                	li	a0,0
1c00699c:	8082                	ret

1c00699e <rt_event_push_delayed>:
1c00699e:	30047373          	csrrci	t1,mstatus,8
1c0069a2:	1c00c637          	lui	a2,0x1c00c
1c0069a6:	39c62703          	lw	a4,924(a2) # 1c00c39c <first_delayed>
1c0069aa:	002007b7          	lui	a5,0x200
1c0069ae:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c0069b2:	0087a783          	lw	a5,8(a5)
1c0069b6:	46f9                	li	a3,30
1c0069b8:	0405e5b3          	p.max	a1,a1,zero
1c0069bc:	02d5c5b3          	div	a1,a1,a3
1c0069c0:	800006b7          	lui	a3,0x80000
1c0069c4:	fff6c693          	not	a3,a3
1c0069c8:	00d7f833          	and	a6,a5,a3
1c0069cc:	0585                	addi	a1,a1,1
1c0069ce:	97ae                	add	a5,a5,a1
1c0069d0:	dd1c                	sw	a5,56(a0)
1c0069d2:	982e                	add	a6,a6,a1
1c0069d4:	4781                	li	a5,0
1c0069d6:	c719                	beqz	a4,1c0069e4 <rt_event_push_delayed+0x46>
1c0069d8:	03872883          	lw	a7,56(a4)
1c0069dc:	00d8f8b3          	and	a7,a7,a3
1c0069e0:	0108e863          	bltu	a7,a6,1c0069f0 <rt_event_push_delayed+0x52>
1c0069e4:	cb89                	beqz	a5,1c0069f6 <rt_event_push_delayed+0x58>
1c0069e6:	cfc8                	sw	a0,28(a5)
1c0069e8:	cd58                	sw	a4,28(a0)
1c0069ea:	30031073          	csrw	mstatus,t1
1c0069ee:	8082                	ret
1c0069f0:	87ba                	mv	a5,a4
1c0069f2:	4f58                	lw	a4,28(a4)
1c0069f4:	b7cd                	j	1c0069d6 <rt_event_push_delayed+0x38>
1c0069f6:	002007b7          	lui	a5,0x200
1c0069fa:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c0069fe:	38a62e23          	sw	a0,924(a2)
1c006a02:	cd58                	sw	a4,28(a0)
1c006a04:	0087a703          	lw	a4,8(a5)
1c006a08:	95ba                	add	a1,a1,a4
1c006a0a:	00b7a823          	sw	a1,16(a5)
1c006a0e:	08500713          	li	a4,133
1c006a12:	00e7a023          	sw	a4,0(a5)
1c006a16:	bfd1                	j	1c0069ea <rt_event_push_delayed+0x4c>

1c006a18 <rt_time_wait_us>:
{
1c006a18:	1101                	addi	sp,sp,-32
1c006a1a:	85aa                	mv	a1,a0
  rt_event_t *event = rt_event_get_blocking(NULL);
1c006a1c:	4501                	li	a0,0
{
1c006a1e:	ce06                	sw	ra,28(sp)
1c006a20:	cc22                	sw	s0,24(sp)
  rt_event_t *event = rt_event_get_blocking(NULL);
1c006a22:	c62e                	sw	a1,12(sp)
1c006a24:	b6bff0ef          	jal	ra,1c00658e <rt_event_get_blocking>
  rt_event_push_delayed(event, time_us);
1c006a28:	45b2                	lw	a1,12(sp)
  rt_event_t *event = rt_event_get_blocking(NULL);
1c006a2a:	842a                	mv	s0,a0
  rt_event_push_delayed(event, time_us);
1c006a2c:	f73ff0ef          	jal	ra,1c00699e <rt_event_push_delayed>
  rt_event_wait(event);
1c006a30:	8522                	mv	a0,s0
}
1c006a32:	4462                	lw	s0,24(sp)
1c006a34:	40f2                	lw	ra,28(sp)
1c006a36:	6105                	addi	sp,sp,32
  rt_event_wait(event);
1c006a38:	c2bff06f          	j	1c006662 <rt_event_wait>

1c006a3c <pi_time_wait_us>:
  rt_time_wait_us(time_us);
1c006a3c:	bff1                	j	1c006a18 <rt_time_wait_us>

1c006a3e <__rt_time_init>:
  first_delayed = NULL;
1c006a3e:	1c00c7b7          	lui	a5,0x1c00c
1c006a42:	3807ae23          	sw	zero,924(a5) # 1c00c39c <first_delayed>
//

#ifndef LANGUAGE_ASSEMBLY

static inline uint32_t timer_cfg_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_LO_OFFSET); }
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c006a46:	002007b7          	lui	a5,0x200
{
1c006a4a:	1141                	addi	sp,sp,-16
1c006a4c:	08300713          	li	a4,131
1c006a50:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c006a54:	c606                	sw	ra,12(sp)
1c006a56:	c422                	sw	s0,8(sp)
1c006a58:	00e7a023          	sw	a4,0(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c006a5c:	1c0075b7          	lui	a1,0x1c007
1c006a60:	aca58593          	addi	a1,a1,-1334 # 1c006aca <__rt_timer_handler>
1c006a64:	452d                	li	a0,11
1c006a66:	d0cff0ef          	jal	ra,1c005f72 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c006a6a:	6785                	lui	a5,0x1
1c006a6c:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c006a70:	00204737          	lui	a4,0x204
1c006a74:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006a78:	00f72423          	sw	a5,8(a4)
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c006a7c:	1c0075b7          	lui	a1,0x1c007
1c006a80:	4601                	li	a2,0
1c006a82:	96e58593          	addi	a1,a1,-1682 # 1c00696e <__rt_time_poweroff>
1c006a86:	4509                	li	a0,2
1c006a88:	e56ff0ef          	jal	ra,1c0060de <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c006a8c:	1c0075b7          	lui	a1,0x1c007
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c006a90:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c006a92:	4601                	li	a2,0
1c006a94:	98658593          	addi	a1,a1,-1658 # 1c006986 <__rt_time_poweron>
1c006a98:	450d                	li	a0,3
1c006a9a:	e44ff0ef          	jal	ra,1c0060de <__rt_cbsys_add>
1c006a9e:	8d41                	or	a0,a0,s0
  if (err) rt_fatal("Unable to initialize time driver\n");
1c006aa0:	c10d                	beqz	a0,1c006ac2 <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c006aa2:	01402673          	csrr	a2,uhartid
1c006aa6:	1c00b537          	lui	a0,0x1c00b
  return (hart_id >> 5) & 0x3f;
1c006aaa:	40565593          	srai	a1,a2,0x5
1c006aae:	f265b5b3          	p.bclr	a1,a1,25,6
1c006ab2:	f4563633          	p.bclr	a2,a2,26,5
1c006ab6:	1b450513          	addi	a0,a0,436 # 1c00b1b4 <__himax_reg_init+0x1d0>
1c006aba:	653020ef          	jal	ra,1c00990c <printf>
1c006abe:	5d3020ef          	jal	ra,1c009890 <abort>
}
1c006ac2:	40b2                	lw	ra,12(sp)
1c006ac4:	4422                	lw	s0,8(sp)
1c006ac6:	0141                	addi	sp,sp,16
1c006ac8:	8082                	ret

1c006aca <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c006aca:	7179                	addi	sp,sp,-48
1c006acc:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c006ace:	1c00c637          	lui	a2,0x1c00c
{
1c006ad2:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c006ad4:	39c62783          	lw	a5,924(a2) # 1c00c39c <first_delayed>
{
1c006ad8:	ce36                	sw	a3,28(sp)

static inline uint32_t timer_cfg_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_HI_OFFSET); }
static inline void timer_cfg_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_HI_OFFSET, value); }

static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c006ada:	002006b7          	lui	a3,0x200
1c006ade:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c006ae2:	d61a                	sw	t1,44(sp)
1c006ae4:	d42a                	sw	a0,40(sp)
1c006ae6:	d22e                	sw	a1,36(sp)
1c006ae8:	cc3a                	sw	a4,24(sp)
1c006aea:	c842                	sw	a6,16(sp)
1c006aec:	c646                	sw	a7,12(sp)
1c006aee:	c472                	sw	t3,8(sp)
1c006af0:	c276                	sw	t4,4(sp)
1c006af2:	0086a683          	lw	a3,8(a3)
1c006af6:	01c00593          	li	a1,28
1c006afa:	01c02503          	lw	a0,28(zero) # 1c <_l1_preload_size>
1c006afe:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c006b00:	80000337          	lui	t1,0x80000
1c006b04:	4801                	li	a6,0
1c006b06:	4881                	li	a7,0
1c006b08:	01c00e93          	li	t4,28
1c006b0c:	ffe34313          	xori	t1,t1,-2
1c006b10:	e7ad                	bnez	a5,1c006b7a <__rt_timer_handler+0xb0>
1c006b12:	00088463          	beqz	a7,1c006b1a <__rt_timer_handler+0x50>
1c006b16:	00a02e23          	sw	a0,28(zero) # 1c <_l1_preload_size>
1c006b1a:	00080463          	beqz	a6,1c006b22 <__rt_timer_handler+0x58>
1c006b1e:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c006b22:	002007b7          	lui	a5,0x200
1c006b26:	08100713          	li	a4,129
1c006b2a:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c006b2e:	38062e23          	sw	zero,924(a2)
1c006b32:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c006b36:	6785                	lui	a5,0x1
1c006b38:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c006b3c:	00204737          	lui	a4,0x204
1c006b40:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c006b44:	5332                	lw	t1,44(sp)
1c006b46:	5522                	lw	a0,40(sp)
1c006b48:	5592                	lw	a1,36(sp)
1c006b4a:	5602                	lw	a2,32(sp)
1c006b4c:	46f2                	lw	a3,28(sp)
1c006b4e:	4762                	lw	a4,24(sp)
1c006b50:	47d2                	lw	a5,20(sp)
1c006b52:	4842                	lw	a6,16(sp)
1c006b54:	48b2                	lw	a7,12(sp)
1c006b56:	4e22                	lw	t3,8(sp)
1c006b58:	4e92                	lw	t4,4(sp)
1c006b5a:	6145                	addi	sp,sp,48
1c006b5c:	30200073          	mret
  event->next = NULL;
1c006b60:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c006b64:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c006b68:	c511                	beqz	a0,1c006b74 <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c006b6a:	c19c                	sw	a5,0(a1)
    event = next;
1c006b6c:	85be                	mv	a1,a5
1c006b6e:	4805                	li	a6,1
1c006b70:	87f2                	mv	a5,t3
1c006b72:	bf79                	j	1c006b10 <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c006b74:	853e                	mv	a0,a5
1c006b76:	4885                	li	a7,1
1c006b78:	bfd5                	j	1c006b6c <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c006b7a:	0387ae03          	lw	t3,56(a5)
1c006b7e:	41c68e33          	sub	t3,a3,t3
1c006b82:	fdc37fe3          	bleu	t3,t1,1c006b60 <__rt_timer_handler+0x96>
1c006b86:	00088463          	beqz	a7,1c006b8e <__rt_timer_handler+0xc4>
1c006b8a:	00a02e23          	sw	a0,28(zero) # 1c <_l1_preload_size>
1c006b8e:	00080463          	beqz	a6,1c006b96 <__rt_timer_handler+0xcc>
1c006b92:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c006b96:	00200737          	lui	a4,0x200
1c006b9a:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c006b9e:	38f62e23          	sw	a5,924(a2)
1c006ba2:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c006ba6:	5f9c                	lw	a5,56(a5)
1c006ba8:	40d786b3          	sub	a3,a5,a3
1c006bac:	96b2                	add	a3,a3,a2

static inline uint32_t timer_cnt_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_HI_OFFSET); }
static inline void timer_cnt_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CNT_HI_OFFSET, value); }

static inline uint32_t timer_cmp_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_LO_OFFSET); }
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c006bae:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c006bb2:	08500793          	li	a5,133
1c006bb6:	00f72023          	sw	a5,0(a4)
}
1c006bba:	b769                	j	1c006b44 <__rt_timer_handler+0x7a>

1c006bbc <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c006bbc:	7179                	addi	sp,sp,-48
1c006bbe:	d422                	sw	s0,40(sp)
1c006bc0:	842a                	mv	s0,a0
1c006bc2:	d606                	sw	ra,44(sp)
1c006bc4:	d226                	sw	s1,36(sp)
1c006bc6:	d04a                	sw	s2,32(sp)
1c006bc8:	30047973          	csrrci	s2,mstatus,8
1c006bcc:	4015d493          	srai	s1,a1,0x1
1c006bd0:	1a102537          	lui	a0,0x1a102
1c006bd4:	049e                	slli	s1,s1,0x7
1c006bd6:	94aa                	add	s1,s1,a0
1c006bd8:	00459513          	slli	a0,a1,0x4
1c006bdc:	8941                	andi	a0,a0,16
1c006bde:	94aa                	add	s1,s1,a0
1c006be0:	853e                	mv	a0,a5
1c006be2:	ef89                	bnez	a5,1c006bfc <rt_periph_copy+0x40>
1c006be4:	ce2e                	sw	a1,28(sp)
1c006be6:	cc32                	sw	a2,24(sp)
1c006be8:	ca36                	sw	a3,20(sp)
1c006bea:	c83a                	sw	a4,16(sp)
1c006bec:	c63e                	sw	a5,12(sp)
1c006bee:	8fbff0ef          	jal	ra,1c0064e8 <__rt_wait_event_prepare_blocking>
1c006bf2:	47b2                	lw	a5,12(sp)
1c006bf4:	4742                	lw	a4,16(sp)
1c006bf6:	46d2                	lw	a3,20(sp)
1c006bf8:	4662                	lw	a2,24(sp)
1c006bfa:	45f2                	lw	a1,28(sp)
1c006bfc:	e419                	bnez	s0,1c006c0a <rt_periph_copy+0x4e>
1c006bfe:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa102018>
1c006c02:	04052223          	sw	zero,68(a0)
1c006c06:	04052a23          	sw	zero,84(a0)
1c006c0a:	00c42803          	lw	a6,12(s0)
1c006c0e:	c054                	sw	a3,4(s0)
1c006c10:	cc08                	sw	a0,24(s0)
1c006c12:	f6483833          	p.bclr	a6,a6,27,4
1c006c16:	4891                	li	a7,4
1c006c18:	c0474733          	p.bset	a4,a4,0,4
1c006c1c:	0908e163          	bltu	a7,a6,1c006c9e <rt_periph_copy+0xe2>
1c006c20:	03000893          	li	a7,48
1c006c24:	0596                	slli	a1,a1,0x5
1c006c26:	98ae                	add	a7,a7,a1
1c006c28:	0008a303          	lw	t1,0(a7)
1c006c2c:	00042a23          	sw	zero,20(s0)
1c006c30:	03000813          	li	a6,48
1c006c34:	02031b63          	bnez	t1,1c006c6a <rt_periph_copy+0xae>
1c006c38:	0088a023          	sw	s0,0(a7)
1c006c3c:	00b808b3          	add	a7,a6,a1
1c006c40:	0088a303          	lw	t1,8(a7)
1c006c44:	0088a223          	sw	s0,4(a7)
1c006c48:	02031663          	bnez	t1,1c006c74 <rt_periph_copy+0xb8>
1c006c4c:	00848893          	addi	a7,s1,8
1c006c50:	0008a883          	lw	a7,0(a7)
1c006c54:	0208f893          	andi	a7,a7,32
1c006c58:	00089e63          	bnez	a7,1c006c74 <rt_periph_copy+0xb8>
1c006c5c:	00c4a023          	sw	a2,0(s1)
1c006c60:	00d4a223          	sw	a3,4(s1)
1c006c64:	00e4a423          	sw	a4,8(s1)
1c006c68:	a005                	j	1c006c88 <rt_periph_copy+0xcc>
1c006c6a:	0048a883          	lw	a7,4(a7)
1c006c6e:	0088aa23          	sw	s0,20(a7)
1c006c72:	b7e9                	j	1c006c3c <rt_periph_copy+0x80>
1c006c74:	00042823          	sw	zero,16(s0)
1c006c78:	c010                	sw	a2,0(s0)
1c006c7a:	c054                	sw	a3,4(s0)
1c006c7c:	c418                	sw	a4,8(s0)
1c006c7e:	00031563          	bnez	t1,1c006c88 <rt_periph_copy+0xcc>
1c006c82:	982e                	add	a6,a6,a1
1c006c84:	00882423          	sw	s0,8(a6)
1c006c88:	e399                	bnez	a5,1c006c8e <rt_periph_copy+0xd2>
1c006c8a:	9afff0ef          	jal	ra,1c006638 <__rt_wait_event>
1c006c8e:	30091073          	csrw	mstatus,s2
1c006c92:	50b2                	lw	ra,44(sp)
1c006c94:	5422                	lw	s0,40(sp)
1c006c96:	5492                	lw	s1,36(sp)
1c006c98:	5902                	lw	s2,32(sp)
1c006c9a:	6145                	addi	sp,sp,48
1c006c9c:	8082                	ret
1c006c9e:	fe6835e3          	p.bneimm	a6,6,1c006c88 <rt_periph_copy+0xcc>
1c006ca2:	03000893          	li	a7,48
1c006ca6:	0596                	slli	a1,a1,0x5
1c006ca8:	98ae                	add	a7,a7,a1
1c006caa:	0008a303          	lw	t1,0(a7)
1c006cae:	00042a23          	sw	zero,20(s0)
1c006cb2:	03000813          	li	a6,48
1c006cb6:	00031f63          	bnez	t1,1c006cd4 <rt_periph_copy+0x118>
1c006cba:	0088a023          	sw	s0,0(a7)
1c006cbe:	95c2                	add	a1,a1,a6
1c006cc0:	c1c0                	sw	s0,4(a1)
1c006cc2:	00031e63          	bnez	t1,1c006cde <rt_periph_copy+0x122>
1c006cc6:	02442803          	lw	a6,36(s0)
1c006cca:	1a1025b7          	lui	a1,0x1a102
1c006cce:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa102180>
1c006cd2:	b769                	j	1c006c5c <rt_periph_copy+0xa0>
1c006cd4:	0048a883          	lw	a7,4(a7)
1c006cd8:	0088aa23          	sw	s0,20(a7)
1c006cdc:	b7cd                	j	1c006cbe <rt_periph_copy+0x102>
1c006cde:	c418                	sw	a4,8(s0)
1c006ce0:	4598                	lw	a4,8(a1)
1c006ce2:	c010                	sw	a2,0(s0)
1c006ce4:	c054                	sw	a3,4(s0)
1c006ce6:	00042823          	sw	zero,16(s0)
1c006cea:	ff59                	bnez	a4,1c006c88 <rt_periph_copy+0xcc>
1c006cec:	c580                	sw	s0,8(a1)
1c006cee:	bf69                	j	1c006c88 <rt_periph_copy+0xcc>

1c006cf0 <__rt_periph_wait_event>:
1c006cf0:	30047673          	csrrci	a2,mstatus,8
1c006cf4:	477d                	li	a4,31
1c006cf6:	4781                	li	a5,0
1c006cf8:	00a75463          	ble	a0,a4,1c006d00 <__rt_periph_wait_event+0x10>
1c006cfc:	1501                	addi	a0,a0,-32
1c006cfe:	4785                	li	a5,1
1c006d00:	00279713          	slli	a4,a5,0x2
1c006d04:	4685                	li	a3,1
1c006d06:	03000793          	li	a5,48
1c006d0a:	00a696b3          	sll	a3,a3,a0
1c006d0e:	97ba                	add	a5,a5,a4
1c006d10:	00204837          	lui	a6,0x204
1c006d14:	2807a703          	lw	a4,640(a5)
1c006d18:	8f75                	and	a4,a4,a3
1c006d1a:	cf19                	beqz	a4,1c006d38 <__rt_periph_wait_event+0x48>
1c006d1c:	c999                	beqz	a1,1c006d32 <__rt_periph_wait_event+0x42>
1c006d1e:	2807a683          	lw	a3,640(a5)
1c006d22:	4705                	li	a4,1
1c006d24:	00a71533          	sll	a0,a4,a0
1c006d28:	fff54513          	not	a0,a0
1c006d2c:	8d75                	and	a0,a0,a3
1c006d2e:	28a7a023          	sw	a0,640(a5)
1c006d32:	30061073          	csrw	mstatus,a2
1c006d36:	8082                	ret
1c006d38:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c006d3c:	30046773          	csrrsi	a4,mstatus,8
1c006d40:	30047773          	csrrci	a4,mstatus,8
1c006d44:	bfc1                	j	1c006d14 <__rt_periph_wait_event+0x24>

1c006d46 <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c006d46:	1c002537          	lui	a0,0x1c002
1c006d4a:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c006d4e:	4601                	li	a2,0
1c006d50:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c006d54:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c006d58:	03250513          	addi	a0,a0,50 # 1c002032 <udma_event_handler>
1c006d5c:	014950fb          	lp.setupi	x1,20,1c006d80 <__rt_periph_init+0x3a>
1c006d60:	40165793          	srai	a5,a2,0x1
1c006d64:	00461813          	slli	a6,a2,0x4
1c006d68:	079e                	slli	a5,a5,0x7
1c006d6a:	97c6                	add	a5,a5,a7
1c006d6c:	01087813          	andi	a6,a6,16
1c006d70:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c006d72:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c006d76:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c006d7a:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c006d7c:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c006d7e:	0605                	addi	a2,a2,1
1c006d80:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c006d84:	1c0026b7          	lui	a3,0x1c002
1c006d88:	28870613          	addi	a2,a4,648
1c006d8c:	1dc68693          	addi	a3,a3,476 # 1c0021dc <__rt_soc_evt_no_udma>
1c006d90:	00a250fb          	lp.setupi	x1,10,1c006d98 <__rt_periph_init+0x52>
1c006d94:	00d6222b          	p.sw	a3,4(a2!)
1c006d98:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c006d9a:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c006d9e:	28072223          	sw	zero,644(a4)
}
1c006da2:	8082                	ret

1c006da4 <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c006da4:	1141                	addi	sp,sp,-16
1c006da6:	c226                	sw	s1,4(sp)
1c006da8:	84ae                	mv	s1,a1
1c006daa:	c606                	sw	ra,12(sp)
1c006dac:	c422                	sw	s0,8(sp)
1c006dae:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006db0:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c006db4:	1c00c437          	lui	s0,0x1c00c
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c006db8:	00153f63          	p.bneimm	a0,1,1c006dd6 <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c006dbc:	3a040413          	addi	s0,s0,928 # 1c00c3a0 <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c006dc0:	294d                	jal	1c007272 <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c006dc2:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c006dc4:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c006dc8:	40b2                	lw	ra,12(sp)
1c006dca:	4422                	lw	s0,8(sp)
1c006dcc:	4492                	lw	s1,4(sp)
1c006dce:	4902                	lw	s2,0(sp)
1c006dd0:	4501                	li	a0,0
1c006dd2:	0141                	addi	sp,sp,16
1c006dd4:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c006dd6:	4511                	li	a0,4
1c006dd8:	b44ff0ef          	jal	ra,1c00611c <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c006ddc:	85a6                	mv	a1,s1
1c006dde:	4501                	li	a0,0
1c006de0:	2949                	jal	1c007272 <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c006de2:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c006de4:	3a942023          	sw	s1,928(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c006de8:	b34ff0ef          	jal	ra,1c00611c <__rt_cbsys_exec>
1c006dec:	bfe1                	j	1c006dc4 <rt_freq_set_and_get+0x20>

1c006dee <__rt_freq_init>:

void __rt_freq_init()
{
1c006dee:	1141                	addi	sp,sp,-16
1c006df0:	c422                	sw	s0,8(sp)
1c006df2:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c006df4:	29b5                	jal	1c007270 <__rt_flls_constructor>
  return __rt_platform;
1c006df6:	1c00b7b7          	lui	a5,0x1c00b

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c006dfa:	56c7a783          	lw	a5,1388(a5) # 1c00b56c <__rt_platform>
1c006dfe:	1c00c437          	lui	s0,0x1c00c
1c006e02:	0017ae63          	p.beqimm	a5,1,1c006e1e <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c006e06:	4501                	li	a0,0
1c006e08:	2991                	jal	1c00725c <__rt_fll_init>
1c006e0a:	3aa42023          	sw	a0,928(s0) # 1c00c3a0 <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c006e0e:	3a040413          	addi	s0,s0,928
1c006e12:	00042223          	sw	zero,4(s0)

}
1c006e16:	40b2                	lw	ra,12(sp)
1c006e18:	4422                	lw	s0,8(sp)
1c006e1a:	0141                	addi	sp,sp,16
1c006e1c:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c006e1e:	026267b7          	lui	a5,0x2626
1c006e22:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c006e26:	3af42023          	sw	a5,928(s0)
1c006e2a:	b7d5                	j	1c006e0e <__rt_freq_init+0x20>

1c006e2c <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c006e2c:	100517b3          	p.fl1	a5,a0
1c006e30:	4769                	li	a4,26
1c006e32:	8f1d                	sub	a4,a4,a5
1c006e34:	4785                	li	a5,1
1c006e36:	04f76733          	p.max	a4,a4,a5
1c006e3a:	47a1                	li	a5,8
1c006e3c:	04f74733          	p.min	a4,a4,a5
1c006e40:	fff70693          	addi	a3,a4,-1
1c006e44:	00f55793          	srli	a5,a0,0xf
1c006e48:	00d797b3          	sll	a5,a5,a3
1c006e4c:	c19c                	sw	a5,0(a1)
1c006e4e:	07be                	slli	a5,a5,0xf
1c006e50:	c218                	sw	a4,0(a2)
1c006e52:	00d7d533          	srl	a0,a5,a3
1c006e56:	8082                	ret

1c006e58 <soc_eu_fcEventMask_setEvent>:
1c006e58:	47fd                	li	a5,31
1c006e5a:	4721                	li	a4,8
1c006e5c:	00f50463          	beq	a0,a5,1c006e64 <soc_eu_fcEventMask_setEvent+0xc>
1c006e60:	1501                	addi	a0,a0,-32
1c006e62:	4711                	li	a4,4
1c006e64:	1a1066b7          	lui	a3,0x1a106
1c006e68:	20e6f603          	p.lw	a2,a4(a3)
1c006e6c:	4785                	li	a5,1
1c006e6e:	00a79533          	sll	a0,a5,a0
1c006e72:	fff54513          	not	a0,a0
1c006e76:	8d71                	and	a0,a0,a2
1c006e78:	00a6e723          	p.sw	a0,a4(a3)
1c006e7c:	8082                	ret

1c006e7e <__rt_pmu_cluster_power_down>:
1c006e7e:	1c00b7b7          	lui	a5,0x1c00b
1c006e82:	56c7a783          	lw	a5,1388(a5) # 1c00b56c <__rt_platform>
1c006e86:	0817a363          	p.beqimm	a5,1,1c006f0c <__rt_pmu_cluster_power_down+0x8e>
1c006e8a:	1141                	addi	sp,sp,-16
1c006e8c:	1a1046b7          	lui	a3,0x1a104
1c006e90:	c606                	sw	ra,12(sp)
1c006e92:	c422                	sw	s0,8(sp)
1c006e94:	c226                	sw	s1,4(sp)
1c006e96:	c04a                	sw	s2,0(sp)
1c006e98:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa104050>
1c006e9c:	1c00c737          	lui	a4,0x1c00c
1c006ea0:	cf070713          	addi	a4,a4,-784 # 1c00bcf0 <SystemStateToSCUFastSeq>
1c006ea4:	00874783          	lbu	a5,8(a4)
1c006ea8:	8436                	mv	s0,a3
1c006eaa:	c0079933          	p.extractu	s2,a5,0,0
1c006eae:	04193963          	p.bneimm	s2,1,1c006f00 <__rt_pmu_cluster_power_down+0x82>
1c006eb2:	01069613          	slli	a2,a3,0x10
1c006eb6:	04064563          	bltz	a2,1c006f00 <__rt_pmu_cluster_power_down+0x82>
1c006eba:	c007b7b3          	p.bclr	a5,a5,0,0
1c006ebe:	c0a92433          	p.insert	s0,s2,0,10
1c006ec2:	1a1044b7          	lui	s1,0x1a104
1c006ec6:	00f70423          	sb	a5,8(a4)
1c006eca:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa104050>
1c006ece:	4585                	li	a1,1
1c006ed0:	02300513          	li	a0,35
1c006ed4:	e1dff0ef          	jal	ra,1c006cf0 <__rt_periph_wait_event>
1c006ed8:	4785                	li	a5,1
1c006eda:	00f4a623          	sw	a5,12(s1)
1c006ede:	c0302433          	p.insert	s0,zero,0,3
1c006ee2:	0684a823          	sw	s0,112(s1)
1c006ee6:	c0d92433          	p.insert	s0,s2,0,13
1c006eea:	0684a823          	sw	s0,112(s1)
1c006eee:	4422                	lw	s0,8(sp)
1c006ef0:	40b2                	lw	ra,12(sp)
1c006ef2:	4492                	lw	s1,4(sp)
1c006ef4:	4902                	lw	s2,0(sp)
1c006ef6:	4585                	li	a1,1
1c006ef8:	457d                	li	a0,31
1c006efa:	0141                	addi	sp,sp,16
1c006efc:	df5ff06f          	j	1c006cf0 <__rt_periph_wait_event>
1c006f00:	40b2                	lw	ra,12(sp)
1c006f02:	4422                	lw	s0,8(sp)
1c006f04:	4492                	lw	s1,4(sp)
1c006f06:	4902                	lw	s2,0(sp)
1c006f08:	0141                	addi	sp,sp,16
1c006f0a:	8082                	ret
1c006f0c:	8082                	ret

1c006f0e <SetFllFrequency>:
1c006f0e:	7179                	addi	sp,sp,-48
1c006f10:	d422                	sw	s0,40(sp)
1c006f12:	d226                	sw	s1,36(sp)
1c006f14:	1c00c437          	lui	s0,0x1c00c
1c006f18:	84aa                	mv	s1,a0
1c006f1a:	d606                	sw	ra,44(sp)
1c006f1c:	852e                	mv	a0,a1
1c006f1e:	cf040413          	addi	s0,s0,-784 # 1c00bcf0 <SystemStateToSCUFastSeq>
1c006f22:	0014be63          	p.bneimm	s1,1,1c006f3e <SetFllFrequency+0x30>
1c006f26:	00844783          	lbu	a5,8(s0)
1c006f2a:	c0079733          	p.extractu	a4,a5,0,0
1c006f2e:	08172763          	p.beqimm	a4,1,1c006fbc <SetFllFrequency+0xae>
1c006f32:	4501                	li	a0,0
1c006f34:	50b2                	lw	ra,44(sp)
1c006f36:	5422                	lw	s0,40(sp)
1c006f38:	5492                	lw	s1,36(sp)
1c006f3a:	6145                	addi	sp,sp,48
1c006f3c:	8082                	ret
1c006f3e:	ce2d                	beqz	a2,1c006fb8 <SetFllFrequency+0xaa>
1c006f40:	00844783          	lbu	a5,8(s0)
1c006f44:	03200713          	li	a4,50
1c006f48:	c21797b3          	p.extractu	a5,a5,1,1
1c006f4c:	97a2                	add	a5,a5,s0
1c006f4e:	00a7c783          	lbu	a5,10(a5)
1c006f52:	00e787db          	p.mac	a5,a5,a4,zero
1c006f56:	22678793          	addi	a5,a5,550
1c006f5a:	ecad                	bnez	s1,1c006fd4 <SetFllFrequency+0xc6>
1c006f5c:	0007a6b7          	lui	a3,0x7a
1c006f60:	eb237737          	lui	a4,0xeb237
1c006f64:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c006f68:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c006f6c:	42d78733          	p.mac	a4,a5,a3
1c006f70:	fcb761e3          	bltu	a4,a1,1c006f32 <SetFllFrequency+0x24>
1c006f74:	c62a                	sw	a0,12(sp)
1c006f76:	ca2ff0ef          	jal	ra,1c006418 <__rt_bridge_req_shutdown>
1c006f7a:	4532                	lw	a0,12(sp)
1c006f7c:	0870                	addi	a2,sp,28
1c006f7e:	082c                	addi	a1,sp,24
1c006f80:	eadff0ef          	jal	ra,1c006e2c <SetFllMultDivFactors>
1c006f84:	4762                	lw	a4,24(sp)
1c006f86:	800007b7          	lui	a5,0x80000
1c006f8a:	1a1006b7          	lui	a3,0x1a100
1c006f8e:	de0727b3          	p.insert	a5,a4,15,0
1c006f92:	4772                	lw	a4,28(sp)
1c006f94:	c7a727b3          	p.insert	a5,a4,3,26
1c006f98:	00449713          	slli	a4,s1,0x4
1c006f9c:	0711                	addi	a4,a4,4
1c006f9e:	00f6e723          	p.sw	a5,a4(a3)
1c006fa2:	00249793          	slli	a5,s1,0x2
1c006fa6:	943e                	add	s0,s0,a5
1c006fa8:	d008                	sw	a0,32(s0)
1c006faa:	c808                	sw	a0,16(s0)
1c006fac:	f4c1                	bnez	s1,1c006f34 <SetFllFrequency+0x26>
1c006fae:	c62a                	sw	a0,12(sp)
1c006fb0:	bd0ff0ef          	jal	ra,1c006380 <__rt_bridge_set_available>
1c006fb4:	4532                	lw	a0,12(sp)
1c006fb6:	bfbd                	j	1c006f34 <SetFllFrequency+0x26>
1c006fb8:	f0f1                	bnez	s1,1c006f7c <SetFllFrequency+0x6e>
1c006fba:	bf6d                	j	1c006f74 <SetFllFrequency+0x66>
1c006fbc:	d261                	beqz	a2,1c006f7c <SetFllFrequency+0x6e>
1c006fbe:	c21797b3          	p.extractu	a5,a5,1,1
1c006fc2:	97a2                	add	a5,a5,s0
1c006fc4:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c006fc8:	03200713          	li	a4,50
1c006fcc:	00e787db          	p.mac	a5,a5,a4,zero
1c006fd0:	22678793          	addi	a5,a5,550
1c006fd4:	0006b6b7          	lui	a3,0x6b
1c006fd8:	eaf5a737          	lui	a4,0xeaf5a
1c006fdc:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c006fe0:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c006fe4:	42d78733          	p.mac	a4,a5,a3
1c006fe8:	f8a77ae3          	bleu	a0,a4,1c006f7c <SetFllFrequency+0x6e>
1c006fec:	b799                	j	1c006f32 <SetFllFrequency+0x24>

1c006fee <InitOneFll>:
1c006fee:	7179                	addi	sp,sp,-48
1c006ff0:	00451713          	slli	a4,a0,0x4
1c006ff4:	ce4e                	sw	s3,28(sp)
1c006ff6:	1a1007b7          	lui	a5,0x1a100
1c006ffa:	00470993          	addi	s3,a4,4
1c006ffe:	d606                	sw	ra,44(sp)
1c007000:	d422                	sw	s0,40(sp)
1c007002:	d226                	sw	s1,36(sp)
1c007004:	d04a                	sw	s2,32(sp)
1c007006:	2137f783          	p.lw	a5,s3(a5)
1c00700a:	1c00c437          	lui	s0,0x1c00c
1c00700e:	cf040413          	addi	s0,s0,-784 # 1c00bcf0 <SystemStateToSCUFastSeq>
1c007012:	00251913          	slli	s2,a0,0x2
1c007016:	c585                	beqz	a1,1c00703e <InitOneFll+0x50>
1c007018:	c7a79733          	p.extractu	a4,a5,3,26
1c00701c:	1007d7b3          	p.exthz	a5,a5
1c007020:	07be                	slli	a5,a5,0xf
1c007022:	c701                	beqz	a4,1c00702a <InitOneFll+0x3c>
1c007024:	177d                	addi	a4,a4,-1
1c007026:	00e7d7b3          	srl	a5,a5,a4
1c00702a:	944a                	add	s0,s0,s2
1c00702c:	d01c                	sw	a5,32(s0)
1c00702e:	c81c                	sw	a5,16(s0)
1c007030:	50b2                	lw	ra,44(sp)
1c007032:	5422                	lw	s0,40(sp)
1c007034:	5492                	lw	s1,36(sp)
1c007036:	5902                	lw	s2,32(sp)
1c007038:	49f2                	lw	s3,28(sp)
1c00703a:	6145                	addi	sp,sp,48
1c00703c:	8082                	ret
1c00703e:	0007d363          	bgez	a5,1c007044 <InitOneFll+0x56>
1c007042:	c105                	beqz	a0,1c007062 <InitOneFll+0x74>
1c007044:	810047b7          	lui	a5,0x81004
1c007048:	1a1006b7          	lui	a3,0x1a100
1c00704c:	00870613          	addi	a2,a4,8
1c007050:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c007054:	00f6e623          	p.sw	a5,a2(a3)
1c007058:	014c04b7          	lui	s1,0x14c0
1c00705c:	0731                	addi	a4,a4,12
1c00705e:	0096e723          	p.sw	s1,a4(a3)
1c007062:	02faf537          	lui	a0,0x2faf
1c007066:	0070                	addi	a2,sp,12
1c007068:	002c                	addi	a1,sp,8
1c00706a:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c00706e:	dbfff0ef          	jal	ra,1c006e2c <SetFllMultDivFactors>
1c007072:	47a2                	lw	a5,8(sp)
1c007074:	c00004b7          	lui	s1,0xc0000
1c007078:	de07a4b3          	p.insert	s1,a5,15,0
1c00707c:	47b2                	lw	a5,12(sp)
1c00707e:	c7a7a4b3          	p.insert	s1,a5,3,26
1c007082:	1a1007b7          	lui	a5,0x1a100
1c007086:	0097e9a3          	p.sw	s1,s3(a5)
1c00708a:	944a                	add	s0,s0,s2
1c00708c:	d008                	sw	a0,32(s0)
1c00708e:	c808                	sw	a0,16(s0)
1c007090:	b745                	j	1c007030 <InitOneFll+0x42>

1c007092 <__rt_pmu_cluster_power_up>:
1c007092:	1141                	addi	sp,sp,-16
1c007094:	c226                	sw	s1,4(sp)
1c007096:	1c00c4b7          	lui	s1,0x1c00c
1c00709a:	c606                	sw	ra,12(sp)
1c00709c:	c422                	sw	s0,8(sp)
1c00709e:	c04a                	sw	s2,0(sp)
1c0070a0:	cf048793          	addi	a5,s1,-784 # 1c00bcf0 <SystemStateToSCUFastSeq>
1c0070a4:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffe8>
1c0070a8:	4501                	li	a0,0
1c0070aa:	c00797b3          	p.extractu	a5,a5,0,0
1c0070ae:	e785                	bnez	a5,1c0070d6 <__rt_pmu_cluster_power_up+0x44>
1c0070b0:	1c00b7b7          	lui	a5,0x1c00b
1c0070b4:	56c7a783          	lw	a5,1388(a5) # 1c00b56c <__rt_platform>
1c0070b8:	cf048493          	addi	s1,s1,-784
1c0070bc:	0217b363          	p.bneimm	a5,1,1c0070e2 <__rt_pmu_cluster_power_up+0x50>
1c0070c0:	1a1047b7          	lui	a5,0x1a104
1c0070c4:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fec>
1c0070c8:	0084c783          	lbu	a5,8(s1)
1c0070cc:	4505                	li	a0,1
1c0070ce:	c007c7b3          	p.bset	a5,a5,0,0
1c0070d2:	00f48423          	sb	a5,8(s1)
1c0070d6:	40b2                	lw	ra,12(sp)
1c0070d8:	4422                	lw	s0,8(sp)
1c0070da:	4492                	lw	s1,4(sp)
1c0070dc:	4902                	lw	s2,0(sp)
1c0070de:	0141                	addi	sp,sp,16
1c0070e0:	8082                	ret
1c0070e2:	1a104437          	lui	s0,0x1a104
1c0070e6:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa104050>
1c0070ea:	c0a417b3          	p.extractu	a5,s0,0,10
1c0070ee:	ef89                	bnez	a5,1c007108 <__rt_pmu_cluster_power_up+0x76>
1c0070f0:	4785                	li	a5,1
1c0070f2:	c0a7a433          	p.insert	s0,a5,0,10
1c0070f6:	1a1047b7          	lui	a5,0x1a104
1c0070fa:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa104050>
1c0070fe:	4585                	li	a1,1
1c007100:	02300513          	li	a0,35
1c007104:	bedff0ef          	jal	ra,1c006cf0 <__rt_periph_wait_event>
1c007108:	4785                	li	a5,1
1c00710a:	c037a433          	p.insert	s0,a5,0,3
1c00710e:	1a104937          	lui	s2,0x1a104
1c007112:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa104050>
1c007116:	4585                	li	a1,1
1c007118:	457d                	li	a0,31
1c00711a:	bd7ff0ef          	jal	ra,1c006cf0 <__rt_periph_wait_event>
1c00711e:	00092623          	sw	zero,12(s2)
1c007122:	c0d02433          	p.insert	s0,zero,0,13
1c007126:	06892823          	sw	s0,112(s2)
1c00712a:	c0a02433          	p.insert	s0,zero,0,10
1c00712e:	06892823          	sw	s0,112(s2)
1c007132:	4585                	li	a1,1
1c007134:	02300513          	li	a0,35
1c007138:	bb9ff0ef          	jal	ra,1c006cf0 <__rt_periph_wait_event>
1c00713c:	01c4c783          	lbu	a5,28(s1)
1c007140:	0207f793          	andi	a5,a5,32
1c007144:	e789                	bnez	a5,1c00714e <__rt_pmu_cluster_power_up+0xbc>
1c007146:	4581                	li	a1,0
1c007148:	4505                	li	a0,1
1c00714a:	ea5ff0ef          	jal	ra,1c006fee <InitOneFll>
1c00714e:	c0e44433          	p.bset	s0,s0,0,14
1c007152:	1a1047b7          	lui	a5,0x1a104
1c007156:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa104050>
1c00715a:	b7bd                	j	1c0070c8 <__rt_pmu_cluster_power_up+0x36>

1c00715c <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c00715c:	1141                	addi	sp,sp,-16
1c00715e:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c007160:	1c00c437          	lui	s0,0x1c00c
{
1c007164:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c007166:	cf040413          	addi	s0,s0,-784 # 1c00bcf0 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c00716a:	aaeff0ef          	jal	ra,1c006418 <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00716e:	01c44583          	lbu	a1,28(s0)
1c007172:	4501                	li	a0,0
1c007174:	c04595b3          	p.extractu	a1,a1,0,4
1c007178:	e77ff0ef          	jal	ra,1c006fee <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c00717c:	00844783          	lbu	a5,8(s0)
1c007180:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c007184:	0017b963          	p.bneimm	a5,1,1c007196 <InitFlls+0x3a>
1c007188:	01c44583          	lbu	a1,28(s0)
1c00718c:	4505                	li	a0,1
1c00718e:	c05595b3          	p.extractu	a1,a1,0,5
1c007192:	e5dff0ef          	jal	ra,1c006fee <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c007196:	4422                	lw	s0,8(sp)
1c007198:	40b2                	lw	ra,12(sp)
1c00719a:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c00719c:	9e4ff06f          	j	1c006380 <__rt_bridge_set_available>

1c0071a0 <__rt_pmu_init>:
1c0071a0:	1c00b7b7          	lui	a5,0x1c00b
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c0071a4:	56c7a783          	lw	a5,1388(a5) # 1c00b56c <__rt_platform>
1c0071a8:	0a17a963          	p.beqimm	a5,1,1c00725a <__rt_pmu_init+0xba>
{
1c0071ac:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c0071ae:	1c00c7b7          	lui	a5,0x1c00c
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c0071b2:	1a104637          	lui	a2,0x1a104
{
1c0071b6:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c0071b8:	3a07a423          	sw	zero,936(a5) # 1c00c3a8 <__rt_wakeup_use_fast>
1c0071bc:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa1040e0>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c0071c0:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c0071c4:	1c00c7b7          	lui	a5,0x1c00c
1c0071c8:	cf078793          	addi	a5,a5,-784 # 1c00bcf0 <SystemStateToSCUFastSeq>
1c0071cc:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c0071ce:	c2e696b3          	p.extractu	a3,a3,1,14
1c0071d2:	96be                	add	a3,a3,a5
1c0071d4:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa100008>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c0071d8:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c0071dc:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c0071e0:	c80716b3          	p.extractu	a3,a4,4,0
1c0071e4:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c0071e8:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c0071ec:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c0071f0:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c0071f4:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c0071f8:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c0071fc:	4705                	li	a4,1
1c0071fe:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c007202:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c007206:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c00720a:	f53ff0ef          	jal	ra,1c00715c <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c00720e:	457d                	li	a0,31
1c007210:	c49ff0ef          	jal	ra,1c006e58 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c007214:	02000513          	li	a0,32
1c007218:	c41ff0ef          	jal	ra,1c006e58 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c00721c:	02100513          	li	a0,33
1c007220:	c39ff0ef          	jal	ra,1c006e58 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c007224:	02200513          	li	a0,34
1c007228:	c31ff0ef          	jal	ra,1c006e58 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c00722c:	02300513          	li	a0,35
1c007230:	c29ff0ef          	jal	ra,1c006e58 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c007234:	02400513          	li	a0,36
1c007238:	c21ff0ef          	jal	ra,1c006e58 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c00723c:	02500513          	li	a0,37
1c007240:	c19ff0ef          	jal	ra,1c006e58 <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c007244:	1a1077b7          	lui	a5,0x1a107
1c007248:	471d                	li	a4,7
1c00724a:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fec>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c00724e:	4761                	li	a4,24
1c007250:	00e7a823          	sw	a4,16(a5)
}
1c007254:	40b2                	lw	ra,12(sp)
1c007256:	0141                	addi	sp,sp,16
1c007258:	8082                	ret
1c00725a:	8082                	ret

1c00725c <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c00725c:	00251793          	slli	a5,a0,0x2
1c007260:	1c00c537          	lui	a0,0x1c00c
1c007264:	cf050513          	addi	a0,a0,-784 # 1c00bcf0 <SystemStateToSCUFastSeq>
1c007268:	953e                	add	a0,a0,a5
}
1c00726a:	5108                	lw	a0,32(a0)
1c00726c:	8082                	ret

1c00726e <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c00726e:	8082                	ret

1c007270 <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c007270:	8082                	ret

1c007272 <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c007272:	4601                	li	a2,0
1c007274:	c9bff06f          	j	1c006f0e <SetFllFrequency>

1c007278 <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c007278:	04050713          	addi	a4,a0,64
1c00727c:	00400793          	li	a5,4
1c007280:	01671613          	slli	a2,a4,0x16
1c007284:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c007288:	1c00c6b7          	lui	a3,0x1c00c
1c00728c:	97b2                	add	a5,a5,a2
1c00728e:	3d868693          	addi	a3,a3,984 # 1c00c3d8 <_bss_end>
1c007292:	01c00713          	li	a4,28
1c007296:	8f95                	sub	a5,a5,a3
1c007298:	00f685b3          	add	a1,a3,a5
1c00729c:	02e04963          	bgtz	a4,1c0072ce <__rt_init_cluster_data+0x56>
1c0072a0:	1c00c7b7          	lui	a5,0x1c00c
1c0072a4:	02800713          	li	a4,40
1c0072a8:	3b078793          	addi	a5,a5,944 # 1c00c3b0 <__rt_fc_cluster_data>
1c0072ac:	42e507b3          	p.mac	a5,a0,a4
1c0072b0:	00201737          	lui	a4,0x201
1c0072b4:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0072b8:	9732                	add	a4,a4,a2
1c0072ba:	cb98                	sw	a4,16(a5)
1c0072bc:	00400713          	li	a4,4
1c0072c0:	e6c73733          	p.bclr	a4,a4,19,12
1c0072c4:	9732                	add	a4,a4,a2
1c0072c6:	0007a423          	sw	zero,8(a5)
1c0072ca:	cbd8                	sw	a4,20(a5)
1c0072cc:	8082                	ret
1c0072ce:	0046a80b          	p.lw	a6,4(a3!)
1c0072d2:	1771                	addi	a4,a4,-4
1c0072d4:	0105a023          	sw	a6,0(a1)
1c0072d8:	b7c1                	j	1c007298 <__rt_init_cluster_data+0x20>

1c0072da <__rt_cluster_init>:
1c0072da:	1c00c537          	lui	a0,0x1c00c
1c0072de:	1141                	addi	sp,sp,-16
1c0072e0:	02800613          	li	a2,40
1c0072e4:	4581                	li	a1,0
1c0072e6:	3b050513          	addi	a0,a0,944 # 1c00c3b0 <__rt_fc_cluster_data>
1c0072ea:	c606                	sw	ra,12(sp)
1c0072ec:	31a020ef          	jal	ra,1c009606 <memset>
1c0072f0:	1c00b5b7          	lui	a1,0x1c00b
1c0072f4:	95458593          	addi	a1,a1,-1708 # 1c00a954 <__rt_dma_2d>
1c0072f8:	4525                	li	a0,9
1c0072fa:	c79fe0ef          	jal	ra,1c005f72 <rt_irq_set_handler>
1c0072fe:	1c0025b7          	lui	a1,0x1c002
1c007302:	ef258593          	addi	a1,a1,-270 # 1c001ef2 <__rt_remote_enqueue_event>
1c007306:	4505                	li	a0,1
1c007308:	c6bfe0ef          	jal	ra,1c005f72 <rt_irq_set_handler>
1c00730c:	4789                	li	a5,2
1c00730e:	00204737          	lui	a4,0x204
1c007312:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c007316:	00f72423          	sw	a5,8(a4)
1c00731a:	1c0025b7          	lui	a1,0x1c002
1c00731e:	eba58593          	addi	a1,a1,-326 # 1c001eba <__rt_bridge_enqueue_event>
1c007322:	4511                	li	a0,4
1c007324:	c4ffe0ef          	jal	ra,1c005f72 <rt_irq_set_handler>
1c007328:	47c1                	li	a5,16
1c00732a:	00204737          	lui	a4,0x204
1c00732e:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c007332:	00f72423          	sw	a5,8(a4)
1c007336:	40b2                	lw	ra,12(sp)
1c007338:	4501                	li	a0,0
1c00733a:	0141                	addi	sp,sp,16
1c00733c:	8082                	ret

1c00733e <__rt_cluster_mount_step>:
{
1c00733e:	7179                	addi	sp,sp,-48
1c007340:	ce4e                	sw	s3,28(sp)
1c007342:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c007344:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c007348:	00400993          	li	s3,4
1c00734c:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c007350:	d422                	sw	s0,40(sp)
1c007352:	d606                	sw	ra,44(sp)
1c007354:	d226                	sw	s1,36(sp)
1c007356:	d04a                	sw	s2,32(sp)
1c007358:	ca56                	sw	s5,20(sp)
1c00735a:	842a                	mv	s0,a0
1c00735c:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c007360:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c007364:	4c5c                	lw	a5,28(s0)
1c007366:	0217ad63          	p.beqimm	a5,1,1c0073a0 <__rt_cluster_mount_step+0x62>
1c00736a:	0c27a663          	p.beqimm	a5,2,1c007436 <__rt_cluster_mount_step+0xf8>
1c00736e:	e3e1                	bnez	a5,1c00742e <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c007370:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c007372:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c007376:	eb01                	bnez	a4,1c007386 <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c007378:	5048                	lw	a0,36(s0)
1c00737a:	006c                	addi	a1,sp,12
    int pending = 0;
1c00737c:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00737e:	d15ff0ef          	jal	ra,1c007092 <__rt_pmu_cluster_power_up>
    return pending;
1c007382:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c007384:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c007386:	4c58                	lw	a4,28(s0)
1c007388:	0705                	addi	a4,a4,1
1c00738a:	cc58                	sw	a4,28(s0)
  while(!end)
1c00738c:	dfe1                	beqz	a5,1c007364 <__rt_cluster_mount_step+0x26>
}
1c00738e:	50b2                	lw	ra,44(sp)
1c007390:	5422                	lw	s0,40(sp)
1c007392:	5492                	lw	s1,36(sp)
1c007394:	5902                	lw	s2,32(sp)
1c007396:	49f2                	lw	s3,28(sp)
1c007398:	4a62                	lw	s4,24(sp)
1c00739a:	4ad2                	lw	s5,20(sp)
1c00739c:	6145                	addi	sp,sp,48
1c00739e:	8082                	ret
1c0073a0:	02042a83          	lw	s5,32(s0)
1c0073a4:	040a8493          	addi	s1,s5,64
1c0073a8:	04da                	slli	s1,s1,0x16
1c0073aa:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c0073ae:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c0073b2:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c0073b6:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c0073ba:	100007b7          	lui	a5,0x10000
1c0073be:	0007ae23          	sw	zero,28(a5) # 1000001c <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c0073c2:	1c00b7b7          	lui	a5,0x1c00b
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c0073c6:	56c7a783          	lw	a5,1388(a5) # 1c00b56c <__rt_platform>
1c0073ca:	0017af63          	p.beqimm	a5,1,1c0073e8 <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c0073ce:	4505                	li	a0,1
1c0073d0:	e8dff0ef          	jal	ra,1c00725c <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c0073d4:	1c00c7b7          	lui	a5,0x1c00c
1c0073d8:	3a078793          	addi	a5,a5,928 # 1c00c3a0 <__rt_freq_domains>
1c0073dc:	43cc                	lw	a1,4(a5)
      if (freq)
1c0073de:	c9b1                	beqz	a1,1c007432 <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c0073e0:	4601                	li	a2,0
1c0073e2:	4505                	li	a0,1
1c0073e4:	9c1ff0ef          	jal	ra,1c006da4 <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c0073e8:	00200937          	lui	s2,0x200
1c0073ec:	01248733          	add	a4,s1,s2
1c0073f0:	4785                	li	a5,1
1c0073f2:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c0073f6:	8556                	mv	a0,s5
1c0073f8:	e81ff0ef          	jal	ra,1c007278 <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c0073fc:	8556                	mv	a0,s5
1c0073fe:	c0aff0ef          	jal	ra,1c006808 <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c007402:	002017b7          	lui	a5,0x201
1c007406:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00740a:	577d                	li	a4,-1
1c00740c:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c007410:	00e4e7a3          	p.sw	a4,a5(s1)
1c007414:	9926                	add	s2,s2,s1
1c007416:	008250fb          	lp.setupi	x1,8,1c00741e <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00741a:	0149222b          	p.sw	s4,4(s2!)
1c00741e:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c007420:	002007b7          	lui	a5,0x200
1c007424:	07a1                	addi	a5,a5,8
1c007426:	0ff00713          	li	a4,255
1c00742a:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c00742e:	4781                	li	a5,0
1c007430:	bf99                	j	1c007386 <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c007432:	c3c8                	sw	a0,4(a5)
1c007434:	bf55                	j	1c0073e8 <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c007436:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c007438:	5bd8                	lw	a4,52(a5)
1c00743a:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c00743c:	57d8                	lw	a4,44(a5)
1c00743e:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c007440:	5b98                	lw	a4,48(a5)
1c007442:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c007444:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c007448:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c00744a:	01c02603          	lw	a2,28(zero) # 1c <_l1_preload_size>
1c00744e:	01c00693          	li	a3,28
  event->next = NULL;
1c007452:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c007456:	c611                	beqz	a2,1c007462 <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c007458:	42d8                	lw	a4,4(a3)
1c00745a:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c00745c:	c2dc                	sw	a5,4(a3)
        end = 1;
1c00745e:	4785                	li	a5,1
1c007460:	b71d                	j	1c007386 <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c007462:	00f02e23          	sw	a5,28(zero) # 1c <_l1_preload_size>
1c007466:	bfdd                	j	1c00745c <__rt_cluster_mount_step+0x11e>

1c007468 <pi_cluster_conf_init>:
  conf->id = 0;
1c007468:	00052223          	sw	zero,4(a0)
}
1c00746c:	8082                	ret

1c00746e <pi_cluster_open>:
{
1c00746e:	1101                	addi	sp,sp,-32
1c007470:	ce06                	sw	ra,28(sp)
1c007472:	cc22                	sw	s0,24(sp)
1c007474:	ca26                	sw	s1,20(sp)
1c007476:	c84a                	sw	s2,16(sp)
1c007478:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00747a:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c00747e:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c007482:	1c00c4b7          	lui	s1,0x1c00c
1c007486:	02800793          	li	a5,40
  int cid = conf->id;
1c00748a:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00748e:	3b048493          	addi	s1,s1,944 # 1c00c3b0 <__rt_fc_cluster_data>
1c007492:	42f704b3          	p.mac	s1,a4,a5
1c007496:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c007498:	850ff0ef          	jal	ra,1c0064e8 <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00749c:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0074a0:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0074a4:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c0074a8:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c0074aa:	04e79563          	bne	a5,a4,1c0074f4 <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c0074ae:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c0074b0:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c0074b4:	d0c8                	sw	a0,36(s1)
1c0074b6:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c0074b8:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c0074ba:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c0074be:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c0074c0:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c0074c2:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c0074c4:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c0074c6:	1c0077b7          	lui	a5,0x1c007
1c0074ca:	33e78793          	addi	a5,a5,830 # 1c00733e <__rt_cluster_mount_step>
1c0074ce:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c0074d0:	4785                	li	a5,1
1c0074d2:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c0074d4:	8526                	mv	a0,s1
1c0074d6:	e69ff0ef          	jal	ra,1c00733e <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c0074da:	8522                	mv	a0,s0
1c0074dc:	95cff0ef          	jal	ra,1c006638 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c0074e0:	30091073          	csrw	mstatus,s2
}
1c0074e4:	40f2                	lw	ra,28(sp)
1c0074e6:	4462                	lw	s0,24(sp)
1c0074e8:	44d2                	lw	s1,20(sp)
1c0074ea:	4942                	lw	s2,16(sp)
1c0074ec:	49b2                	lw	s3,12(sp)
1c0074ee:	4501                	li	a0,0
1c0074f0:	6105                	addi	sp,sp,32
1c0074f2:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c0074f4:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c0074f8:	8526                	mv	a0,s1
1c0074fa:	d7fff0ef          	jal	ra,1c007278 <__rt_init_cluster_data>
1c0074fe:	04048513          	addi	a0,s1,64
1c007502:	002017b7          	lui	a5,0x201
1c007506:	055a                	slli	a0,a0,0x16
1c007508:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00750c:	577d                	li	a4,-1
1c00750e:	00e567a3          	p.sw	a4,a5(a0)
1c007512:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c007516:	1c000737          	lui	a4,0x1c000
1c00751a:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c00751e:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c007522:	97aa                	add	a5,a5,a0
1c007524:	ce073733          	p.bclr	a4,a4,7,0
1c007528:	007250fb          	lp.setupi	x1,7,1c007530 <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00752c:	00e7a22b          	p.sw	a4,4(a5!)
1c007530:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c007532:	002007b7          	lui	a5,0x200
1c007536:	07a1                	addi	a5,a5,8
1c007538:	577d                	li	a4,-1
1c00753a:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c00753e:	8522                	mv	a0,s0
1c007540:	870ff0ef          	jal	ra,1c0065b0 <rt_event_push>
1c007544:	bf59                	j	1c0074da <pi_cluster_open+0x6c>

1c007546 <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c007546:	451c                	lw	a5,8(a0)
{
1c007548:	1101                	addi	sp,sp,-32
1c00754a:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00754c:	5380                	lw	s0,32(a5)
1c00754e:	1c00b7b7          	lui	a5,0x1c00b
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c007552:	56c7a783          	lw	a5,1388(a5) # 1c00b56c <__rt_platform>
{
1c007556:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c007558:	0017a563          	p.beqimm	a5,1,1c007562 <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c00755c:	4505                	li	a0,1
1c00755e:	d11ff0ef          	jal	ra,1c00726e <__rt_fll_deinit>
    int pending = 0;
1c007562:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c007564:	e409                	bnez	s0,1c00756e <pi_cluster_close+0x28>
1c007566:	006c                	addi	a1,sp,12
1c007568:	4501                	li	a0,0
1c00756a:	915ff0ef          	jal	ra,1c006e7e <__rt_pmu_cluster_power_down>
}
1c00756e:	40f2                	lw	ra,28(sp)
1c007570:	4462                	lw	s0,24(sp)
1c007572:	4501                	li	a0,0
1c007574:	6105                	addi	sp,sp,32
1c007576:	8082                	ret

1c007578 <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c007578:	100006b7          	lui	a3,0x10000
1c00757c:	01c68693          	addi	a3,a3,28 # 1000001c <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c007580:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007584:	4709                	li	a4,2
1c007586:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c00758a:	4190                	lw	a2,0(a1)
1c00758c:	05f62063          	p.beqimm	a2,-1,1c0075cc <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c007590:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c007594:	1c00c7b7          	lui	a5,0x1c00c
  return (hart_id >> 5) & 0x3f;
1c007598:	8715                	srai	a4,a4,0x5
1c00759a:	f2673733          	p.bclr	a4,a4,25,6
1c00759e:	02800613          	li	a2,40
1c0075a2:	3b078793          	addi	a5,a5,944 # 1c00c3b0 <__rt_fc_cluster_data>
1c0075a6:	42c707b3          	p.mac	a5,a4,a2
1c0075aa:	4609                	li	a2,2
1c0075ac:	00204737          	lui	a4,0x204
1c0075b0:	43cc                	lw	a1,4(a5)
1c0075b2:	e585                	bnez	a1,1c0075da <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c0075b4:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c0075b6:	1b2017b7          	lui	a5,0x1b201
1c0075ba:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ff9e4>
  *(volatile signed int *)addr = value;
1c0075be:	0006a023          	sw	zero,0(a3)
1c0075c2:	002047b7          	lui	a5,0x204
1c0075c6:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c0075ca:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0075cc:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0075d0:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0075d4:	00e7a223          	sw	a4,4(a5)
1c0075d8:	bf4d                	j	1c00758a <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0075da:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0075de:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0075e2:	00c72223          	sw	a2,4(a4)
1c0075e6:	b7e9                	j	1c0075b0 <__rt_cluster_push_fc_event+0x38>

1c0075e8 <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c0075e8:	1c0075b7          	lui	a1,0x1c007
{
1c0075ec:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c0075ee:	4601                	li	a2,0
1c0075f0:	2da58593          	addi	a1,a1,730 # 1c0072da <__rt_cluster_init>
1c0075f4:	4501                	li	a0,0
{
1c0075f6:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c0075f8:	ae7fe0ef          	jal	ra,1c0060de <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c0075fc:	c10d                	beqz	a0,1c00761e <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0075fe:	01402673          	csrr	a2,uhartid
1c007602:	1c00b537          	lui	a0,0x1c00b
  return (hart_id >> 5) & 0x3f;
1c007606:	40565593          	srai	a1,a2,0x5
1c00760a:	f265b5b3          	p.bclr	a1,a1,25,6
1c00760e:	f4563633          	p.bclr	a2,a2,26,5
1c007612:	1b450513          	addi	a0,a0,436 # 1c00b1b4 <__himax_reg_init+0x1d0>
1c007616:	2f6020ef          	jal	ra,1c00990c <printf>
1c00761a:	276020ef          	jal	ra,1c009890 <abort>
}
1c00761e:	40b2                	lw	ra,12(sp)
1c007620:	0141                	addi	sp,sp,16
1c007622:	8082                	ret

1c007624 <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c007624:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c007626:	45b1                	li	a1,12
1c007628:	4505                	li	a0,1
{
1c00762a:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00762c:	918ff0ef          	jal	ra,1c006744 <rt_alloc>
1c007630:	1c00c7b7          	lui	a5,0x1c00c
1c007634:	36a7a423          	sw	a0,872(a5) # 1c00c368 <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c007638:	e10d                	bnez	a0,1c00765a <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00763a:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c00763e:	1c00b537          	lui	a0,0x1c00b
  return (hart_id >> 5) & 0x3f;
1c007642:	40565593          	srai	a1,a2,0x5
1c007646:	f265b5b3          	p.bclr	a1,a1,25,6
1c00764a:	f4563633          	p.bclr	a2,a2,26,5
1c00764e:	1fc50513          	addi	a0,a0,508 # 1c00b1fc <__himax_reg_init+0x218>
1c007652:	2ba020ef          	jal	ra,1c00990c <printf>
1c007656:	23a020ef          	jal	ra,1c009890 <abort>
    return;
  }
}
1c00765a:	40b2                	lw	ra,12(sp)
1c00765c:	0141                	addi	sp,sp,16
1c00765e:	8082                	ret

1c007660 <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c007660:	7139                	addi	sp,sp,-64
1c007662:	d84a                	sw	s2,48(sp)
1c007664:	4906                	lw	s2,64(sp)
1c007666:	dc22                	sw	s0,56(sp)
1c007668:	842e                	mv	s0,a1
1c00766a:	de06                	sw	ra,60(sp)
1c00766c:	da26                	sw	s1,52(sp)
1c00766e:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007670:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c007674:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c007676:	02091163          	bnez	s2,1c007698 <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c00767a:	ce32                	sw	a2,28(sp)
1c00767c:	cc36                	sw	a3,24(sp)
1c00767e:	ca3a                	sw	a4,20(sp)
1c007680:	c83e                	sw	a5,16(sp)
1c007682:	c642                	sw	a6,12(sp)
1c007684:	c446                	sw	a7,8(sp)
1c007686:	e63fe0ef          	jal	ra,1c0064e8 <__rt_wait_event_prepare_blocking>
1c00768a:	48a2                	lw	a7,8(sp)
1c00768c:	4832                	lw	a6,12(sp)
1c00768e:	47c2                	lw	a5,16(sp)
1c007690:	4752                	lw	a4,20(sp)
1c007692:	46e2                	lw	a3,24(sp)
1c007694:	4672                	lw	a2,28(sp)
1c007696:	84aa                	mv	s1,a0
    task->entry = entry;
1c007698:	1c00c5b7          	lui	a1,0x1c00c
1c00769c:	1d458513          	addi	a0,a1,468 # 1c00c1d4 <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c0076a0:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c0076a2:	1c00c7b7          	lui	a5,0x1c00c
1c0076a6:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c0076a8:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c0076aa:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c0076ac:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c0076b0:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c0076b4:	3687a503          	lw	a0,872(a5) # 1c00c368 <__rt_fc_cluster_device>
1c0076b8:	47b1                	li	a5,12
1c0076ba:	8626                	mv	a2,s1
1c0076bc:	42f40533          	p.mac	a0,s0,a5
1c0076c0:	1d458593          	addi	a1,a1,468
1c0076c4:	2061                	jal	1c00774c <pi_cluster_send_task_to_cl_async>
1c0076c6:	842a                	mv	s0,a0
1c0076c8:	cd01                	beqz	a0,1c0076e0 <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c0076ca:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c0076ce:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c0076d0:	8522                	mv	a0,s0
1c0076d2:	50f2                	lw	ra,60(sp)
1c0076d4:	5462                	lw	s0,56(sp)
1c0076d6:	54d2                	lw	s1,52(sp)
1c0076d8:	5942                	lw	s2,48(sp)
1c0076da:	59b2                	lw	s3,44(sp)
1c0076dc:	6121                	addi	sp,sp,64
1c0076de:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c0076e0:	00091563          	bnez	s2,1c0076ea <rt_cluster_call+0x8a>
1c0076e4:	8526                	mv	a0,s1
1c0076e6:	f53fe0ef          	jal	ra,1c006638 <__rt_wait_event>
1c0076ea:	30099073          	csrw	mstatus,s3
  return 0;
1c0076ee:	b7cd                	j	1c0076d0 <rt_cluster_call+0x70>

1c0076f0 <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c0076f0:	7139                	addi	sp,sp,-64
1c0076f2:	dc22                	sw	s0,56(sp)
1c0076f4:	da26                	sw	s1,52(sp)
1c0076f6:	d84a                	sw	s2,48(sp)
1c0076f8:	4431                	li	s0,12
1c0076fa:	1c00c4b7          	lui	s1,0x1c00c
1c0076fe:	de06                	sw	ra,60(sp)
1c007700:	d64e                	sw	s3,44(sp)
1c007702:	8936                	mv	s2,a3
1c007704:	02858433          	mul	s0,a1,s0
1c007708:	36848493          	addi	s1,s1,872 # 1c00c368 <__rt_fc_cluster_device>
  if (mount)
1c00770c:	c91d                	beqz	a0,1c007742 <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c00770e:	0028                	addi	a0,sp,8
1c007710:	89ae                	mv	s3,a1
1c007712:	d57ff0ef          	jal	ra,1c007468 <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c007716:	4088                	lw	a0,0(s1)
1c007718:	002c                	addi	a1,sp,8
1c00771a:	9522                	add	a0,a0,s0
1c00771c:	853fe0ef          	jal	ra,1c005f6e <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c007720:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c007722:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c007724:	9522                	add	a0,a0,s0
1c007726:	d49ff0ef          	jal	ra,1c00746e <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c00772a:	00090563          	beqz	s2,1c007734 <rt_cluster_mount+0x44>
    rt_event_push(event);
1c00772e:	854a                	mv	a0,s2
1c007730:	e81fe0ef          	jal	ra,1c0065b0 <rt_event_push>
}
1c007734:	50f2                	lw	ra,60(sp)
1c007736:	5462                	lw	s0,56(sp)
1c007738:	54d2                	lw	s1,52(sp)
1c00773a:	5942                	lw	s2,48(sp)
1c00773c:	59b2                	lw	s3,44(sp)
1c00773e:	6121                	addi	sp,sp,64
1c007740:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c007742:	4088                	lw	a0,0(s1)
1c007744:	9522                	add	a0,a0,s0
1c007746:	e01ff0ef          	jal	ra,1c007546 <pi_cluster_close>
1c00774a:	b7c5                	j	1c00772a <rt_cluster_mount+0x3a>

1c00774c <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c00774c:	1101                	addi	sp,sp,-32
1c00774e:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c007750:	4504                	lw	s1,8(a0)
{
1c007752:	cc22                	sw	s0,24(sp)
1c007754:	c256                	sw	s5,4(sp)
1c007756:	842e                	mv	s0,a1
1c007758:	8ab2                	mv	s5,a2
1c00775a:	ce06                	sw	ra,28(sp)
1c00775c:	c84a                	sw	s2,16(sp)
1c00775e:	c64e                	sw	s3,12(sp)
1c007760:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007762:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c007766:	4785                	li	a5,1
  task->done = 0;
1c007768:	00060a23          	sb	zero,20(a2)
1c00776c:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c00776e:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c007770:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c007774:	e399                	bnez	a5,1c00777a <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c007776:	47a1                	li	a5,8
1c007778:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c00777a:	441c                	lw	a5,8(s0)
1c00777c:	ef85                	bnez	a5,1c0077b4 <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c00777e:	445c                	lw	a5,12(s0)
1c007780:	eb81                	bnez	a5,1c007790 <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c007782:	6785                	lui	a5,0x1
1c007784:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c007788:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c00778a:	40000793          	li	a5,1024
1c00778e:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c007790:	481c                	lw	a5,16(s0)
1c007792:	00c42903          	lw	s2,12(s0)
1c007796:	e399                	bnez	a5,1c00779c <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c007798:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00779c:	485c                	lw	a5,20(s0)
1c00779e:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c0077a0:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c0077a2:	17fd                	addi	a5,a5,-1
1c0077a4:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c0077a8:	c9b5                	beqz	a1,1c00781c <pi_cluster_send_task_to_cl_async+0xd0>
1c0077aa:	44d0                	lw	a2,12(s1)
1c0077ac:	05261f63          	bne	a2,s2,1c00780a <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c0077b0:	449c                	lw	a5,8(s1)
1c0077b2:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c0077b4:	4858                	lw	a4,20(s0)
1c0077b6:	4785                	li	a5,1
  task->completion_callback = async_task;
1c0077b8:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c0077bc:	00e797b3          	sll	a5,a5,a4
1c0077c0:	17fd                	addi	a5,a5,-1
1c0077c2:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c0077c4:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c0077c8:	0089a783          	lw	a5,8(s3)
1c0077cc:	cbb5                	beqz	a5,1c007840 <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c0077ce:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c0077d0:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c0077d4:	0009a783          	lw	a5,0(s3)
1c0077d8:	e399                	bnez	a5,1c0077de <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c0077da:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c0077de:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c0077e0:	00201737          	lui	a4,0x201
1c0077e4:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c0077e8:	04078793          	addi	a5,a5,64
1c0077ec:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c0077ee:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c0077f2:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c0077f6:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c0077f8:	40f2                	lw	ra,28(sp)
1c0077fa:	4462                	lw	s0,24(sp)
1c0077fc:	44d2                	lw	s1,20(sp)
1c0077fe:	4942                	lw	s2,16(sp)
1c007800:	49b2                	lw	s3,12(sp)
1c007802:	4a22                	lw	s4,8(sp)
1c007804:	4a92                	lw	s5,4(sp)
1c007806:	6105                	addi	sp,sp,32
1c007808:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c00780a:	509c                	lw	a5,32(s1)
1c00780c:	1c00c737          	lui	a4,0x1c00c
1c007810:	39072503          	lw	a0,912(a4) # 1c00c390 <__rt_alloc_l1>
1c007814:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c007816:	953e                	add	a0,a0,a5
1c007818:	ee1fe0ef          	jal	ra,1c0066f8 <rt_user_free>
1c00781c:	509c                	lw	a5,32(s1)
1c00781e:	1c00c737          	lui	a4,0x1c00c
1c007822:	39072503          	lw	a0,912(a4) # 1c00c390 <__rt_alloc_l1>
1c007826:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c007828:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c00782c:	85ca                	mv	a1,s2
1c00782e:	953e                	add	a0,a0,a5
1c007830:	e81fe0ef          	jal	ra,1c0066b0 <rt_user_alloc>
1c007834:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c007836:	fd2d                	bnez	a0,1c0077b0 <pi_cluster_send_task_to_cl_async+0x64>
1c007838:	300a1073          	csrw	mstatus,s4
  return -1;
1c00783c:	557d                	li	a0,-1
1c00783e:	bf6d                	j	1c0077f8 <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c007840:	0089a223          	sw	s0,4(s3)
1c007844:	b771                	j	1c0077d0 <pi_cluster_send_task_to_cl_async+0x84>

1c007846 <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c007846:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c007848:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00784a:	860a                	mv	a2,sp
{
1c00784c:	c522                	sw	s0,136(sp)
1c00784e:	c706                	sw	ra,140(sp)
1c007850:	c326                	sw	s1,132(sp)
1c007852:	c14a                	sw	s2,128(sp)
1c007854:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c007856:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c007858:	d43e                	sw	a5,40(sp)
1c00785a:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00785e:	eefff0ef          	jal	ra,1c00774c <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c007862:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c007864:	e509                	bnez	a0,1c00786e <pi_cluster_send_task_to_cl+0x28>
1c007866:	842a                	mv	s0,a0
  while(!task->done)
1c007868:	01410783          	lb	a5,20(sp)
1c00786c:	cb81                	beqz	a5,1c00787c <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c00786e:	8522                	mv	a0,s0
1c007870:	40ba                	lw	ra,140(sp)
1c007872:	442a                	lw	s0,136(sp)
1c007874:	449a                	lw	s1,132(sp)
1c007876:	490a                	lw	s2,128(sp)
1c007878:	6149                	addi	sp,sp,144
1c00787a:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00787c:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007880:	4585                	li	a1,1
1c007882:	01c00513          	li	a0,28
1c007886:	d4ffe0ef          	jal	ra,1c0065d4 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00788a:	30091073          	csrw	mstatus,s2
1c00788e:	bfe9                	j	1c007868 <pi_cluster_send_task_to_cl+0x22>

1c007890 <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007890:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c007894:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c007898:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00789c:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c0078a0:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c0078a2:	953e                	add	a0,a0,a5
1c0078a4:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c0078a6:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c0078a8:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c0078aa:	478d                	li	a5,3
1c0078ac:	00e797b3          	sll	a5,a5,a4
1c0078b0:	fff7c793          	not	a5,a5
1c0078b4:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c0078b6:	00e595b3          	sll	a1,a1,a4
1c0078ba:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c0078bc:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c0078be:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c0078c2:	8082                	ret

1c0078c4 <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c0078c4:	4114                	lw	a3,0(a0)
1c0078c6:	1a1047b7          	lui	a5,0x1a104
1c0078ca:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa104120>
1c0078ce:	c314                	sw	a3,0(a4)
1c0078d0:	4154                	lw	a3,4(a0)
1c0078d2:	14478713          	addi	a4,a5,324
1c0078d6:	14878793          	addi	a5,a5,328
1c0078da:	c314                	sw	a3,0(a4)
1c0078dc:	4518                	lw	a4,8(a0)
1c0078de:	c398                	sw	a4,0(a5)
  }  
}
1c0078e0:	8082                	ret

1c0078e2 <pi_cpi_conf_init>:
1c0078e2:	20000793          	li	a5,512
1c0078e6:	00f51223          	sh	a5,4(a0)
1c0078ea:	8082                	ret

1c0078ec <pi_cpi_open>:
1c0078ec:	414c                	lw	a1,4(a0)
1c0078ee:	1c00c737          	lui	a4,0x1c00c
1c0078f2:	20070713          	addi	a4,a4,512 # 1c00c200 <__rt_cpi>
1c0078f6:	0045c783          	lbu	a5,4(a1)
1c0078fa:	00579693          	slli	a3,a5,0x5
1c0078fe:	96ba                	add	a3,a3,a4
1c007900:	c514                	sw	a3,8(a0)
1c007902:	0796                	slli	a5,a5,0x5
1c007904:	4525                	li	a0,9
1c007906:	00a767a3          	p.sw	a0,a5(a4)
1c00790a:	42d8                	lw	a4,4(a3)
1c00790c:	00170793          	addi	a5,a4,1
1c007910:	c2dc                	sw	a5,4(a3)
1c007912:	1a1027b7          	lui	a5,0x1a102
1c007916:	48078513          	addi	a0,a5,1152 # 1a102480 <__l1_end+0xa102460>
1c00791a:	c688                	sw	a0,8(a3)
1c00791c:	0055c583          	lbu	a1,5(a1)
1c007920:	00b68e23          	sb	a1,28(a3)
1c007924:	e71d                	bnez	a4,1c007952 <pi_cpi_open+0x66>
1c007926:	1a106637          	lui	a2,0x1a106
1c00792a:	00862703          	lw	a4,8(a2) # 1a106008 <__l1_end+0xa105fe8>
1c00792e:	c1273733          	p.bclr	a4,a4,0,18
1c007932:	00e62423          	sw	a4,8(a2)
1c007936:	78078793          	addi	a5,a5,1920
1c00793a:	4398                	lw	a4,0(a5)
1c00793c:	c0974733          	p.bset	a4,a4,0,9
1c007940:	c398                	sw	a4,0(a5)
1c007942:	1c0027b7          	lui	a5,0x1c002
1c007946:	24678793          	addi	a5,a5,582 # 1c002246 <__rt_udma_handle_copy>
1c00794a:	28f02623          	sw	a5,652(zero) # 28c <__cluster_text_size+0x80>
1c00794e:	26d02823          	sw	a3,624(zero) # 270 <__cluster_text_size+0x64>
1c007952:	4501                	li	a0,0
1c007954:	8082                	ret

1c007956 <pi_cpi_close>:
1c007956:	4514                	lw	a3,8(a0)
1c007958:	42d8                	lw	a4,4(a3)
1c00795a:	4290                	lw	a2,0(a3)
1c00795c:	177d                	addi	a4,a4,-1
1c00795e:	c2d8                	sw	a4,4(a3)
1c007960:	ef15                	bnez	a4,1c00799c <pi_cpi_close+0x46>
1c007962:	00161713          	slli	a4,a2,0x1
1c007966:	47fd                	li	a5,31
1c007968:	46a1                	li	a3,8
1c00796a:	00e7d463          	ble	a4,a5,1c007972 <pi_cpi_close+0x1c>
1c00796e:	1701                	addi	a4,a4,-32
1c007970:	4691                	li	a3,4
1c007972:	1a1065b7          	lui	a1,0x1a106
1c007976:	20d5f503          	p.lw	a0,a3(a1)
1c00797a:	4785                	li	a5,1
1c00797c:	00e79733          	sll	a4,a5,a4
1c007980:	8f49                	or	a4,a4,a0
1c007982:	00e5e6a3          	p.sw	a4,a3(a1)
1c007986:	1a102737          	lui	a4,0x1a102
1c00798a:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa102760>
1c00798e:	4314                	lw	a3,0(a4)
1c007990:	00c797b3          	sll	a5,a5,a2
1c007994:	fff7c793          	not	a5,a5
1c007998:	8ff5                	and	a5,a5,a3
1c00799a:	c31c                	sw	a5,0(a4)
1c00799c:	8082                	ret

1c00799e <pi_cpi_capture_async>:
1c00799e:	8732                	mv	a4,a2
1c0079a0:	4510                	lw	a2,8(a0)
1c0079a2:	1141                	addi	sp,sp,-16
1c0079a4:	8836                	mv	a6,a3
1c0079a6:	c606                	sw	ra,12(sp)
1c0079a8:	c422                	sw	s0,8(sp)
1c0079aa:	30047473          	csrrci	s0,mstatus,8
1c0079ae:	00068a23          	sb	zero,20(a3)
1c0079b2:	00062883          	lw	a7,0(a2)
1c0079b6:	01c64783          	lbu	a5,28(a2)
1c0079ba:	86ae                	mv	a3,a1
1c0079bc:	0631                	addi	a2,a2,12
1c0079be:	00189593          	slli	a1,a7,0x1
1c0079c2:	8542                	mv	a0,a6
1c0079c4:	6a8010ef          	jal	ra,1c00906c <__rt_udma_copy_enqueue>
1c0079c8:	30041073          	csrw	mstatus,s0
1c0079cc:	40b2                	lw	ra,12(sp)
1c0079ce:	4422                	lw	s0,8(sp)
1c0079d0:	0141                	addi	sp,sp,16
1c0079d2:	8082                	ret

1c0079d4 <__rt_cpi_init>:

static void __attribute__((constructor)) __rt_cpi_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_CAM; i++)
  {
    __rt_cpi[i].open_count = 0;
1c0079d4:	1c00c5b7          	lui	a1,0x1c00c
1c0079d8:	20058593          	addi	a1,a1,512 # 1c00c200 <__rt_cpi>
1c0079dc:	0005a223          	sw	zero,4(a1)
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_CAM_ID(0) + i), &__rt_cpi[i].channel);
1c0079e0:	4549                	li	a0,18
1c0079e2:	05b1                	addi	a1,a1,12
1c0079e4:	6dc0106f          	j	1c0090c0 <__rt_udma_channel_init>

1c0079e8 <soc_eu_fcEventMask_setEvent>:
  unsigned int reg;
  if (evt >= 32) {
    reg = msbReg;
    evt -= 32;
  } else {
    reg = lsbReg;
1c0079e8:	47fd                	li	a5,31
1c0079ea:	4721                	li	a4,8
1c0079ec:	00a7d463          	ble	a0,a5,1c0079f4 <soc_eu_fcEventMask_setEvent+0xc>
1c0079f0:	1501                	addi	a0,a0,-32
1c0079f2:	4711                	li	a4,4
1c0079f4:	1a1066b7          	lui	a3,0x1a106
1c0079f8:	20e6f603          	p.lw	a2,a4(a3)
1c0079fc:	4785                	li	a5,1
1c0079fe:	00a79533          	sll	a0,a5,a0
1c007a02:	fff54513          	not	a0,a0
1c007a06:	8d71                	and	a0,a0,a2
1c007a08:	00a6e723          	p.sw	a0,a4(a3)
1c007a0c:	8082                	ret

1c007a0e <pi_task_wait_on.isra.3>:
1c007a0e:	1141                	addi	sp,sp,-16
1c007a10:	c422                	sw	s0,8(sp)
1c007a12:	c226                	sw	s1,4(sp)
1c007a14:	c606                	sw	ra,12(sp)
1c007a16:	c04a                	sw	s2,0(sp)
1c007a18:	842a                	mv	s0,a0
1c007a1a:	00040783          	lb	a5,0(s0)
1c007a1e:	c799                	beqz	a5,1c007a2c <pi_task_wait_on.isra.3+0x1e>
1c007a20:	40b2                	lw	ra,12(sp)
1c007a22:	4422                	lw	s0,8(sp)
1c007a24:	4492                	lw	s1,4(sp)
1c007a26:	4902                	lw	s2,0(sp)
1c007a28:	0141                	addi	sp,sp,16
1c007a2a:	8082                	ret
1c007a2c:	30047973          	csrrci	s2,mstatus,8
1c007a30:	4585                	li	a1,1
1c007a32:	01c00513          	li	a0,28
1c007a36:	b9ffe0ef          	jal	ra,1c0065d4 <__rt_event_execute>
1c007a3a:	30091073          	csrw	mstatus,s2
1c007a3e:	bff1                	j	1c007a1a <pi_task_wait_on.isra.3+0xc>

1c007a40 <pi_i2c_write_async>:
1c007a40:	30047873          	csrrci	a6,mstatus,8
1c007a44:	00070a23          	sb	zero,20(a4)
1c007a48:	451c                	lw	a5,8(a0)
1c007a4a:	4388                	lw	a0,0(a5)
1c007a4c:	c105                	beqz	a0,1c007a6c <pi_i2c_write_async+0x2c>
1c007a4e:	c334                	sw	a3,64(a4)
1c007a50:	43d4                	lw	a3,4(a5)
1c007a52:	df0c                	sw	a1,56(a4)
1c007a54:	df50                	sw	a2,60(a4)
1c007a56:	ca89                	beqz	a3,1c007a68 <pi_i2c_write_async+0x28>
1c007a58:	4794                	lw	a3,8(a5)
1c007a5a:	ced8                	sw	a4,28(a3)
1c007a5c:	c798                	sw	a4,8(a5)
1c007a5e:	00072e23          	sw	zero,28(a4)
1c007a62:	30081073          	csrw	mstatus,a6
1c007a66:	8082                	ret
1c007a68:	c3d8                	sw	a4,4(a5)
1c007a6a:	bfcd                	j	1c007a5c <pi_i2c_write_async+0x1c>
1c007a6c:	c398                	sw	a4,0(a5)
1c007a6e:	1c002737          	lui	a4,0x1c002
1c007a72:	dd270713          	addi	a4,a4,-558 # 1c001dd2 <__rt_i2c_step1>
1c007a76:	cf98                	sw	a4,24(a5)
1c007a78:	fc16b733          	p.bclr	a4,a3,30,1
1c007a7c:	c759                	beqz	a4,1c007b0a <pi_i2c_write_async+0xca>
1c007a7e:	1c002737          	lui	a4,0x1c002
1c007a82:	e0670713          	addi	a4,a4,-506 # 1c001e06 <__rt_i2c_step3>
1c007a86:	cfd8                	sw	a4,28(a5)
1c007a88:	5701                	li	a4,-32
1c007a8a:	02e78223          	sb	a4,36(a5)
1c007a8e:	43b8                	lw	a4,64(a5)
1c007a90:	8a89                	andi	a3,a3,2
1c007a92:	00875513          	srli	a0,a4,0x8
1c007a96:	02a782a3          	sb	a0,37(a5)
1c007a9a:	02e78323          	sb	a4,38(a5)
1c007a9e:	450d                	li	a0,3
1c007aa0:	ea89                	bnez	a3,1c007ab2 <pi_i2c_write_async+0x72>
1c007aa2:	7761                	lui	a4,0xffff8
1c007aa4:	02e793a3          	sh	a4,39(a5)
1c007aa8:	0397c703          	lbu	a4,57(a5)
1c007aac:	4519                	li	a0,6
1c007aae:	02e784a3          	sb	a4,41(a5)
1c007ab2:	4705                	li	a4,1
1c007ab4:	00c75c63          	ble	a2,a4,1c007acc <pi_i2c_write_async+0x8c>
1c007ab8:	00a78733          	add	a4,a5,a0
1c007abc:	fc000693          	li	a3,-64
1c007ac0:	02d70223          	sb	a3,36(a4) # ffff8024 <pulp__FC+0xffff8025>
1c007ac4:	86b2                	mv	a3,a2
1c007ac6:	02d702a3          	sb	a3,37(a4)
1c007aca:	0509                	addi	a0,a0,2
1c007acc:	00a78733          	add	a4,a5,a0
1c007ad0:	f8000693          	li	a3,-128
1c007ad4:	02d70223          	sb	a3,36(a4)
1c007ad8:	5bd4                	lw	a3,52(a5)
1c007ada:	1a1028b7          	lui	a7,0x1a102
1c007ade:	cb8c                	sw	a1,16(a5)
1c007ae0:	0685                	addi	a3,a3,1
1c007ae2:	4016d713          	srai	a4,a3,0x1
1c007ae6:	071e                	slli	a4,a4,0x7
1c007ae8:	0692                	slli	a3,a3,0x4
1c007aea:	9746                	add	a4,a4,a7
1c007aec:	8ac1                	andi	a3,a3,16
1c007aee:	9736                	add	a4,a4,a3
1c007af0:	c7d8                	sw	a4,12(a5)
1c007af2:	cbd0                	sw	a2,20(a5)
1c007af4:	02478793          	addi	a5,a5,36
1c007af8:	00f72023          	sw	a5,0(a4)
1c007afc:	0505                	addi	a0,a0,1
1c007afe:	00a72223          	sw	a0,4(a4)
1c007b02:	47c1                	li	a5,16
1c007b04:	00f72423          	sw	a5,8(a4)
1c007b08:	bfa9                	j	1c007a62 <pi_i2c_write_async+0x22>
1c007b0a:	1c002737          	lui	a4,0x1c002
1c007b0e:	de870713          	addi	a4,a4,-536 # 1c001de8 <__rt_i2c_step2>
1c007b12:	bf95                	j	1c007a86 <pi_i2c_write_async+0x46>

1c007b14 <pi_i2c_write>:
1c007b14:	7175                	addi	sp,sp,-144
1c007b16:	4785                	li	a5,1
1c007b18:	870a                	mv	a4,sp
1c007b1a:	c706                	sw	ra,140(sp)
1c007b1c:	cc3e                	sw	a5,24(sp)
1c007b1e:	d43e                	sw	a5,40(sp)
1c007b20:	c202                	sw	zero,4(sp)
1c007b22:	00010a23          	sb	zero,20(sp)
1c007b26:	f1bff0ef          	jal	ra,1c007a40 <pi_i2c_write_async>
1c007b2a:	0848                	addi	a0,sp,20
1c007b2c:	ee3ff0ef          	jal	ra,1c007a0e <pi_task_wait_on.isra.3>
1c007b30:	40ba                	lw	ra,140(sp)
1c007b32:	4501                	li	a0,0
1c007b34:	6149                	addi	sp,sp,144
1c007b36:	8082                	ret

1c007b38 <pi_i2c_read_async>:
1c007b38:	300478f3          	csrrci	a7,mstatus,8
1c007b3c:	00070a23          	sb	zero,20(a4)
1c007b40:	451c                	lw	a5,8(a0)
1c007b42:	fc16b6b3          	p.bclr	a3,a3,30,1
1c007b46:	c398                	sw	a4,0(a5)
1c007b48:	1c002737          	lui	a4,0x1c002
1c007b4c:	22270713          	addi	a4,a4,546 # 1c002222 <udma_event_handler_end>
1c007b50:	cf98                	sw	a4,24(a5)
1c007b52:	5701                	li	a4,-32
1c007b54:	02e78223          	sb	a4,36(a5)
1c007b58:	43b8                	lw	a4,64(a5)
1c007b5a:	00875513          	srli	a0,a4,0x8
1c007b5e:	02e78323          	sb	a4,38(a5)
1c007b62:	7761                	lui	a4,0xffff8
1c007b64:	02e793a3          	sh	a4,39(a5)
1c007b68:	0397c703          	lbu	a4,57(a5)
1c007b6c:	02a782a3          	sb	a0,37(a5)
1c007b70:	c0074733          	p.bset	a4,a4,0,0
1c007b74:	02e784a3          	sb	a4,41(a5)
1c007b78:	4505                	li	a0,1
1c007b7a:	4719                	li	a4,6
1c007b7c:	00c55f63          	ble	a2,a0,1c007b9a <pi_i2c_read_async+0x62>
1c007b80:	fc000713          	li	a4,-64
1c007b84:	02e78523          	sb	a4,42(a5)
1c007b88:	fff60713          	addi	a4,a2,-1
1c007b8c:	02e785a3          	sb	a4,43(a5)
1c007b90:	04000713          	li	a4,64
1c007b94:	02e78623          	sb	a4,44(a5)
1c007b98:	4725                	li	a4,9
1c007b9a:	00e78833          	add	a6,a5,a4
1c007b9e:	06000313          	li	t1,96
1c007ba2:	02680223          	sb	t1,36(a6)
1c007ba6:	00170513          	addi	a0,a4,1 # ffff8001 <pulp__FC+0xffff8002>
1c007baa:	ea81                	bnez	a3,1c007bba <pi_i2c_read_async+0x82>
1c007bac:	953e                	add	a0,a0,a5
1c007bae:	02000693          	li	a3,32
1c007bb2:	02d50223          	sb	a3,36(a0)
1c007bb6:	00270513          	addi	a0,a4,2
1c007bba:	5bd4                	lw	a3,52(a5)
1c007bbc:	1a102837          	lui	a6,0x1a102
1c007bc0:	4016d713          	srai	a4,a3,0x1
1c007bc4:	071e                	slli	a4,a4,0x7
1c007bc6:	0692                	slli	a3,a3,0x4
1c007bc8:	9742                	add	a4,a4,a6
1c007bca:	8ac1                	andi	a3,a3,16
1c007bcc:	9736                	add	a4,a4,a3
1c007bce:	00b72023          	sw	a1,0(a4)
1c007bd2:	00c72223          	sw	a2,4(a4)
1c007bd6:	46c1                	li	a3,16
1c007bd8:	00d72423          	sw	a3,8(a4)
1c007bdc:	0741                	addi	a4,a4,16
1c007bde:	02478793          	addi	a5,a5,36
1c007be2:	00f72023          	sw	a5,0(a4)
1c007be6:	00a72223          	sw	a0,4(a4)
1c007bea:	00d72423          	sw	a3,8(a4)
1c007bee:	30089073          	csrw	mstatus,a7
1c007bf2:	8082                	ret

1c007bf4 <pi_i2c_read>:
1c007bf4:	7175                	addi	sp,sp,-144
1c007bf6:	4785                	li	a5,1
1c007bf8:	870a                	mv	a4,sp
1c007bfa:	c706                	sw	ra,140(sp)
1c007bfc:	cc3e                	sw	a5,24(sp)
1c007bfe:	d43e                	sw	a5,40(sp)
1c007c00:	c202                	sw	zero,4(sp)
1c007c02:	00010a23          	sb	zero,20(sp)
1c007c06:	f33ff0ef          	jal	ra,1c007b38 <pi_i2c_read_async>
1c007c0a:	0848                	addi	a0,sp,20
1c007c0c:	e03ff0ef          	jal	ra,1c007a0e <pi_task_wait_on.isra.3>
1c007c10:	40ba                	lw	ra,140(sp)
1c007c12:	4501                	li	a0,0
1c007c14:	6149                	addi	sp,sp,144
1c007c16:	8082                	ret

1c007c18 <pi_i2c_open>:
1c007c18:	7179                	addi	sp,sp,-48
1c007c1a:	d606                	sw	ra,44(sp)
1c007c1c:	d422                	sw	s0,40(sp)
1c007c1e:	d226                	sw	s1,36(sp)
1c007c20:	d04a                	sw	s2,32(sp)
1c007c22:	ce4e                	sw	s3,28(sp)
1c007c24:	cc52                	sw	s4,24(sp)
1c007c26:	ca56                	sw	s5,20(sp)
1c007c28:	c85a                	sw	s6,16(sp)
1c007c2a:	c65e                	sw	s7,12(sp)
1c007c2c:	c462                	sw	s8,8(sp)
1c007c2e:	30047b73          	csrrci	s6,mstatus,8
1c007c32:	00452b83          	lw	s7,4(a0)
1c007c36:	1c00c9b7          	lui	s3,0x1c00c
1c007c3a:	d1c98913          	addi	s2,s3,-740 # 1c00bd1c <__rt_i2c>
1c007c3e:	004bca03          	lbu	s4,4(s7)
1c007c42:	d1c98993          	addi	s3,s3,-740
1c007c46:	100a57b3          	p.exthz	a5,s4
1c007c4a:	00479413          	slli	s0,a5,0x4
1c007c4e:	943e                	add	s0,s0,a5
1c007c50:	040a                	slli	s0,s0,0x2
1c007c52:	04400793          	li	a5,68
1c007c56:	944a                	add	s0,s0,s2
1c007c58:	42fa0933          	p.mac	s2,s4,a5
1c007c5c:	c500                	sw	s0,8(a0)
1c007c5e:	005a0493          	addi	s1,s4,5
1c007c62:	00149c13          	slli	s8,s1,0x1
1c007c66:	03894783          	lbu	a5,56(s2)
1c007c6a:	0785                	addi	a5,a5,1
1c007c6c:	0ff7f793          	andi	a5,a5,255
1c007c70:	02f90c23          	sb	a5,56(s2)
1c007c74:	0417bb63          	p.bneimm	a5,1,1c007cca <pi_i2c_open+0xb2>
1c007c78:	1a102737          	lui	a4,0x1a102
1c007c7c:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa102760>
1c007c80:	4314                	lw	a3,0(a4)
1c007c82:	009797b3          	sll	a5,a5,s1
1c007c86:	8562                	mv	a0,s8
1c007c88:	8fd5                	or	a5,a5,a3
1c007c8a:	c31c                	sw	a5,0(a4)
1c007c8c:	d5dff0ef          	jal	ra,1c0079e8 <soc_eu_fcEventMask_setEvent>
1c007c90:	001c0a93          	addi	s5,s8,1
1c007c94:	8556                	mv	a0,s5
1c007c96:	d53ff0ef          	jal	ra,1c0079e8 <soc_eu_fcEventMask_setEvent>
1c007c9a:	e3ff8517          	auipc	a0,0xe3ff8
1c007c9e:	39650513          	addi	a0,a0,918 # 30 <periph_channels>
1c007ca2:	049a                	slli	s1,s1,0x6
1c007ca4:	1c0027b7          	lui	a5,0x1c002
1c007ca8:	94aa                	add	s1,s1,a0
1c007caa:	e1478793          	addi	a5,a5,-492 # 1c001e14 <__rt_i2c_handle_rx_copy>
1c007cae:	ccdc                	sw	a5,28(s1)
1c007cb0:	0a96                	slli	s5,s5,0x5
1c007cb2:	1c0027b7          	lui	a5,0x1c002
1c007cb6:	c080                	sw	s0,0(s1)
1c007cb8:	9556                	add	a0,a0,s5
1c007cba:	dc678793          	addi	a5,a5,-570 # 1c001dc6 <__rt_i2c_handle_tx_copy>
1c007cbe:	cd5c                	sw	a5,28(a0)
1c007cc0:	c100                	sw	s0,0(a0)
1c007cc2:	00092023          	sw	zero,0(s2)
1c007cc6:	00092223          	sw	zero,4(s2)
1c007cca:	04400793          	li	a5,68
1c007cce:	874e                	mv	a4,s3
1c007cd0:	42fa0733          	p.mac	a4,s4,a5
1c007cd4:	4685                	li	a3,1
1c007cd6:	87ba                	mv	a5,a4
1c007cd8:	03872a23          	sw	s8,52(a4)
1c007cdc:	006bd703          	lhu	a4,6(s7)
1c007ce0:	02e78ca3          	sb	a4,57(a5)
1c007ce4:	00cba703          	lw	a4,12(s7)
1c007ce8:	dfd8                	sw	a4,60(a5)
1c007cea:	1c00c7b7          	lui	a5,0x1c00c
1c007cee:	3a07a783          	lw	a5,928(a5) # 1c00c3a0 <__rt_freq_domains>
1c007cf2:	17fd                	addi	a5,a5,-1
1c007cf4:	97ba                	add	a5,a5,a4
1c007cf6:	070a                	slli	a4,a4,0x2
1c007cf8:	02e7d7b3          	divu	a5,a5,a4
1c007cfc:	4701                	li	a4,0
1c007cfe:	00f6d463          	ble	a5,a3,1c007d06 <pi_i2c_open+0xee>
1c007d02:	fff78713          	addi	a4,a5,-1
1c007d06:	04400793          	li	a5,68
1c007d0a:	42fa09b3          	p.mac	s3,s4,a5
1c007d0e:	04e9a023          	sw	a4,64(s3)
1c007d12:	300b1073          	csrw	mstatus,s6
1c007d16:	50b2                	lw	ra,44(sp)
1c007d18:	5422                	lw	s0,40(sp)
1c007d1a:	5492                	lw	s1,36(sp)
1c007d1c:	5902                	lw	s2,32(sp)
1c007d1e:	49f2                	lw	s3,28(sp)
1c007d20:	4a62                	lw	s4,24(sp)
1c007d22:	4ad2                	lw	s5,20(sp)
1c007d24:	4b42                	lw	s6,16(sp)
1c007d26:	4bb2                	lw	s7,12(sp)
1c007d28:	4c22                	lw	s8,8(sp)
1c007d2a:	4501                	li	a0,0
1c007d2c:	6145                	addi	sp,sp,48
1c007d2e:	8082                	ret

1c007d30 <pi_i2c_conf_init>:


void pi_i2c_conf_init(pi_i2c_conf_t *conf)
{
  conf->cs = 0;
  conf->max_baudrate = 200000;
1c007d30:	000317b7          	lui	a5,0x31
1c007d34:	d4078793          	addi	a5,a5,-704 # 30d40 <__L1Cl+0x20d40>
  conf->cs = 0;
1c007d38:	00051323          	sh	zero,6(a0)
  conf->max_baudrate = 200000;
1c007d3c:	c55c                	sw	a5,12(a0)
  conf->itf = 0;
1c007d3e:	00050223          	sb	zero,4(a0)
}
1c007d42:	8082                	ret

1c007d44 <__rt_i2c_init>:

static void __attribute__((constructor)) __rt_i2c_init()
{
1c007d44:	1141                	addi	sp,sp,-16
1c007d46:	c226                	sw	s1,4(sp)
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c007d48:	1c00c4b7          	lui	s1,0x1c00c
{
1c007d4c:	c606                	sw	ra,12(sp)
1c007d4e:	c422                	sw	s0,8(sp)
1c007d50:	c04a                	sw	s2,0(sp)
    __rt_i2c[i].open_count = 0;
1c007d52:	d1c48413          	addi	s0,s1,-740 # 1c00bd1c <__rt_i2c>
    __rt_i2c[i].udma_stop_cmd = I2C_CMD_STOP;
1c007d56:	02000913          	li	s2,32
1c007d5a:	03242023          	sw	s2,32(s0)
    __rt_i2c[i].open_count = 0;
1c007d5e:	02040c23          	sb	zero,56(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c007d62:	d1c48593          	addi	a1,s1,-740
1c007d66:	4529                	li	a0,10
1c007d68:	370010ef          	jal	ra,1c0090d8 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c007d6c:	d1c48593          	addi	a1,s1,-740
1c007d70:	452d                	li	a0,11
1c007d72:	366010ef          	jal	ra,1c0090d8 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c007d76:	04440413          	addi	s0,s0,68
    __rt_i2c[i].udma_stop_cmd = I2C_CMD_STOP;
1c007d7a:	03242023          	sw	s2,32(s0)
    __rt_i2c[i].open_count = 0;
1c007d7e:	02040c23          	sb	zero,56(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c007d82:	4531                	li	a0,12
1c007d84:	85a2                	mv	a1,s0
1c007d86:	352010ef          	jal	ra,1c0090d8 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c007d8a:	85a2                	mv	a1,s0
  }
}
1c007d8c:	4422                	lw	s0,8(sp)
1c007d8e:	40b2                	lw	ra,12(sp)
1c007d90:	4492                	lw	s1,4(sp)
1c007d92:	4902                	lw	s2,0(sp)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c007d94:	4535                	li	a0,13
}
1c007d96:	0141                	addi	sp,sp,16
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c007d98:	3400106f          	j	1c0090d8 <__rt_udma_channel_reg_data>

1c007d9c <pos_spim_enqueue_to_pending_7>:
  uint32_t length, pi_spi_flags_e flags)
{
    pi_task_t task;
    pi_spi_copy_2d_async(device, addr, data, size, stride, length, flags, pi_task_block(&task));
    pi_task_wait_on(&task);
}
1c007d9c:	c1fc                	sw	a5,68(a1)
1c007d9e:	4782                	lw	a5,0(sp)
1c007da0:	dd90                	sw	a2,56(a1)
1c007da2:	ddd4                	sw	a3,60(a1)
1c007da4:	c9bc                	sw	a5,80(a1)
1c007da6:	4792                	lw	a5,4(sp)
1c007da8:	c1b8                	sw	a4,64(a1)
1c007daa:	0505a423          	sw	a6,72(a1)
1c007dae:	0515a623          	sw	a7,76(a1)
1c007db2:	c9fc                	sw	a5,84(a1)
1c007db4:	415c                	lw	a5,4(a0)
1c007db6:	c799                	beqz	a5,1c007dc4 <pos_spim_enqueue_to_pending_7+0x28>
1c007db8:	451c                	lw	a5,8(a0)
1c007dba:	cfcc                	sw	a1,28(a5)
1c007dbc:	c50c                	sw	a1,8(a0)
1c007dbe:	0005ae23          	sw	zero,28(a1)
1c007dc2:	8082                	ret
1c007dc4:	c14c                	sw	a1,4(a0)
1c007dc6:	bfdd                	j	1c007dbc <pos_spim_enqueue_to_pending_7+0x20>

1c007dc8 <pos_spim_apply_conf>:
1c007dc8:	4d5c                	lw	a5,28(a0)
1c007dca:	cb81                	beqz	a5,1c007dda <pos_spim_apply_conf+0x12>
1c007dcc:	5d58                	lw	a4,60(a0)
1c007dce:	c398                	sw	a4,0(a5)
1c007dd0:	04854703          	lbu	a4,72(a0)
1c007dd4:	c1c74733          	p.bset	a4,a4,0,28
1c007dd8:	c3d8                	sw	a4,4(a5)
1c007dda:	511c                	lw	a5,32(a0)
1c007ddc:	cb81                	beqz	a5,1c007dec <pos_spim_apply_conf+0x24>
1c007dde:	5d58                	lw	a4,60(a0)
1c007de0:	c398                	sw	a4,0(a5)
1c007de2:	04854703          	lbu	a4,72(a0)
1c007de6:	c1c74733          	p.bset	a4,a4,0,28
1c007dea:	c3d8                	sw	a4,4(a5)
1c007dec:	04d54703          	lbu	a4,77(a0)
1c007df0:	700007b7          	lui	a5,0x70000
1c007df4:	c1b027b3          	p.insert	a5,zero,0,27
1c007df8:	de0027b3          	p.insert	a5,zero,15,0
1c007dfc:	c1a727b3          	p.insert	a5,a4,0,26
1c007e00:	076a                	slli	a4,a4,0x1a
1c007e02:	c3d74733          	p.bset	a4,a4,1,29
1c007e06:	c15c                	sw	a5,4(a0)
1c007e08:	c518                	sw	a4,8(a0)
1c007e0a:	8082                	ret

1c007e0c <__rt_spi_get_div.isra.1>:
1c007e0c:	1c00c7b7          	lui	a5,0x1c00c
1c007e10:	3a07a703          	lw	a4,928(a5) # 1c00c3a0 <__rt_freq_domains>
1c007e14:	00e5c963          	blt	a1,a4,1c007e26 <__rt_spi_get_div.isra.1+0x1a>
1c007e18:	4789                	li	a5,2
1c007e1a:	02f74733          	div	a4,a4,a5
1c007e1e:	4581                	li	a1,0
1c007e20:	c118                	sw	a4,0(a0)
1c007e22:	852e                	mv	a0,a1
1c007e24:	8082                	ret
1c007e26:	fff70793          	addi	a5,a4,-1
1c007e2a:	97ae                	add	a5,a5,a1
1c007e2c:	02b7d5b3          	divu	a1,a5,a1
1c007e30:	fc15b7b3          	p.bclr	a5,a1,30,1
1c007e34:	c391                	beqz	a5,1c007e38 <__rt_spi_get_div.isra.1+0x2c>
1c007e36:	0585                	addi	a1,a1,1
1c007e38:	8585                	srai	a1,a1,0x1
1c007e3a:	00159793          	slli	a5,a1,0x1
1c007e3e:	02f74733          	div	a4,a4,a5
1c007e42:	c118                	sw	a4,0(a0)
1c007e44:	bff9                	j	1c007e22 <__rt_spi_get_div.isra.1+0x16>

1c007e46 <soc_eu_fcEventMask_setEvent>:
1c007e46:	47fd                	li	a5,31
1c007e48:	4721                	li	a4,8
1c007e4a:	00a7d463          	ble	a0,a5,1c007e52 <soc_eu_fcEventMask_setEvent+0xc>
1c007e4e:	1501                	addi	a0,a0,-32
1c007e50:	4711                	li	a4,4
1c007e52:	1a1066b7          	lui	a3,0x1a106
1c007e56:	20e6f603          	p.lw	a2,a4(a3)
1c007e5a:	4785                	li	a5,1
1c007e5c:	00a79533          	sll	a0,a5,a0
1c007e60:	fff54513          	not	a0,a0
1c007e64:	8d71                	and	a0,a0,a2
1c007e66:	00a6e723          	p.sw	a0,a4(a3)
1c007e6a:	8082                	ret

1c007e6c <pi_spi_open>:
1c007e6c:	7179                	addi	sp,sp,-48
1c007e6e:	c462                	sw	s8,8(sp)
1c007e70:	8c2a                	mv	s8,a0
1c007e72:	d606                	sw	ra,44(sp)
1c007e74:	d422                	sw	s0,40(sp)
1c007e76:	d226                	sw	s1,36(sp)
1c007e78:	d04a                	sw	s2,32(sp)
1c007e7a:	ce4e                	sw	s3,28(sp)
1c007e7c:	cc52                	sw	s4,24(sp)
1c007e7e:	ca56                	sw	s5,20(sp)
1c007e80:	c85a                	sw	s6,16(sp)
1c007e82:	c65e                	sw	s7,12(sp)
1c007e84:	300479f3          	csrrci	s3,mstatus,8
1c007e88:	4144                	lw	s1,4(a0)
1c007e8a:	1c00c937          	lui	s2,0x1c00c
1c007e8e:	da490b93          	addi	s7,s2,-604 # 1c00bda4 <__rt_spim>
1c007e92:	01148a03          	lb	s4,17(s1)
1c007e96:	10c00793          	li	a5,268
1c007e9a:	05400513          	li	a0,84
1c007e9e:	42fa0bb3          	p.mac	s7,s4,a5
1c007ea2:	aaffe0ef          	jal	ra,1c006950 <pi_l2_malloc>
1c007ea6:	1a050563          	beqz	a0,1c008050 <pi_spi_open+0x1e4>
1c007eaa:	001a0a93          	addi	s5,s4,1
1c007eae:	001a9b13          	slli	s6,s5,0x1
1c007eb2:	87da                	mv	a5,s6
1c007eb4:	00ac2423          	sw	a0,8(s8)
1c007eb8:	04f50623          	sb	a5,76(a0)
1c007ebc:	01752023          	sw	s7,0(a0)
1c007ec0:	0044c683          	lbu	a3,4(s1)
1c007ec4:	842a                	mv	s0,a0
1c007ec6:	da490913          	addi	s2,s2,-604
1c007eca:	04d504a3          	sb	a3,73(a0)
1c007ece:	0054c703          	lbu	a4,5(s1)
1c007ed2:	04e50523          	sb	a4,74(a0)
1c007ed6:	449c                	lw	a5,8(s1)
1c007ed8:	04f507a3          	sb	a5,79(a0)
1c007edc:	44dc                	lw	a5,12(s1)
1c007ede:	04f50823          	sb	a5,80(a0)
1c007ee2:	408c                	lw	a1,0(s1)
1c007ee4:	dd0c                	sw	a1,56(a0)
1c007ee6:	0104c783          	lbu	a5,16(s1)
1c007eea:	04f50423          	sb	a5,72(a0)
1c007eee:	4781                	li	a5,0
1c007ef0:	0026b463          	p.bneimm	a3,2,1c007ef8 <pi_spi_open+0x8c>
1c007ef4:	00e037b3          	snez	a5,a4
1c007ef8:	04f406a3          	sb	a5,77(s0)
1c007efc:	02042023          	sw	zero,32(s0)
1c007f00:	00042e23          	sw	zero,28(s0)
1c007f04:	03440513          	addi	a0,s0,52
1c007f08:	f05ff0ef          	jal	ra,1c007e0c <__rt_spi_get_div.isra.1>
1c007f0c:	0ff00793          	li	a5,255
1c007f10:	14a7c063          	blt	a5,a0,1c008050 <pi_spi_open+0x1e4>
1c007f14:	87aa                	mv	a5,a0
1c007f16:	04f40723          	sb	a5,78(s0)
1c007f1a:	449c                	lw	a5,8(s1)
1c007f1c:	44d8                	lw	a4,12(s1)
1c007f1e:	07a6                	slli	a5,a5,0x9
1c007f20:	0722                	slli	a4,a4,0x8
1c007f22:	8fd9                	or	a5,a5,a4
1c007f24:	8d5d                	or	a0,a0,a5
1c007f26:	dc48                	sw	a0,60(s0)
1c007f28:	8522                	mv	a0,s0
1c007f2a:	e9fff0ef          	jal	ra,1c007dc8 <pos_spim_apply_conf>
1c007f2e:	48dc                	lw	a5,20(s1)
1c007f30:	11f7ab63          	p.beqimm	a5,-1,1c008046 <pi_spi_open+0x1da>
1c007f34:	5854                	lw	a3,52(s0)
1c007f36:	77359737          	lui	a4,0x77359
1c007f3a:	40070713          	addi	a4,a4,1024 # 77359400 <__l2_end+0x5b34d00c>
1c007f3e:	02d74733          	div	a4,a4,a3
1c007f42:	02e7c7b3          	div	a5,a5,a4
1c007f46:	17d1                	addi	a5,a5,-12
1c007f48:	c207b7b3          	p.bclr	a5,a5,1,0
1c007f4c:	4c98                	lw	a4,24(s1)
1c007f4e:	c03c                	sw	a5,64(s0)
1c007f50:	0ff72d63          	p.beqimm	a4,-1,1c00804a <pi_spi_open+0x1de>
1c007f54:	5854                	lw	a3,52(s0)
1c007f56:	773597b7          	lui	a5,0x77359
1c007f5a:	40078793          	addi	a5,a5,1024 # 77359400 <__l2_end+0x5b34d00c>
1c007f5e:	02d7c7b3          	div	a5,a5,a3
1c007f62:	02f74733          	div	a4,a4,a5
1c007f66:	fd070713          	addi	a4,a4,-48
1c007f6a:	c2073733          	p.bclr	a4,a4,1,0
1c007f6e:	c078                	sw	a4,68(s0)
1c007f70:	10c00793          	li	a5,268
1c007f74:	844a                	mv	s0,s2
1c007f76:	42fa0433          	p.mac	s0,s4,a5
1c007f7a:	485c                	lw	a5,20(s0)
1c007f7c:	00178713          	addi	a4,a5,1
1c007f80:	c858                	sw	a4,20(s0)
1c007f82:	e3dd                	bnez	a5,1c008028 <pi_spi_open+0x1bc>
1c007f84:	1a102c37          	lui	s8,0x1a102
1c007f88:	780c0713          	addi	a4,s8,1920 # 1a102780 <__l1_end+0xa102760>
1c007f8c:	4314                	lw	a3,0(a4)
1c007f8e:	4785                	li	a5,1
1c007f90:	015797b3          	sll	a5,a5,s5
1c007f94:	8fd5                	or	a5,a5,a3
1c007f96:	c31c                	sw	a5,0(a4)
1c007f98:	01148503          	lb	a0,17(s1)
1c007f9c:	100a4a33          	p.exths	s4,s4
1c007fa0:	0a9e                	slli	s5,s5,0x7
1c007fa2:	0559                	addi	a0,a0,22
1c007fa4:	ea3ff0ef          	jal	ra,1c007e46 <soc_eu_fcEventMask_setEvent>
1c007fa8:	01148783          	lb	a5,17(s1)
1c007fac:	1c002737          	lui	a4,0x1c002
1c007fb0:	29270713          	addi	a4,a4,658 # 1c002292 <__pi_spim_handle_eot>
1c007fb4:	0789                	addi	a5,a5,2
1c007fb6:	078a                	slli	a5,a5,0x2
1c007fb8:	2ae7ac23          	sw	a4,696(a5)
1c007fbc:	005b1713          	slli	a4,s6,0x5
1c007fc0:	0b05                	addi	s6,s6,1
1c007fc2:	2f77a023          	sw	s7,736(a5)
1c007fc6:	1c0026b7          	lui	a3,0x1c002
1c007fca:	e3ff8797          	auipc	a5,0xe3ff8
1c007fce:	06678793          	addi	a5,a5,102 # 30 <periph_channels>
1c007fd2:	0b16                	slli	s6,s6,0x5
1c007fd4:	973e                	add	a4,a4,a5
1c007fd6:	9b3e                	add	s6,s6,a5
1c007fd8:	30868693          	addi	a3,a3,776 # 1c002308 <__rt_spim_handle_rx_copy>
1c007fdc:	1c0027b7          	lui	a5,0x1c002
1c007fe0:	cf54                	sw	a3,28(a4)
1c007fe2:	01772023          	sw	s7,0(a4)
1c007fe6:	2f678793          	addi	a5,a5,758 # 1c0022f6 <__rt_spim_handle_tx_copy>
1c007fea:	00fb2e23          	sw	a5,28(s6)
1c007fee:	001a1793          	slli	a5,s4,0x1
1c007ff2:	97d2                	add	a5,a5,s4
1c007ff4:	078e                	slli	a5,a5,0x3
1c007ff6:	21890713          	addi	a4,s2,536
1c007ffa:	017b2023          	sw	s7,0(s6)
1c007ffe:	00f706b3          	add	a3,a4,a5
1c008002:	c814                	sw	a3,16(s0)
1c008004:	01078693          	addi	a3,a5,16
1c008008:	07d1                	addi	a5,a5,20
1c00800a:	9ae2                	add	s5,s5,s8
1c00800c:	96ba                	add	a3,a3,a4
1c00800e:	97ba                	add	a5,a5,a4
1c008010:	00042623          	sw	zero,12(s0)
1c008014:	0f542c23          	sw	s5,248(s0)
1c008018:	0e042823          	sw	zero,240(s0)
1c00801c:	0e042a23          	sw	zero,244(s0)
1c008020:	0cd42823          	sw	a3,208(s0)
1c008024:	0ef42023          	sw	a5,224(s0)
1c008028:	30099073          	csrw	mstatus,s3
1c00802c:	4501                	li	a0,0
1c00802e:	50b2                	lw	ra,44(sp)
1c008030:	5422                	lw	s0,40(sp)
1c008032:	5492                	lw	s1,36(sp)
1c008034:	5902                	lw	s2,32(sp)
1c008036:	49f2                	lw	s3,28(sp)
1c008038:	4a62                	lw	s4,24(sp)
1c00803a:	4ad2                	lw	s5,20(sp)
1c00803c:	4b42                	lw	s6,16(sp)
1c00803e:	4bb2                	lw	s7,12(sp)
1c008040:	4c22                	lw	s8,8(sp)
1c008042:	6145                	addi	sp,sp,48
1c008044:	8082                	ret
1c008046:	6789                	lui	a5,0x2
1c008048:	b711                	j	1c007f4c <pi_spi_open+0xe0>
1c00804a:	6789                	lui	a5,0x2
1c00804c:	c07c                	sw	a5,68(s0)
1c00804e:	b70d                	j	1c007f70 <pi_spi_open+0x104>
1c008050:	30099073          	csrw	mstatus,s3
1c008054:	557d                	li	a0,-1
1c008056:	bfe1                	j	1c00802e <pi_spi_open+0x1c2>

1c008058 <__rt_spi_handle_repeat>:
1c008058:	1101                	addi	sp,sp,-32
1c00805a:	cc22                	sw	s0,24(sp)
1c00805c:	842a                	mv	s0,a0
1c00805e:	ce06                	sw	ra,28(sp)
1c008060:	ca26                	sw	s1,20(sp)
1c008062:	c84a                	sw	s2,16(sp)
1c008064:	c64e                	sw	s3,12(sp)
1c008066:	c452                	sw	s4,8(sp)
1c008068:	300479f3          	csrrci	s3,mstatus,8
1c00806c:	10852783          	lw	a5,264(a0)
1c008070:	00c52883          	lw	a7,12(a0)
1c008074:	4794                	lw	a3,8(a5)
1c008076:	0ac52783          	lw	a5,172(a0)
1c00807a:	8346                	mv	t1,a7
1c00807c:	fa27b633          	p.bclr	a2,a5,29,2
1c008080:	8389                	srli	a5,a5,0x2
1c008082:	fa27b7b3          	p.bclr	a5,a5,29,2
1c008086:	17fd                	addi	a5,a5,-1
1c008088:	0017b813          	seqz	a6,a5
1c00808c:	0b052783          	lw	a5,176(a0)
1c008090:	c39d                	beqz	a5,1c0080b6 <__rt_spi_handle_repeat+0x5e>
1c008092:	09c52703          	lw	a4,156(a0)
1c008096:	5e61                	li	t3,-8
1c008098:	10452583          	lw	a1,260(a0)
1c00809c:	8f1d                	sub	a4,a4,a5
1c00809e:	03c787b3          	mul	a5,a5,t3
1c0080a2:	c2073733          	p.bclr	a4,a4,1,0
1c0080a6:	4308                	lw	a0,0(a4)
1c0080a8:	07fd                	addi	a5,a5,31
1c0080aa:	0796                	slli	a5,a5,0x5
1c0080ac:	80f525b3          	p.insertr	a1,a0,a5
1c0080b0:	c30c                	sw	a1,0(a4)
1c0080b2:	0a042823          	sw	zero,176(s0)
1c0080b6:	00788913          	addi	s2,a7,7 # 1a102007 <__l1_end+0xa101fe7>
1c0080ba:	00395913          	srli	s2,s2,0x3
1c0080be:	6789                	lui	a5,0x2
1c0080c0:	0127f463          	bleu	s2,a5,1c0080c8 <__rt_spi_handle_repeat+0x70>
1c0080c4:	6909                	lui	s2,0x2
1c0080c6:	68c1                	lui	a7,0x10
1c0080c8:	0a842e03          	lw	t3,168(s0)
1c0080cc:	41130333          	sub	t1,t1,a7
1c0080d0:	00642623          	sw	t1,12(s0)
1c0080d4:	18fd                	addi	a7,a7,-1
1c0080d6:	4808                	lw	a0,16(s0)
1c0080d8:	04d6c783          	lbu	a5,77(a3)
1c0080dc:	081e3f63          	p.bneimm	t3,1,1c00817a <__rt_spi_handle_repeat+0x122>
1c0080e0:	07ea                	slli	a5,a5,0x1a
1c0080e2:	c3d7c733          	p.bset	a4,a5,1,29
1c0080e6:	01b81793          	slli	a5,a6,0x1b
1c0080ea:	8fd9                	or	a5,a5,a4
1c0080ec:	0117e7b3          	or	a5,a5,a7
1c0080f0:	c11c                	sw	a5,0(a0)
1c0080f2:	0a442783          	lw	a5,164(s0)
1c0080f6:	00a7a023          	sw	a0,0(a5) # 2000 <__rt_stack_size+0x1800>
1c0080fa:	4711                	li	a4,4
1c0080fc:	00e7a223          	sw	a4,4(a5)
1c008100:	4741                	li	a4,16
1c008102:	00e7a423          	sw	a4,8(a5)
1c008106:	00878593          	addi	a1,a5,8
1c00810a:	4198                	lw	a4,0(a1)
1c00810c:	8b41                	andi	a4,a4,16
1c00810e:	ff75                	bnez	a4,1c00810a <__rt_spi_handle_repeat+0xb2>
1c008110:	4458                	lw	a4,12(s0)
1c008112:	e321                	bnez	a4,1c008152 <__rt_spi_handle_repeat+0xfa>
1c008114:	ee1d                	bnez	a2,1c008152 <__rt_spi_handle_repeat+0xfa>
1c008116:	09c42703          	lw	a4,156(s0)
1c00811a:	00e7a023          	sw	a4,0(a5)
1c00811e:	0127a223          	sw	s2,4(a5)
1c008122:	46c1                	li	a3,16
1c008124:	00d7a423          	sw	a3,8(a5)
1c008128:	90000737          	lui	a4,0x90000
1c00812c:	0705                	addi	a4,a4,1
1c00812e:	c118                	sw	a4,0(a0)
1c008130:	00a7a023          	sw	a0,0(a5)
1c008134:	4711                	li	a4,4
1c008136:	00e7a223          	sw	a4,4(a5)
1c00813a:	00d7a423          	sw	a3,8(a5)
1c00813e:	30099073          	csrw	mstatus,s3
1c008142:	40f2                	lw	ra,28(sp)
1c008144:	4462                	lw	s0,24(sp)
1c008146:	44d2                	lw	s1,20(sp)
1c008148:	4942                	lw	s2,16(sp)
1c00814a:	49b2                	lw	s3,12(sp)
1c00814c:	4a22                	lw	s4,8(sp)
1c00814e:	6105                	addi	sp,sp,32
1c008150:	8082                	ret
1c008152:	04c6c503          	lbu	a0,76(a3)
1c008156:	0505                	addi	a0,a0,1
1c008158:	cefff0ef          	jal	ra,1c007e46 <soc_eu_fcEventMask_setEvent>
1c00815c:	0a442703          	lw	a4,164(s0)
1c008160:	09c42783          	lw	a5,156(s0)
1c008164:	00f72023          	sw	a5,0(a4) # 90000000 <pulp__FC+0x90000001>
1c008168:	01272223          	sw	s2,4(a4)
1c00816c:	46c1                	li	a3,16
1c00816e:	00d72423          	sw	a3,8(a4)
1c008172:	993e                	add	s2,s2,a5
1c008174:	09242e23          	sw	s2,156(s0)
1c008178:	b7d9                	j	1c00813e <__rt_spi_handle_repeat+0xe6>
1c00817a:	04c6c703          	lbu	a4,76(a3)
1c00817e:	1a102eb7          	lui	t4,0x1a102
1c008182:	00170593          	addi	a1,a4,1
1c008186:	4015d493          	srai	s1,a1,0x1
1c00818a:	40175a13          	srai	s4,a4,0x1
1c00818e:	049e                	slli	s1,s1,0x7
1c008190:	0592                	slli	a1,a1,0x4
1c008192:	0a1e                	slli	s4,s4,0x7
1c008194:	0712                	slli	a4,a4,0x4
1c008196:	94f6                	add	s1,s1,t4
1c008198:	89c1                	andi	a1,a1,16
1c00819a:	9a76                	add	s4,s4,t4
1c00819c:	8b41                	andi	a4,a4,16
1c00819e:	94ae                	add	s1,s1,a1
1c0081a0:	9a3a                	add	s4,s4,a4
1c0081a2:	0a2e3863          	p.bneimm	t3,2,1c008252 <__rt_spi_handle_repeat+0x1fa>
1c0081a6:	07ea                	slli	a5,a5,0x1a
1c0081a8:	c3e7c7b3          	p.bset	a5,a5,1,30
1c0081ac:	0117e7b3          	or	a5,a5,a7
1c0081b0:	c11c                	sw	a5,0(a0)
1c0081b2:	00a4a023          	sw	a0,0(s1)
1c0081b6:	4791                	li	a5,4
1c0081b8:	00f4a223          	sw	a5,4(s1)
1c0081bc:	47c1                	li	a5,16
1c0081be:	00f4a423          	sw	a5,8(s1)
1c0081c2:	00848713          	addi	a4,s1,8
1c0081c6:	04031663          	bnez	t1,1c008212 <__rt_spi_handle_repeat+0x1ba>
1c0081ca:	e621                	bnez	a2,1c008212 <__rt_spi_handle_repeat+0x1ba>
1c0081cc:	09c42783          	lw	a5,156(s0)
1c0081d0:	00fa2023          	sw	a5,0(s4)
1c0081d4:	012a2223          	sw	s2,4(s4)
1c0081d8:	47d1                	li	a5,20
1c0081da:	00fa2423          	sw	a5,8(s4)
1c0081de:	0a042783          	lw	a5,160(s0)
1c0081e2:	00f4a023          	sw	a5,0(s1)
1c0081e6:	0124a223          	sw	s2,4(s1)
1c0081ea:	47c1                	li	a5,16
1c0081ec:	00f4a423          	sw	a5,8(s1)
1c0081f0:	431c                	lw	a5,0(a4)
1c0081f2:	0207f793          	andi	a5,a5,32
1c0081f6:	ffed                	bnez	a5,1c0081f0 <__rt_spi_handle_repeat+0x198>
1c0081f8:	900007b7          	lui	a5,0x90000
1c0081fc:	0785                	addi	a5,a5,1
1c0081fe:	c11c                	sw	a5,0(a0)
1c008200:	00a4a023          	sw	a0,0(s1)
1c008204:	4791                	li	a5,4
1c008206:	00f4a223          	sw	a5,4(s1)
1c00820a:	47c1                	li	a5,16
1c00820c:	00f4a423          	sw	a5,8(s1)
1c008210:	b73d                	j	1c00813e <__rt_spi_handle_repeat+0xe6>
1c008212:	431c                	lw	a5,0(a4)
1c008214:	8bc1                	andi	a5,a5,16
1c008216:	fff5                	bnez	a5,1c008212 <__rt_spi_handle_repeat+0x1ba>
1c008218:	04c6c503          	lbu	a0,76(a3)
1c00821c:	c2bff0ef          	jal	ra,1c007e46 <soc_eu_fcEventMask_setEvent>
1c008220:	09c42703          	lw	a4,156(s0)
1c008224:	00ea2023          	sw	a4,0(s4)
1c008228:	012a2223          	sw	s2,4(s4)
1c00822c:	47d1                	li	a5,20
1c00822e:	00fa2423          	sw	a5,8(s4)
1c008232:	0a042783          	lw	a5,160(s0)
1c008236:	00f4a023          	sw	a5,0(s1)
1c00823a:	0124a223          	sw	s2,4(s1)
1c00823e:	46c1                	li	a3,16
1c008240:	00d4a423          	sw	a3,8(s1)
1c008244:	974a                	add	a4,a4,s2
1c008246:	993e                	add	s2,s2,a5
1c008248:	08e42e23          	sw	a4,156(s0)
1c00824c:	0b242023          	sw	s2,160(s0)
1c008250:	b5fd                	j	1c00813e <__rt_spi_handle_repeat+0xe6>
1c008252:	70000737          	lui	a4,0x70000
1c008256:	c1b82733          	p.insert	a4,a6,0,27
1c00825a:	de08a733          	p.insert	a4,a7,15,0
1c00825e:	c1a7a733          	p.insert	a4,a5,0,26
1c008262:	c118                	sw	a4,0(a0)
1c008264:	02031b63          	bnez	t1,1c00829a <__rt_spi_handle_repeat+0x242>
1c008268:	ea0d                	bnez	a2,1c00829a <__rt_spi_handle_repeat+0x242>
1c00826a:	900007b7          	lui	a5,0x90000
1c00826e:	0785                	addi	a5,a5,1
1c008270:	c15c                	sw	a5,4(a0)
1c008272:	4709                	li	a4,2
1c008274:	09c42783          	lw	a5,156(s0)
1c008278:	00fa2023          	sw	a5,0(s4)
1c00827c:	012a2223          	sw	s2,4(s4)
1c008280:	46d1                	li	a3,20
1c008282:	00da2423          	sw	a3,8(s4)
1c008286:	4814                	lw	a3,16(s0)
1c008288:	00d4a023          	sw	a3,0(s1)
1c00828c:	070a                	slli	a4,a4,0x2
1c00828e:	00e4a223          	sw	a4,4(s1)
1c008292:	4741                	li	a4,16
1c008294:	00e4a423          	sw	a4,8(s1)
1c008298:	bde9                	j	1c008172 <__rt_spi_handle_repeat+0x11a>
1c00829a:	04c6c503          	lbu	a0,76(a3)
1c00829e:	ba9ff0ef          	jal	ra,1c007e46 <soc_eu_fcEventMask_setEvent>
1c0082a2:	4705                	li	a4,1
1c0082a4:	bfc1                	j	1c008274 <__rt_spi_handle_repeat+0x21c>

1c0082a6 <pi_spi_send_async>:
1c0082a6:	1101                	addi	sp,sp,-32
1c0082a8:	ce06                	sw	ra,28(sp)
1c0082aa:	cc22                	sw	s0,24(sp)
1c0082ac:	ca26                	sw	s1,20(sp)
1c0082ae:	c84a                	sw	s2,16(sp)
1c0082b0:	300474f3          	csrrci	s1,mstatus,8
1c0082b4:	00070a23          	sb	zero,20(a4) # 70000014 <__l2_end+0x53ff3c20>
1c0082b8:	00852883          	lw	a7,8(a0)
1c0082bc:	0008a803          	lw	a6,0(a7) # 10000 <__L1Cl>
1c0082c0:	00082783          	lw	a5,0(a6) # 1a102000 <__l1_end+0xa101fe0>
1c0082c4:	cf85                	beqz	a5,1c0082fc <pi_spi_send_async+0x56>
1c0082c6:	02072c23          	sw	zero,56(a4)
1c0082ca:	df48                	sw	a0,60(a4)
1c0082cc:	c32c                	sw	a1,64(a4)
1c0082ce:	c370                	sw	a2,68(a4)
1c0082d0:	c734                	sw	a3,72(a4)
1c0082d2:	00482783          	lw	a5,4(a6)
1c0082d6:	c385                	beqz	a5,1c0082f6 <pi_spi_send_async+0x50>
1c0082d8:	00882783          	lw	a5,8(a6)
1c0082dc:	cfd8                	sw	a4,28(a5)
1c0082de:	00e82423          	sw	a4,8(a6)
1c0082e2:	00072e23          	sw	zero,28(a4)
1c0082e6:	30049073          	csrw	mstatus,s1
1c0082ea:	40f2                	lw	ra,28(sp)
1c0082ec:	4462                	lw	s0,24(sp)
1c0082ee:	44d2                	lw	s1,20(sp)
1c0082f0:	4942                	lw	s2,16(sp)
1c0082f2:	6105                	addi	sp,sp,32
1c0082f4:	8082                	ret
1c0082f6:	00e82223          	sw	a4,4(a6)
1c0082fa:	b7d5                	j	1c0082de <pi_spi_send_async+0x38>
1c0082fc:	04c8c783          	lbu	a5,76(a7)
1c008300:	1a102337          	lui	t1,0x1a102
1c008304:	0785                	addi	a5,a5,1
1c008306:	4017d413          	srai	s0,a5,0x1
1c00830a:	041e                	slli	s0,s0,0x7
1c00830c:	0792                	slli	a5,a5,0x4
1c00830e:	8bc1                	andi	a5,a5,16
1c008310:	941a                	add	s0,s0,t1
1c008312:	943e                	add	s0,s0,a5
1c008314:	67c1                	lui	a5,0x10
1c008316:	02c7f363          	bleu	a2,a5,1c00833c <pi_spi_send_async+0x96>
1c00831a:	8e1d                	sub	a2,a2,a5
1c00831c:	6789                	lui	a5,0x2
1c00831e:	97ae                	add	a5,a5,a1
1c008320:	08f82e23          	sw	a5,156(a6)
1c008324:	4785                	li	a5,1
1c008326:	00c82623          	sw	a2,12(a6)
1c00832a:	0a882223          	sw	s0,164(a6)
1c00832e:	10a82423          	sw	a0,264(a6)
1c008332:	0af82423          	sw	a5,168(a6)
1c008336:	0ad82623          	sw	a3,172(a6)
1c00833a:	6641                	lui	a2,0x10
1c00833c:	00e82023          	sw	a4,0(a6)
1c008340:	03c8a783          	lw	a5,60(a7)
1c008344:	01082703          	lw	a4,16(a6)
1c008348:	00760913          	addi	s2,a2,7 # 10007 <__L1Cl+0x7>
1c00834c:	167d                	addi	a2,a2,-1
1c00834e:	c31c                	sw	a5,0(a4)
1c008350:	0488c783          	lbu	a5,72(a7)
1c008354:	00395913          	srli	s2,s2,0x3
1c008358:	c1c7c7b3          	p.bset	a5,a5,0,28
1c00835c:	c35c                	sw	a5,4(a4)
1c00835e:	0026d793          	srli	a5,a3,0x2
1c008362:	04d8c503          	lbu	a0,77(a7)
1c008366:	fa27b7b3          	p.bclr	a5,a5,29,2
1c00836a:	17fd                	addi	a5,a5,-1
1c00836c:	0017b793          	seqz	a5,a5
1c008370:	056a                	slli	a0,a0,0x1a
1c008372:	07ee                	slli	a5,a5,0x1b
1c008374:	8fc9                	or	a5,a5,a0
1c008376:	c3d7c7b3          	p.bset	a5,a5,1,29
1c00837a:	8e5d                	or	a2,a2,a5
1c00837c:	c710                	sw	a2,8(a4)
1c00837e:	fa26b6b3          	p.bclr	a3,a3,29,2
1c008382:	01082503          	lw	a0,16(a6)
1c008386:	00840613          	addi	a2,s0,8
1c00838a:	e2b9                	bnez	a3,1c0083d0 <pi_spi_send_async+0x12a>
1c00838c:	00c82783          	lw	a5,12(a6)
1c008390:	e3a1                	bnez	a5,1c0083d0 <pi_spi_send_async+0x12a>
1c008392:	00e42023          	sw	a4,0(s0)
1c008396:	47b1                	li	a5,12
1c008398:	00f42223          	sw	a5,4(s0)
1c00839c:	47c1                	li	a5,16
1c00839e:	00f42423          	sw	a5,8(s0)
1c0083a2:	00b42023          	sw	a1,0(s0)
1c0083a6:	01242223          	sw	s2,4(s0)
1c0083aa:	00f42423          	sw	a5,8(s0)
1c0083ae:	421c                	lw	a5,0(a2)
1c0083b0:	0207f793          	andi	a5,a5,32
1c0083b4:	ffed                	bnez	a5,1c0083ae <pi_spi_send_async+0x108>
1c0083b6:	900007b7          	lui	a5,0x90000
1c0083ba:	0785                	addi	a5,a5,1
1c0083bc:	c11c                	sw	a5,0(a0)
1c0083be:	00a42023          	sw	a0,0(s0)
1c0083c2:	4791                	li	a5,4
1c0083c4:	00f42223          	sw	a5,4(s0)
1c0083c8:	47c1                	li	a5,16
1c0083ca:	00f42423          	sw	a5,8(s0)
1c0083ce:	bf21                	j	1c0082e6 <pi_spi_send_async+0x40>
1c0083d0:	00e42023          	sw	a4,0(s0)
1c0083d4:	47b1                	li	a5,12
1c0083d6:	00f42223          	sw	a5,4(s0)
1c0083da:	47c1                	li	a5,16
1c0083dc:	00f42423          	sw	a5,8(s0)
1c0083e0:	421c                	lw	a5,0(a2)
1c0083e2:	8bc1                	andi	a5,a5,16
1c0083e4:	fff5                	bnez	a5,1c0083e0 <pi_spi_send_async+0x13a>
1c0083e6:	04c8c503          	lbu	a0,76(a7)
1c0083ea:	c62e                	sw	a1,12(sp)
1c0083ec:	0505                	addi	a0,a0,1
1c0083ee:	a59ff0ef          	jal	ra,1c007e46 <soc_eu_fcEventMask_setEvent>
1c0083f2:	45b2                	lw	a1,12(sp)
1c0083f4:	00b42023          	sw	a1,0(s0)
1c0083f8:	01242223          	sw	s2,4(s0)
1c0083fc:	b7f1                	j	1c0083c8 <pi_spi_send_async+0x122>

1c0083fe <pi_spi_receive_async>:
1c0083fe:	7179                	addi	sp,sp,-48
1c008400:	d606                	sw	ra,44(sp)
1c008402:	d422                	sw	s0,40(sp)
1c008404:	d226                	sw	s1,36(sp)
1c008406:	d04a                	sw	s2,32(sp)
1c008408:	ce4e                	sw	s3,28(sp)
1c00840a:	cc52                	sw	s4,24(sp)
1c00840c:	30047973          	csrrci	s2,mstatus,8
1c008410:	00070a23          	sb	zero,20(a4)
1c008414:	00852a03          	lw	s4,8(a0)
1c008418:	000a2403          	lw	s0,0(s4)
1c00841c:	401c                	lw	a5,0(s0)
1c00841e:	cb95                	beqz	a5,1c008452 <pi_spi_receive_async+0x54>
1c008420:	4785                	li	a5,1
1c008422:	df1c                	sw	a5,56(a4)
1c008424:	df48                	sw	a0,60(a4)
1c008426:	c32c                	sw	a1,64(a4)
1c008428:	c370                	sw	a2,68(a4)
1c00842a:	c734                	sw	a3,72(a4)
1c00842c:	405c                	lw	a5,4(s0)
1c00842e:	c385                	beqz	a5,1c00844e <pi_spi_receive_async+0x50>
1c008430:	441c                	lw	a5,8(s0)
1c008432:	cfd8                	sw	a4,28(a5)
1c008434:	c418                	sw	a4,8(s0)
1c008436:	00072e23          	sw	zero,28(a4)
1c00843a:	30091073          	csrw	mstatus,s2
1c00843e:	50b2                	lw	ra,44(sp)
1c008440:	5422                	lw	s0,40(sp)
1c008442:	5492                	lw	s1,36(sp)
1c008444:	5902                	lw	s2,32(sp)
1c008446:	49f2                	lw	s3,28(sp)
1c008448:	4a62                	lw	s4,24(sp)
1c00844a:	6145                	addi	sp,sp,48
1c00844c:	8082                	ret
1c00844e:	c058                	sw	a4,4(s0)
1c008450:	b7d5                	j	1c008434 <pi_spi_receive_async+0x36>
1c008452:	c018                	sw	a4,0(s0)
1c008454:	04ca4703          	lbu	a4,76(s4)
1c008458:	00760993          	addi	s3,a2,7
1c00845c:	0039d993          	srli	s3,s3,0x3
1c008460:	40175493          	srai	s1,a4,0x1
1c008464:	6789                	lui	a5,0x2
1c008466:	0137b7b3          	sltu	a5,a5,s3
1c00846a:	049e                	slli	s1,s1,0x7
1c00846c:	1a102837          	lui	a6,0x1a102
1c008470:	0712                	slli	a4,a4,0x4
1c008472:	94c2                	add	s1,s1,a6
1c008474:	8b41                	andi	a4,a4,16
1c008476:	07b6                	slli	a5,a5,0xd
1c008478:	94ba                	add	s1,s1,a4
1c00847a:	c78d                	beqz	a5,1c0084a4 <pi_spi_receive_async+0xa6>
1c00847c:	00379713          	slli	a4,a5,0x3
1c008480:	8e19                	sub	a2,a2,a4
1c008482:	c450                	sw	a2,12(s0)
1c008484:	00f58633          	add	a2,a1,a5
1c008488:	08c42e23          	sw	a2,156(s0)
1c00848c:	0a042823          	sw	zero,176(s0)
1c008490:	0a942223          	sw	s1,164(s0)
1c008494:	10a42423          	sw	a0,264(s0)
1c008498:	0a042423          	sw	zero,168(s0)
1c00849c:	0ad42623          	sw	a3,172(s0)
1c0084a0:	89be                	mv	s3,a5
1c0084a2:	863a                	mv	a2,a4
1c0084a4:	4818                	lw	a4,16(s0)
1c0084a6:	03ca2783          	lw	a5,60(s4)
1c0084aa:	167d                	addi	a2,a2,-1
1c0084ac:	c31c                	sw	a5,0(a4)
1c0084ae:	048a4783          	lbu	a5,72(s4)
1c0084b2:	c1c7c7b3          	p.bset	a5,a5,0,28
1c0084b6:	c35c                	sw	a5,4(a4)
1c0084b8:	0026d713          	srli	a4,a3,0x2
1c0084bc:	fa273733          	p.bclr	a4,a4,29,2
1c0084c0:	177d                	addi	a4,a4,-1
1c0084c2:	00173713          	seqz	a4,a4
1c0084c6:	700007b7          	lui	a5,0x70000
1c0084ca:	c1b727b3          	p.insert	a5,a4,0,27
1c0084ce:	04da4703          	lbu	a4,77(s4)
1c0084d2:	de0627b3          	p.insert	a5,a2,15,0
1c0084d6:	fa26b6b3          	p.bclr	a3,a3,29,2
1c0084da:	c1a727b3          	p.insert	a5,a4,0,26
1c0084de:	4818                	lw	a4,16(s0)
1c0084e0:	c71c                	sw	a5,8(a4)
1c0084e2:	e6a9                	bnez	a3,1c00852c <pi_spi_receive_async+0x12e>
1c0084e4:	445c                	lw	a5,12(s0)
1c0084e6:	e3b9                	bnez	a5,1c00852c <pi_spi_receive_async+0x12e>
1c0084e8:	900007b7          	lui	a5,0x90000
1c0084ec:	0785                	addi	a5,a5,1
1c0084ee:	c75c                	sw	a5,12(a4)
1c0084f0:	4691                	li	a3,4
1c0084f2:	04ca4703          	lbu	a4,76(s4)
1c0084f6:	0705                	addi	a4,a4,1
1c0084f8:	00b4a023          	sw	a1,0(s1)
1c0084fc:	0134a223          	sw	s3,4(s1)
1c008500:	47d1                	li	a5,20
1c008502:	00f4a423          	sw	a5,8(s1)
1c008506:	40175793          	srai	a5,a4,0x1
1c00850a:	1a102637          	lui	a2,0x1a102
1c00850e:	079e                	slli	a5,a5,0x7
1c008510:	0712                	slli	a4,a4,0x4
1c008512:	97b2                	add	a5,a5,a2
1c008514:	8b41                	andi	a4,a4,16
1c008516:	97ba                	add	a5,a5,a4
1c008518:	4818                	lw	a4,16(s0)
1c00851a:	00e7a023          	sw	a4,0(a5) # 90000000 <pulp__FC+0x90000001>
1c00851e:	068a                	slli	a3,a3,0x2
1c008520:	00d7a223          	sw	a3,4(a5)
1c008524:	4741                	li	a4,16
1c008526:	00e7a423          	sw	a4,8(a5)
1c00852a:	bf01                	j	1c00843a <pi_spi_receive_async+0x3c>
1c00852c:	04ca4503          	lbu	a0,76(s4)
1c008530:	c62e                	sw	a1,12(sp)
1c008532:	915ff0ef          	jal	ra,1c007e46 <soc_eu_fcEventMask_setEvent>
1c008536:	468d                	li	a3,3
1c008538:	45b2                	lw	a1,12(sp)
1c00853a:	bf65                	j	1c0084f2 <pi_spi_receive_async+0xf4>

1c00853c <pi_spi_transfer_async>:
1c00853c:	7179                	addi	sp,sp,-48
1c00853e:	8eaa                	mv	t4,a0
1c008540:	d606                	sw	ra,44(sp)
1c008542:	d422                	sw	s0,40(sp)
1c008544:	d226                	sw	s1,36(sp)
1c008546:	d04a                	sw	s2,32(sp)
1c008548:	ce4e                	sw	s3,28(sp)
1c00854a:	300479f3          	csrrci	s3,mstatus,8
1c00854e:	00078a23          	sb	zero,20(a5)
1c008552:	00852883          	lw	a7,8(a0)
1c008556:	fa273e33          	p.bclr	t3,a4,29,2
1c00855a:	0008a303          	lw	t1,0(a7)
1c00855e:	00032503          	lw	a0,0(t1) # 1a102000 <__l1_end+0xa101fe0>
1c008562:	c121                	beqz	a0,1c0085a2 <pi_spi_transfer_async+0x66>
1c008564:	4709                	li	a4,2
1c008566:	df98                	sw	a4,56(a5)
1c008568:	03d7ae23          	sw	t4,60(a5)
1c00856c:	c3ac                	sw	a1,64(a5)
1c00856e:	c3f0                	sw	a2,68(a5)
1c008570:	c7b4                	sw	a3,72(a5)
1c008572:	05c7a623          	sw	t3,76(a5)
1c008576:	00432703          	lw	a4,4(t1)
1c00857a:	c30d                	beqz	a4,1c00859c <pi_spi_transfer_async+0x60>
1c00857c:	00832703          	lw	a4,8(t1)
1c008580:	cf5c                	sw	a5,28(a4)
1c008582:	00f32423          	sw	a5,8(t1)
1c008586:	0007ae23          	sw	zero,28(a5)
1c00858a:	30099073          	csrw	mstatus,s3
1c00858e:	50b2                	lw	ra,44(sp)
1c008590:	5422                	lw	s0,40(sp)
1c008592:	5492                	lw	s1,36(sp)
1c008594:	5902                	lw	s2,32(sp)
1c008596:	49f2                	lw	s3,28(sp)
1c008598:	6145                	addi	sp,sp,48
1c00859a:	8082                	ret
1c00859c:	00f32223          	sw	a5,4(t1)
1c0085a0:	b7cd                	j	1c008582 <pi_spi_transfer_async+0x46>
1c0085a2:	04c8c503          	lbu	a0,76(a7)
1c0085a6:	1a102f37          	lui	t5,0x1a102
1c0085aa:	64c1                	lui	s1,0x10
1c0085ac:	40155913          	srai	s2,a0,0x1
1c0085b0:	091e                	slli	s2,s2,0x7
1c0085b2:	00451813          	slli	a6,a0,0x4
1c0085b6:	01087813          	andi	a6,a6,16
1c0085ba:	997a                	add	s2,s2,t5
1c0085bc:	9942                	add	s2,s2,a6
1c0085be:	00150813          	addi	a6,a0,1
1c0085c2:	40185413          	srai	s0,a6,0x1
1c0085c6:	041e                	slli	s0,s0,0x7
1c0085c8:	0812                	slli	a6,a6,0x4
1c0085ca:	947a                	add	s0,s0,t5
1c0085cc:	01087813          	andi	a6,a6,16
1c0085d0:	9442                	add	s0,s0,a6
1c0085d2:	02d4f863          	bleu	a3,s1,1c008602 <pi_spi_transfer_async+0xc6>
1c0085d6:	409684b3          	sub	s1,a3,s1
1c0085da:	6689                	lui	a3,0x2
1c0085dc:	00d60833          	add	a6,a2,a3
1c0085e0:	96ae                	add	a3,a3,a1
1c0085e2:	0ad32023          	sw	a3,160(t1)
1c0085e6:	4689                	li	a3,2
1c0085e8:	0ad32423          	sw	a3,168(t1)
1c0085ec:	00932623          	sw	s1,12(t1)
1c0085f0:	0a832223          	sw	s0,164(t1)
1c0085f4:	09032e23          	sw	a6,156(t1)
1c0085f8:	11d32423          	sw	t4,264(t1)
1c0085fc:	0ae32623          	sw	a4,172(t1)
1c008600:	66c1                	lui	a3,0x10
1c008602:	00f32023          	sw	a5,0(t1)
1c008606:	01032703          	lw	a4,16(t1)
1c00860a:	03c8a783          	lw	a5,60(a7)
1c00860e:	fff68813          	addi	a6,a3,-1 # ffff <__l1_heap_size+0x1f>
1c008612:	00768493          	addi	s1,a3,7
1c008616:	c31c                	sw	a5,0(a4)
1c008618:	0488c783          	lbu	a5,72(a7)
1c00861c:	808d                	srli	s1,s1,0x3
1c00861e:	00840693          	addi	a3,s0,8
1c008622:	c1c7c7b3          	p.bset	a5,a5,0,28
1c008626:	c35c                	sw	a5,4(a4)
1c008628:	04d8c783          	lbu	a5,77(a7)
1c00862c:	07ea                	slli	a5,a5,0x1a
1c00862e:	c3e7c7b3          	p.bset	a5,a5,1,30
1c008632:	0107e7b3          	or	a5,a5,a6
1c008636:	c71c                	sw	a5,8(a4)
1c008638:	01032803          	lw	a6,16(t1)
1c00863c:	040e1c63          	bnez	t3,1c008694 <pi_spi_transfer_async+0x158>
1c008640:	00c32783          	lw	a5,12(t1)
1c008644:	eba1                	bnez	a5,1c008694 <pi_spi_transfer_async+0x158>
1c008646:	00e42023          	sw	a4,0(s0)
1c00864a:	47b1                	li	a5,12
1c00864c:	00f42223          	sw	a5,4(s0)
1c008650:	47c1                	li	a5,16
1c008652:	00f42423          	sw	a5,8(s0)
1c008656:	00c92023          	sw	a2,0(s2) # 2000 <__rt_stack_size+0x1800>
1c00865a:	00992223          	sw	s1,4(s2)
1c00865e:	4751                	li	a4,20
1c008660:	00e92423          	sw	a4,8(s2)
1c008664:	00b42023          	sw	a1,0(s0)
1c008668:	00942223          	sw	s1,4(s0)
1c00866c:	00f42423          	sw	a5,8(s0)
1c008670:	429c                	lw	a5,0(a3)
1c008672:	0207f793          	andi	a5,a5,32
1c008676:	ffed                	bnez	a5,1c008670 <pi_spi_transfer_async+0x134>
1c008678:	900007b7          	lui	a5,0x90000
1c00867c:	0785                	addi	a5,a5,1
1c00867e:	00f82023          	sw	a5,0(a6) # 1a102000 <__l1_end+0xa101fe0>
1c008682:	01042023          	sw	a6,0(s0)
1c008686:	4791                	li	a5,4
1c008688:	00f42223          	sw	a5,4(s0)
1c00868c:	47c1                	li	a5,16
1c00868e:	00f42423          	sw	a5,8(s0)
1c008692:	bde5                	j	1c00858a <pi_spi_transfer_async+0x4e>
1c008694:	00e42023          	sw	a4,0(s0)
1c008698:	47b1                	li	a5,12
1c00869a:	00f42223          	sw	a5,4(s0)
1c00869e:	47c1                	li	a5,16
1c0086a0:	00f42423          	sw	a5,8(s0)
1c0086a4:	429c                	lw	a5,0(a3)
1c0086a6:	8bc1                	andi	a5,a5,16
1c0086a8:	fff5                	bnez	a5,1c0086a4 <pi_spi_transfer_async+0x168>
1c0086aa:	c432                	sw	a2,8(sp)
1c0086ac:	c62e                	sw	a1,12(sp)
1c0086ae:	f98ff0ef          	jal	ra,1c007e46 <soc_eu_fcEventMask_setEvent>
1c0086b2:	4622                	lw	a2,8(sp)
1c0086b4:	00c92023          	sw	a2,0(s2)
1c0086b8:	00992223          	sw	s1,4(s2)
1c0086bc:	47d1                	li	a5,20
1c0086be:	00f92423          	sw	a5,8(s2)
1c0086c2:	45b2                	lw	a1,12(sp)
1c0086c4:	00b42023          	sw	a1,0(s0)
1c0086c8:	00942223          	sw	s1,4(s0)
1c0086cc:	b7c1                	j	1c00868c <pi_spi_transfer_async+0x150>

1c0086ce <pos_spim_send_enqueue_transfer>:
1c0086ce:	1101                	addi	sp,sp,-32
1c0086d0:	cc22                	sw	s0,24(sp)
1c0086d2:	ca26                	sw	s1,20(sp)
1c0086d4:	4180                	lw	s0,0(a1)
1c0086d6:	84ae                	mv	s1,a1
1c0086d8:	4d90                	lw	a2,24(a1)
1c0086da:	48c8                	lw	a0,20(s1)
1c0086dc:	c452                	sw	s4,8(sp)
1c0086de:	0445aa03          	lw	s4,68(a1)
1c0086e2:	0b840593          	addi	a1,s0,184
1c0086e6:	c84a                	sw	s2,16(sp)
1c0086e8:	c64e                	sw	s3,12(sp)
1c0086ea:	0b442903          	lw	s2,180(s0)
1c0086ee:	ce06                	sw	ra,28(sp)
1c0086f0:	0b042983          	lw	s3,176(s0)
1c0086f4:	723000ef          	jal	ra,1c009616 <memcpy>
1c0086f8:	549c                	lw	a5,40(s1)
1c0086fa:	0204a883          	lw	a7,32(s1) # 10020 <__L1Cl+0x20>
1c0086fe:	fa2935b3          	p.bclr	a1,s2,29,2
1c008702:	0785                	addi	a5,a5,1
1c008704:	078a                	slli	a5,a5,0x2
1c008706:	0b442603          	lw	a2,180(s0)
1c00870a:	0b042503          	lw	a0,176(s0)
1c00870e:	10042803          	lw	a6,256(s0)
1c008712:	00f88e33          	add	t3,a7,a5
1c008716:	0b842303          	lw	t1,184(s0)
1c00871a:	4c18                	lw	a4,24(s0)
1c00871c:	c1c5                	beqz	a1,1c0087bc <pos_spim_send_enqueue_transfer+0xee>
1c00871e:	4691                	li	a3,4
1c008720:	8e8d                	sub	a3,a3,a1
1c008722:	0536d6b3          	p.minu	a3,a3,s3
1c008726:	00369593          	slli	a1,a3,0x3
1c00872a:	15fd                	addi	a1,a1,-1
1c00872c:	de05a833          	p.insert	a6,a1,15,0
1c008730:	ff0e2e23          	sw	a6,-4(t3)
1c008734:	20d6758b          	p.lw	a1,a3(a2!)
1c008738:	8d15                	sub	a0,a0,a3
1c00873a:	969a                	add	a3,a3,t1
1c00873c:	00b8e7a3          	p.sw	a1,a5(a7)
1c008740:	900005b7          	lui	a1,0x90000
1c008744:	0585                	addi	a1,a1,1
1c008746:	00be2223          	sw	a1,4(t3)
1c00874a:	0ac42a23          	sw	a2,180(s0)
1c00874e:	0aa42823          	sw	a0,176(s0)
1c008752:	0ad42c23          	sw	a3,184(s0)
1c008756:	e11d                	bnez	a0,1c00877c <pos_spim_send_enqueue_transfer+0xae>
1c008758:	0c842583          	lw	a1,200(s0)
1c00875c:	c9b9                	beqz	a1,1c0087b2 <pos_spim_send_enqueue_transfer+0xe4>
1c00875e:	0c042503          	lw	a0,192(s0)
1c008762:	04a5d633          	p.minu	a2,a1,a0
1c008766:	8d91                	sub	a1,a1,a2
1c008768:	0ac42823          	sw	a2,176(s0)
1c00876c:	0c442603          	lw	a2,196(s0)
1c008770:	0cb42423          	sw	a1,200(s0)
1c008774:	8e09                	sub	a2,a2,a0
1c008776:	96b2                	add	a3,a3,a2
1c008778:	0ad42c23          	sw	a3,184(s0)
1c00877c:	1c0026b7          	lui	a3,0x1c002
1c008780:	34268693          	addi	a3,a3,834 # 1c002342 <__pos_spim_send_enqueue_transfer>
1c008784:	0709                	addi	a4,a4,2
1c008786:	070a                	slli	a4,a4,0x2
1c008788:	2ad72c23          	sw	a3,696(a4)
1c00878c:	0f842703          	lw	a4,248(s0)
1c008790:	0741                	addi	a4,a4,16
1c008792:	01172023          	sw	a7,0(a4)
1c008796:	07a1                	addi	a5,a5,8
1c008798:	00f72223          	sw	a5,4(a4)
1c00879c:	47c1                	li	a5,16
1c00879e:	00f72423          	sw	a5,8(a4)
1c0087a2:	40f2                	lw	ra,28(sp)
1c0087a4:	4462                	lw	s0,24(sp)
1c0087a6:	44d2                	lw	s1,20(sp)
1c0087a8:	4942                	lw	s2,16(sp)
1c0087aa:	49b2                	lw	s3,12(sp)
1c0087ac:	4a22                	lw	s4,8(sp)
1c0087ae:	6105                	addi	sp,sp,32
1c0087b0:	8082                	ret
1c0087b2:	1c0026b7          	lui	a3,0x1c002
1c0087b6:	35668693          	addi	a3,a3,854 # 1c002356 <__pos_spim_handle_copy_eot>
1c0087ba:	b7e9                	j	1c008784 <pos_spim_send_enqueue_transfer+0xb6>
1c0087bc:	0549d5b3          	p.minu	a1,s3,s4
1c0087c0:	00b306b3          	add	a3,t1,a1
1c0087c4:	0ad42c23          	sw	a3,184(s0)
1c0087c8:	8d0d                	sub	a0,a0,a1
1c0087ca:	00359693          	slli	a3,a1,0x3
1c0087ce:	0aa42823          	sw	a0,176(s0)
1c0087d2:	16fd                	addi	a3,a3,-1
1c0087d4:	de06a833          	p.insert	a6,a3,15,0
1c0087d8:	962e                	add	a2,a2,a1
1c0087da:	0b042683          	lw	a3,176(s0)
1c0087de:	0ac42a23          	sw	a2,180(s0)
1c0087e2:	ff0e2e23          	sw	a6,-4(t3)
1c0087e6:	e68d                	bnez	a3,1c008810 <pos_spim_send_enqueue_transfer+0x142>
1c0087e8:	0c842603          	lw	a2,200(s0)
1c0087ec:	ca35                	beqz	a2,1c008860 <pos_spim_send_enqueue_transfer+0x192>
1c0087ee:	0c042503          	lw	a0,192(s0)
1c0087f2:	04a656b3          	p.minu	a3,a2,a0
1c0087f6:	8e15                	sub	a2,a2,a3
1c0087f8:	0cc42423          	sw	a2,200(s0)
1c0087fc:	0ad42823          	sw	a3,176(s0)
1c008800:	0c442603          	lw	a2,196(s0)
1c008804:	0b842683          	lw	a3,184(s0)
1c008808:	96b2                	add	a3,a3,a2
1c00880a:	8e89                	sub	a3,a3,a0
1c00880c:	0ad42c23          	sw	a3,184(s0)
1c008810:	1c002637          	lui	a2,0x1c002
1c008814:	34260613          	addi	a2,a2,834 # 1c002342 <__pos_spim_send_enqueue_transfer>
1c008818:	0f842683          	lw	a3,248(s0)
1c00881c:	0709                	addi	a4,a4,2
1c00881e:	070a                	slli	a4,a4,0x2
1c008820:	2ac72c23          	sw	a2,696(a4)
1c008824:	01068713          	addi	a4,a3,16
1c008828:	01172023          	sw	a7,0(a4)
1c00882c:	00f72223          	sw	a5,4(a4)
1c008830:	47c1                	li	a5,16
1c008832:	00f72423          	sw	a5,8(a4)
1c008836:	01272023          	sw	s2,0(a4)
1c00883a:	00b72223          	sw	a1,4(a4)
1c00883e:	47d1                	li	a5,20
1c008840:	00f72423          	sw	a5,8(a4)
1c008844:	06e1                	addi	a3,a3,24
1c008846:	429c                	lw	a5,0(a3)
1c008848:	0207f793          	andi	a5,a5,32
1c00884c:	ffed                	bnez	a5,1c008846 <pos_spim_send_enqueue_transfer+0x178>
1c00884e:	4814                	lw	a3,16(s0)
1c008850:	900007b7          	lui	a5,0x90000
1c008854:	0785                	addi	a5,a5,1
1c008856:	c29c                	sw	a5,0(a3)
1c008858:	00d72023          	sw	a3,0(a4)
1c00885c:	4791                	li	a5,4
1c00885e:	bf2d                	j	1c008798 <pos_spim_send_enqueue_transfer+0xca>
1c008860:	1c002637          	lui	a2,0x1c002
1c008864:	35660613          	addi	a2,a2,854 # 1c002356 <__pos_spim_handle_copy_eot>
1c008868:	bf45                	j	1c008818 <pos_spim_send_enqueue_transfer+0x14a>

1c00886a <pos_spim_send_handle_misaligned>:
1c00886a:	4f1c                	lw	a5,24(a4)
1c00886c:	0ab72c23          	sw	a1,184(a4)
1c008870:	0ac72a23          	sw	a2,180(a4)
1c008874:	0789                	addi	a5,a5,2
1c008876:	0ad72823          	sw	a3,176(a4)
1c00887a:	0c072423          	sw	zero,200(a4)
1c00887e:	078a                	slli	a5,a5,0x2
1c008880:	2ea7a023          	sw	a0,736(a5) # 900002e0 <pulp__FC+0x900002e1>
1c008884:	85aa                	mv	a1,a0
1c008886:	4501                	li	a0,0
1c008888:	e47ff06f          	j	1c0086ce <pos_spim_send_enqueue_transfer>

1c00888c <pos_spim_send_handle_misaligned_2d>:
1c00888c:	04f6d8b3          	p.minu	a7,a3,a5
1c008890:	0cf82023          	sw	a5,192(a6)
1c008894:	01882783          	lw	a5,24(a6)
1c008898:	411686b3          	sub	a3,a3,a7
1c00889c:	0ab82c23          	sw	a1,184(a6)
1c0088a0:	0789                	addi	a5,a5,2
1c0088a2:	0ac82a23          	sw	a2,180(a6)
1c0088a6:	0b182823          	sw	a7,176(a6)
1c0088aa:	0ce82223          	sw	a4,196(a6)
1c0088ae:	0cd82423          	sw	a3,200(a6)
1c0088b2:	078a                	slli	a5,a5,0x2
1c0088b4:	2ea7a023          	sw	a0,736(a5)
1c0088b8:	85aa                	mv	a1,a0
1c0088ba:	4501                	li	a0,0
1c0088bc:	e13ff06f          	j	1c0086ce <pos_spim_send_enqueue_transfer>

1c0088c0 <pos_spim_receive_enqueue_transfer>:
1c0088c0:	1101                	addi	sp,sp,-32
1c0088c2:	cc22                	sw	s0,24(sp)
1c0088c4:	4180                	lw	s0,0(a1)
1c0088c6:	ca26                	sw	s1,20(sp)
1c0088c8:	ce06                	sw	ra,28(sp)
1c0088ca:	4c1c                	lw	a5,24(s0)
1c0088cc:	0cc42703          	lw	a4,204(s0)
1c0088d0:	0b042483          	lw	s1,176(s0)
1c0088d4:	0789                	addi	a5,a5,2
1c0088d6:	078a                	slli	a5,a5,0x2
1c0088d8:	c84a                	sw	s2,16(sp)
1c0088da:	c64e                	sw	s3,12(sp)
1c0088dc:	c452                	sw	s4,8(sp)
1c0088de:	2ae7ac23          	sw	a4,696(a5)
1c0088e2:	0e048f63          	beqz	s1,1c0089e0 <pos_spim_receive_enqueue_transfer+0x120>
1c0088e6:	892e                	mv	s2,a1
1c0088e8:	4990                	lw	a2,16(a1)
1c0088ea:	00c92503          	lw	a0,12(s2)
1c0088ee:	0405a983          	lw	s3,64(a1) # 90000040 <pulp__FC+0x90000041>
1c0088f2:	0b840593          	addi	a1,s0,184
1c0088f6:	0b442a03          	lw	s4,180(s0)
1c0088fa:	51d000ef          	jal	ra,1c009616 <memcpy>
1c0088fe:	02492783          	lw	a5,36(s2)
1c008902:	470d                	li	a4,3
1c008904:	01c92583          	lw	a1,28(s2)
1c008908:	fa2a38b3          	p.bclr	a7,s4,29,2
1c00890c:	0b042503          	lw	a0,176(s0)
1c008910:	0b442603          	lw	a2,180(s0)
1c008914:	0b842803          	lw	a6,184(s0)
1c008918:	078a                	slli	a5,a5,0x2
1c00891a:	00977463          	bleu	s1,a4,1c008922 <pos_spim_receive_enqueue_transfer+0x62>
1c00891e:	0c088d63          	beqz	a7,1c0089f8 <pos_spim_receive_enqueue_transfer+0x138>
1c008922:	0f042683          	lw	a3,240(s0)
1c008926:	0016c713          	xori	a4,a3,1
1c00892a:	0ee42823          	sw	a4,240(s0)
1c00892e:	4711                	li	a4,4
1c008930:	41170733          	sub	a4,a4,a7
1c008934:	0692                	slli	a3,a3,0x4
1c008936:	04975733          	p.minu	a4,a4,s1
1c00893a:	96a2                	add	a3,a3,s0
1c00893c:	0cc6aa23          	sw	a2,212(a3)
1c008940:	0ce6ac23          	sw	a4,216(a3)
1c008944:	0c06ae23          	sw	zero,220(a3)
1c008948:	963a                	add	a2,a2,a4
1c00894a:	0ac42a23          	sw	a2,180(s0)
1c00894e:	1c002637          	lui	a2,0x1c002
1c008952:	31a60613          	addi	a2,a2,794 # 1c00231a <__pos_spim_receive_handle_temp_buffer>
1c008956:	8d19                	sub	a0,a0,a4
1c008958:	0cc42623          	sw	a2,204(s0)
1c00895c:	0fc42603          	lw	a2,252(s0)
1c008960:	0aa42823          	sw	a0,176(s0)
1c008964:	00371513          	slli	a0,a4,0x3
1c008968:	983a                	add	a6,a6,a4
1c00896a:	157d                	addi	a0,a0,-1
1c00896c:	de052633          	p.insert	a2,a0,15,0
1c008970:	0b042c23          	sw	a6,184(s0)
1c008974:	00c5e7a3          	p.sw	a2,a5(a1)
1c008978:	0b042603          	lw	a2,176(s0)
1c00897c:	ea05                	bnez	a2,1c0089ac <pos_spim_receive_enqueue_transfer+0xec>
1c00897e:	0c842503          	lw	a0,200(s0)
1c008982:	c53d                	beqz	a0,1c0089f0 <pos_spim_receive_enqueue_transfer+0x130>
1c008984:	0c042803          	lw	a6,192(s0)
1c008988:	0c06ae23          	sw	zero,220(a3)
1c00898c:	05055633          	p.minu	a2,a0,a6
1c008990:	8d11                	sub	a0,a0,a2
1c008992:	0ca42423          	sw	a0,200(s0)
1c008996:	0ac42823          	sw	a2,176(s0)
1c00899a:	0c442503          	lw	a0,196(s0)
1c00899e:	0b842603          	lw	a2,184(s0)
1c0089a2:	962a                	add	a2,a2,a0
1c0089a4:	41060633          	sub	a2,a2,a6
1c0089a8:	0ac42c23          	sw	a2,184(s0)
1c0089ac:	90000637          	lui	a2,0x90000
1c0089b0:	00f58533          	add	a0,a1,a5
1c0089b4:	0605                	addi	a2,a2,1
1c0089b6:	c150                	sw	a2,4(a0)
1c0089b8:	0f842603          	lw	a2,248(s0)
1c0089bc:	0d06a683          	lw	a3,208(a3)
1c0089c0:	00d62023          	sw	a3,0(a2) # 90000000 <pulp__FC+0x90000001>
1c0089c4:	00e62223          	sw	a4,4(a2)
1c0089c8:	4751                	li	a4,20
1c0089ca:	00e62423          	sw	a4,8(a2)
1c0089ce:	0641                	addi	a2,a2,16
1c0089d0:	00b62023          	sw	a1,0(a2)
1c0089d4:	07a1                	addi	a5,a5,8
1c0089d6:	00f62223          	sw	a5,4(a2)
1c0089da:	47c1                	li	a5,16
1c0089dc:	00f62423          	sw	a5,8(a2)
1c0089e0:	40f2                	lw	ra,28(sp)
1c0089e2:	4462                	lw	s0,24(sp)
1c0089e4:	44d2                	lw	s1,20(sp)
1c0089e6:	4942                	lw	s2,16(sp)
1c0089e8:	49b2                	lw	s3,12(sp)
1c0089ea:	4a22                	lw	s4,8(sp)
1c0089ec:	6105                	addi	sp,sp,32
1c0089ee:	8082                	ret
1c0089f0:	4605                	li	a2,1
1c0089f2:	0cc6ae23          	sw	a2,220(a3)
1c0089f6:	bf5d                	j	1c0089ac <pos_spim_receive_enqueue_transfer+0xec>
1c0089f8:	1c002737          	lui	a4,0x1c002
1c0089fc:	32e70713          	addi	a4,a4,814 # 1c00232e <__pos_spim_receive_enqueue_transfer>
1c008a00:	0ce42623          	sw	a4,204(s0)
1c008a04:	0099e463          	bltu	s3,s1,1c008a0c <pos_spim_receive_enqueue_transfer+0x14c>
1c008a08:	c204b9b3          	p.bclr	s3,s1,1,0
1c008a0c:	0fc42703          	lw	a4,252(s0)
1c008a10:	00399693          	slli	a3,s3,0x3
1c008a14:	16fd                	addi	a3,a3,-1
1c008a16:	984e                	add	a6,a6,s3
1c008a18:	964e                	add	a2,a2,s3
1c008a1a:	41350533          	sub	a0,a0,s3
1c008a1e:	0aa42823          	sw	a0,176(s0)
1c008a22:	de06a733          	p.insert	a4,a3,15,0
1c008a26:	0b042c23          	sw	a6,184(s0)
1c008a2a:	0ac42a23          	sw	a2,180(s0)
1c008a2e:	900006b7          	lui	a3,0x90000
1c008a32:	00e5e7a3          	p.sw	a4,a5(a1)
1c008a36:	0685                	addi	a3,a3,1
1c008a38:	00f58733          	add	a4,a1,a5
1c008a3c:	c354                	sw	a3,4(a4)
1c008a3e:	0b042703          	lw	a4,176(s0)
1c008a42:	e70d                	bnez	a4,1c008a6c <pos_spim_receive_enqueue_transfer+0x1ac>
1c008a44:	0c842683          	lw	a3,200(s0)
1c008a48:	c6a9                	beqz	a3,1c008a92 <pos_spim_receive_enqueue_transfer+0x1d2>
1c008a4a:	0c042603          	lw	a2,192(s0)
1c008a4e:	04c6d733          	p.minu	a4,a3,a2
1c008a52:	8e99                	sub	a3,a3,a4
1c008a54:	0cd42423          	sw	a3,200(s0)
1c008a58:	0ae42823          	sw	a4,176(s0)
1c008a5c:	0c442683          	lw	a3,196(s0)
1c008a60:	0b842703          	lw	a4,184(s0)
1c008a64:	9736                	add	a4,a4,a3
1c008a66:	8f11                	sub	a4,a4,a2
1c008a68:	0ae42c23          	sw	a4,184(s0)
1c008a6c:	0f842703          	lw	a4,248(s0)
1c008a70:	01472023          	sw	s4,0(a4)
1c008a74:	01372223          	sw	s3,4(a4)
1c008a78:	46d1                	li	a3,20
1c008a7a:	00d72423          	sw	a3,8(a4)
1c008a7e:	0741                	addi	a4,a4,16
1c008a80:	00b72023          	sw	a1,0(a4)
1c008a84:	07a1                	addi	a5,a5,8
1c008a86:	00f72223          	sw	a5,4(a4)
1c008a8a:	47c1                	li	a5,16
1c008a8c:	00f72423          	sw	a5,8(a4)
1c008a90:	bf81                	j	1c0089e0 <pos_spim_receive_enqueue_transfer+0x120>
1c008a92:	1c002737          	lui	a4,0x1c002
1c008a96:	35670713          	addi	a4,a4,854 # 1c002356 <__pos_spim_handle_copy_eot>
1c008a9a:	0ce42623          	sw	a4,204(s0)
1c008a9e:	b7f9                	j	1c008a6c <pos_spim_receive_enqueue_transfer+0x1ac>

1c008aa0 <pos_spim_receive_handle_misaligned>:
1c008aa0:	4f1c                	lw	a5,24(a4)
1c008aa2:	1101                	addi	sp,sp,-32
1c008aa4:	cc22                	sw	s0,24(sp)
1c008aa6:	ce06                	sw	ra,28(sp)
1c008aa8:	0789                	addi	a5,a5,2
1c008aaa:	0ab72c23          	sw	a1,184(a4)
1c008aae:	0ac72a23          	sw	a2,180(a4)
1c008ab2:	0ad72823          	sw	a3,176(a4)
1c008ab6:	0c072423          	sw	zero,200(a4)
1c008aba:	078a                	slli	a5,a5,0x2
1c008abc:	2ea7a023          	sw	a0,736(a5)
1c008ac0:	85aa                	mv	a1,a0
1c008ac2:	842a                	mv	s0,a0
1c008ac4:	4501                	li	a0,0
1c008ac6:	c63a                	sw	a4,12(sp)
1c008ac8:	df9ff0ef          	jal	ra,1c0088c0 <pos_spim_receive_enqueue_transfer>
1c008acc:	4732                	lw	a4,12(sp)
1c008ace:	0b072783          	lw	a5,176(a4)
1c008ad2:	cb81                	beqz	a5,1c008ae2 <pos_spim_receive_handle_misaligned+0x42>
1c008ad4:	85a2                	mv	a1,s0
1c008ad6:	4462                	lw	s0,24(sp)
1c008ad8:	40f2                	lw	ra,28(sp)
1c008ada:	4501                	li	a0,0
1c008adc:	6105                	addi	sp,sp,32
1c008ade:	de3ff06f          	j	1c0088c0 <pos_spim_receive_enqueue_transfer>
1c008ae2:	4f1c                	lw	a5,24(a4)
1c008ae4:	0cc72703          	lw	a4,204(a4)
1c008ae8:	40f2                	lw	ra,28(sp)
1c008aea:	4462                	lw	s0,24(sp)
1c008aec:	0789                	addi	a5,a5,2
1c008aee:	078a                	slli	a5,a5,0x2
1c008af0:	2ae7ac23          	sw	a4,696(a5)
1c008af4:	6105                	addi	sp,sp,32
1c008af6:	8082                	ret

1c008af8 <pos_spim_receive_handle_misaligned_2d>:
1c008af8:	1101                	addi	sp,sp,-32
1c008afa:	cc22                	sw	s0,24(sp)
1c008afc:	ce06                	sw	ra,28(sp)
1c008afe:	0cf82023          	sw	a5,192(a6)
1c008b02:	842a                	mv	s0,a0
1c008b04:	04f6d533          	p.minu	a0,a3,a5
1c008b08:	01882783          	lw	a5,24(a6)
1c008b0c:	8e89                	sub	a3,a3,a0
1c008b0e:	0ab82c23          	sw	a1,184(a6)
1c008b12:	0789                	addi	a5,a5,2
1c008b14:	0aa82823          	sw	a0,176(a6)
1c008b18:	0ac82a23          	sw	a2,180(a6)
1c008b1c:	0ce82223          	sw	a4,196(a6)
1c008b20:	0cd82423          	sw	a3,200(a6)
1c008b24:	078a                	slli	a5,a5,0x2
1c008b26:	85a2                	mv	a1,s0
1c008b28:	4501                	li	a0,0
1c008b2a:	2e87a023          	sw	s0,736(a5)
1c008b2e:	c642                	sw	a6,12(sp)
1c008b30:	d91ff0ef          	jal	ra,1c0088c0 <pos_spim_receive_enqueue_transfer>
1c008b34:	4832                	lw	a6,12(sp)
1c008b36:	0b082783          	lw	a5,176(a6)
1c008b3a:	cb81                	beqz	a5,1c008b4a <pos_spim_receive_handle_misaligned_2d+0x52>
1c008b3c:	85a2                	mv	a1,s0
1c008b3e:	4462                	lw	s0,24(sp)
1c008b40:	40f2                	lw	ra,28(sp)
1c008b42:	4501                	li	a0,0
1c008b44:	6105                	addi	sp,sp,32
1c008b46:	d7bff06f          	j	1c0088c0 <pos_spim_receive_enqueue_transfer>
1c008b4a:	01882783          	lw	a5,24(a6)
1c008b4e:	0cc82703          	lw	a4,204(a6)
1c008b52:	40f2                	lw	ra,28(sp)
1c008b54:	4462                	lw	s0,24(sp)
1c008b56:	0789                	addi	a5,a5,2
1c008b58:	078a                	slli	a5,a5,0x2
1c008b5a:	2ae7ac23          	sw	a4,696(a5)
1c008b5e:	6105                	addi	sp,sp,32
1c008b60:	8082                	ret

1c008b62 <pi_spi_copy_async>:
1c008b62:	8eaa                	mv	t4,a0
1c008b64:	4508                	lw	a0,8(a0)
1c008b66:	1101                	addi	sp,sp,-32
1c008b68:	8e3e                	mv	t3,a5
1c008b6a:	00052303          	lw	t1,0(a0)
1c008b6e:	ce06                	sw	ra,28(sp)
1c008b70:	cc22                	sw	s0,24(sp)
1c008b72:	30047473          	csrrci	s0,mstatus,8
1c008b76:	00032783          	lw	a5,0(t1)
1c008b7a:	e3b1                	bnez	a5,1c008bbe <pi_spi_copy_async+0x5c>
1c008b7c:	c22717b3          	p.extractu	a5,a4,1,2
1c008b80:	17fd                	addi	a5,a5,-1
1c008b82:	c0471733          	p.extractu	a4,a4,0,4
1c008b86:	01c32023          	sw	t3,0(t1)
1c008b8a:	0017b793          	seqz	a5,a5
1c008b8e:	cf19                	beqz	a4,1c008bac <pi_spi_copy_async+0x4a>
1c008b90:	4158                	lw	a4,4(a0)
1c008b92:	c1b7a733          	p.insert	a4,a5,0,27
1c008b96:	0ee32e23          	sw	a4,252(t1)
1c008b9a:	871a                	mv	a4,t1
1c008b9c:	f05ff0ef          	jal	ra,1c008aa0 <pos_spim_receive_handle_misaligned>
1c008ba0:	30041073          	csrw	mstatus,s0
1c008ba4:	40f2                	lw	ra,28(sp)
1c008ba6:	4462                	lw	s0,24(sp)
1c008ba8:	6105                	addi	sp,sp,32
1c008baa:	8082                	ret
1c008bac:	4518                	lw	a4,8(a0)
1c008bae:	c1b7a733          	p.insert	a4,a5,0,27
1c008bb2:	10e32023          	sw	a4,256(t1)
1c008bb6:	871a                	mv	a4,t1
1c008bb8:	cb3ff0ef          	jal	ra,1c00886a <pos_spim_send_handle_misaligned>
1c008bbc:	b7d5                	j	1c008ba0 <pi_spi_copy_async+0x3e>
1c008bbe:	8836                	mv	a6,a3
1c008bc0:	88ba                	mv	a7,a4
1c008bc2:	87b2                	mv	a5,a2
1c008bc4:	872e                	mv	a4,a1
1c008bc6:	c202                	sw	zero,4(sp)
1c008bc8:	c002                	sw	zero,0(sp)
1c008bca:	86f6                	mv	a3,t4
1c008bcc:	460d                	li	a2,3
1c008bce:	85f2                	mv	a1,t3
1c008bd0:	851a                	mv	a0,t1
1c008bd2:	9caff0ef          	jal	ra,1c007d9c <pos_spim_enqueue_to_pending_7>
1c008bd6:	b7e9                	j	1c008ba0 <pi_spi_copy_async+0x3e>

1c008bd8 <pi_spi_copy_2d_async>:
1c008bd8:	8eaa                	mv	t4,a0
1c008bda:	4508                	lw	a0,8(a0)
1c008bdc:	1101                	addi	sp,sp,-32
1c008bde:	8e46                	mv	t3,a7
1c008be0:	00052303          	lw	t1,0(a0)
1c008be4:	ce06                	sw	ra,28(sp)
1c008be6:	cc22                	sw	s0,24(sp)
1c008be8:	30047473          	csrrci	s0,mstatus,8
1c008bec:	00032883          	lw	a7,0(t1)
1c008bf0:	04089663          	bnez	a7,1c008c3c <pi_spi_copy_2d_async+0x64>
1c008bf4:	c22818b3          	p.extractu	a7,a6,1,2
1c008bf8:	18fd                	addi	a7,a7,-1
1c008bfa:	c0481833          	p.extractu	a6,a6,0,4
1c008bfe:	01c32023          	sw	t3,0(t1)
1c008c02:	0018b893          	seqz	a7,a7
1c008c06:	02080163          	beqz	a6,1c008c28 <pi_spi_copy_2d_async+0x50>
1c008c0a:	00452803          	lw	a6,4(a0)
1c008c0e:	c1b8a833          	p.insert	a6,a7,0,27
1c008c12:	0f032e23          	sw	a6,252(t1)
1c008c16:	881a                	mv	a6,t1
1c008c18:	ee1ff0ef          	jal	ra,1c008af8 <pos_spim_receive_handle_misaligned_2d>
1c008c1c:	30041073          	csrw	mstatus,s0
1c008c20:	40f2                	lw	ra,28(sp)
1c008c22:	4462                	lw	s0,24(sp)
1c008c24:	6105                	addi	sp,sp,32
1c008c26:	8082                	ret
1c008c28:	00852803          	lw	a6,8(a0)
1c008c2c:	c1b8a833          	p.insert	a6,a7,0,27
1c008c30:	11032023          	sw	a6,256(t1)
1c008c34:	881a                	mv	a6,t1
1c008c36:	c57ff0ef          	jal	ra,1c00888c <pos_spim_send_handle_misaligned_2d>
1c008c3a:	b7cd                	j	1c008c1c <pi_spi_copy_2d_async+0x44>
1c008c3c:	c242                	sw	a6,4(sp)
1c008c3e:	c03e                	sw	a5,0(sp)
1c008c40:	88ba                	mv	a7,a4
1c008c42:	8836                	mv	a6,a3
1c008c44:	87b2                	mv	a5,a2
1c008c46:	872e                	mv	a4,a1
1c008c48:	86f6                	mv	a3,t4
1c008c4a:	4611                	li	a2,4
1c008c4c:	85f2                	mv	a1,t3
1c008c4e:	851a                	mv	a0,t1
1c008c50:	94cff0ef          	jal	ra,1c007d9c <pos_spim_enqueue_to_pending_7>
1c008c54:	b7e1                	j	1c008c1c <pi_spi_copy_2d_async+0x44>

1c008c56 <__pi_handle_waiting_copy>:
1c008c56:	5d18                	lw	a4,56(a0)
1c008c58:	87aa                	mv	a5,a0
1c008c5a:	eb01                	bnez	a4,1c008c6a <__pi_handle_waiting_copy+0x14>
1c008c5c:	872a                	mv	a4,a0
1c008c5e:	4534                	lw	a3,72(a0)
1c008c60:	4170                	lw	a2,68(a0)
1c008c62:	412c                	lw	a1,64(a0)
1c008c64:	5d48                	lw	a0,60(a0)
1c008c66:	e40ff06f          	j	1c0082a6 <pi_spi_send_async>
1c008c6a:	00173963          	p.bneimm	a4,1,1c008c7c <__pi_handle_waiting_copy+0x26>
1c008c6e:	872a                	mv	a4,a0
1c008c70:	4534                	lw	a3,72(a0)
1c008c72:	4170                	lw	a2,68(a0)
1c008c74:	412c                	lw	a1,64(a0)
1c008c76:	5d48                	lw	a0,60(a0)
1c008c78:	f86ff06f          	j	1c0083fe <pi_spi_receive_async>
1c008c7c:	00273963          	p.bneimm	a4,2,1c008c8e <__pi_handle_waiting_copy+0x38>
1c008c80:	4578                	lw	a4,76(a0)
1c008c82:	4534                	lw	a3,72(a0)
1c008c84:	4170                	lw	a2,68(a0)
1c008c86:	412c                	lw	a1,64(a0)
1c008c88:	5d48                	lw	a0,60(a0)
1c008c8a:	8b3ff06f          	j	1c00853c <pi_spi_transfer_async>
1c008c8e:	00373963          	p.bneimm	a4,3,1c008ca0 <__pi_handle_waiting_copy+0x4a>
1c008c92:	4578                	lw	a4,76(a0)
1c008c94:	4534                	lw	a3,72(a0)
1c008c96:	4170                	lw	a2,68(a0)
1c008c98:	412c                	lw	a1,64(a0)
1c008c9a:	5d48                	lw	a0,60(a0)
1c008c9c:	ec7ff06f          	j	1c008b62 <pi_spi_copy_async>
1c008ca0:	00473d63          	p.bneimm	a4,4,1c008cba <__pi_handle_waiting_copy+0x64>
1c008ca4:	88aa                	mv	a7,a0
1c008ca6:	05452803          	lw	a6,84(a0)
1c008caa:	493c                	lw	a5,80(a0)
1c008cac:	4578                	lw	a4,76(a0)
1c008cae:	4534                	lw	a3,72(a0)
1c008cb0:	4170                	lw	a2,68(a0)
1c008cb2:	412c                	lw	a1,64(a0)
1c008cb4:	5d48                	lw	a0,60(a0)
1c008cb6:	f23ff06f          	j	1c008bd8 <pi_spi_copy_2d_async>
1c008cba:	8082                	ret

1c008cbc <pos_spim_handle_copy_eot>:
1c008cbc:	419c                	lw	a5,0(a1)
1c008cbe:	1c0026b7          	lui	a3,0x1c002
1c008cc2:	29268693          	addi	a3,a3,658 # 1c002292 <__pi_spim_handle_eot>
1c008cc6:	4f98                	lw	a4,24(a5)
1c008cc8:	0709                	addi	a4,a4,2
1c008cca:	070a                	slli	a4,a4,0x2
1c008ccc:	2ad72c23          	sw	a3,696(a4)
1c008cd0:	2ef72023          	sw	a5,736(a4)
1c008cd4:	4398                	lw	a4,0(a5)
1c008cd6:	01c02583          	lw	a1,28(zero) # 1c <_l1_preload_size>
1c008cda:	0007a023          	sw	zero,0(a5)
1c008cde:	00072023          	sw	zero,0(a4)
1c008ce2:	01c00613          	li	a2,28
1c008ce6:	c991                	beqz	a1,1c008cfa <pos_spim_handle_copy_eot+0x3e>
1c008ce8:	4254                	lw	a3,4(a2)
1c008cea:	c298                	sw	a4,0(a3)
1c008cec:	43c8                	lw	a0,4(a5)
1c008cee:	c258                	sw	a4,4(a2)
1c008cf0:	c901                	beqz	a0,1c008d00 <pos_spim_handle_copy_eot+0x44>
1c008cf2:	4d58                	lw	a4,28(a0)
1c008cf4:	c3d8                	sw	a4,4(a5)
1c008cf6:	f61ff06f          	j	1c008c56 <__pi_handle_waiting_copy>
1c008cfa:	00e02e23          	sw	a4,28(zero) # 1c <_l1_preload_size>
1c008cfe:	b7fd                	j	1c008cec <pos_spim_handle_copy_eot+0x30>
1c008d00:	8082                	ret

1c008d02 <pos_spim_receive_handle_temp_buffer>:
1c008d02:	419c                	lw	a5,0(a1)
1c008d04:	0f47a703          	lw	a4,244(a5)
1c008d08:	00174693          	xori	a3,a4,1
1c008d0c:	0712                	slli	a4,a4,0x4
1c008d0e:	0ed7aa23          	sw	a3,244(a5)
1c008d12:	97ba                	add	a5,a5,a4
1c008d14:	0d07a703          	lw	a4,208(a5)
1c008d18:	0d47a683          	lw	a3,212(a5)
1c008d1c:	00072883          	lw	a7,0(a4)
1c008d20:	0d87a703          	lw	a4,216(a5)
1c008d24:	c206b833          	p.bclr	a6,a3,1,0
1c008d28:	00082603          	lw	a2,0(a6)
1c008d2c:	0722                	slli	a4,a4,0x8
1c008d2e:	fa26b6b3          	p.bclr	a3,a3,29,2
1c008d32:	1701                	addi	a4,a4,-32
1c008d34:	068e                	slli	a3,a3,0x3
1c008d36:	8f55                	or	a4,a4,a3
1c008d38:	80e8a633          	p.insertr	a2,a7,a4
1c008d3c:	00c82023          	sw	a2,0(a6)
1c008d40:	0dc7a783          	lw	a5,220(a5)
1c008d44:	c399                	beqz	a5,1c008d4a <pos_spim_receive_handle_temp_buffer+0x48>
1c008d46:	f77ff06f          	j	1c008cbc <pos_spim_handle_copy_eot>
1c008d4a:	b77ff06f          	j	1c0088c0 <pos_spim_receive_enqueue_transfer>

1c008d4e <pi_spi_conf_init>:

void pi_spi_conf_init(struct pi_spi_conf *conf)
{
  conf->wordsize = PI_SPI_WORDSIZE_8;
  conf->big_endian = 0;
  conf->max_baudrate = 10000000;
1c008d4e:	009897b7          	lui	a5,0x989
1c008d52:	68078793          	addi	a5,a5,1664 # 989680 <__L2+0x909680>
1c008d56:	c11c                	sw	a5,0(a0)
  conf->cs = -1;
1c008d58:	0ff00793          	li	a5,255
1c008d5c:	00f51823          	sh	a5,16(a0)
  conf->itf = 0;
  conf->polarity = 0;
  conf->phase = 0;
  conf->max_rcv_chunk_size = -1;
1c008d60:	57fd                	li	a5,-1
  conf->max_baudrate = 10000000;
1c008d62:	00051223          	sh	zero,4(a0)
  conf->polarity = 0;
1c008d66:	00052423          	sw	zero,8(a0)
  conf->phase = 0;
1c008d6a:	00052623          	sw	zero,12(a0)
  conf->max_rcv_chunk_size = -1;
1c008d6e:	c95c                	sw	a5,20(a0)
  conf->max_snd_chunk_size = -1;
1c008d70:	cd1c                	sw	a5,24(a0)
}
1c008d72:	8082                	ret

1c008d74 <__rt_spim_init>:

static void __attribute__((constructor)) __rt_spim_init()
{
1c008d74:	1141                	addi	sp,sp,-16
1c008d76:	c226                	sw	s1,4(sp)
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim[i].open_count = 0;
1c008d78:	1c00c4b7          	lui	s1,0x1c00c
{
1c008d7c:	c606                	sw	ra,12(sp)
1c008d7e:	c422                	sw	s0,8(sp)
    __rt_spim[i].open_count = 0;
1c008d80:	da448413          	addi	s0,s1,-604 # 1c00bda4 <__rt_spim>
1c008d84:	00042a23          	sw	zero,20(s0)
    __rt_spim[i].pending_copy = NULL;
1c008d88:	00042023          	sw	zero,0(s0)
    __rt_spim[i].waiting_first = NULL;
1c008d8c:	00042223          	sw	zero,4(s0)
    __rt_spim[i].id = i;
1c008d90:	00042c23          	sw	zero,24(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_SPIM_ID(0) + i), &__rt_spim[i]);
1c008d94:	da448593          	addi	a1,s1,-604
1c008d98:	4509                	li	a0,2
1c008d9a:	2e3d                	jal	1c0090d8 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_SPIM_ID(0) + i)+1, &__rt_spim[i]);
1c008d9c:	da448593          	addi	a1,s1,-604
1c008da0:	450d                	li	a0,3
1c008da2:	2e1d                	jal	1c0090d8 <__rt_udma_channel_reg_data>
    __rt_spim[i].id = i;
1c008da4:	4785                	li	a5,1
    __rt_spim[i].open_count = 0;
1c008da6:	12042023          	sw	zero,288(s0)
    __rt_spim[i].pending_copy = NULL;
1c008daa:	10042623          	sw	zero,268(s0)
    __rt_spim[i].waiting_first = NULL;
1c008dae:	10042823          	sw	zero,272(s0)
    __rt_spim[i].id = i;
1c008db2:	12f42223          	sw	a5,292(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_SPIM_ID(0) + i), &__rt_spim[i]);
1c008db6:	10c40413          	addi	s0,s0,268
1c008dba:	85a2                	mv	a1,s0
1c008dbc:	4511                	li	a0,4
1c008dbe:	2e29                	jal	1c0090d8 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_SPIM_ID(0) + i)+1, &__rt_spim[i]);
1c008dc0:	85a2                	mv	a1,s0
  }
}
1c008dc2:	4422                	lw	s0,8(sp)
1c008dc4:	40b2                	lw	ra,12(sp)
1c008dc6:	4492                	lw	s1,4(sp)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_SPIM_ID(0) + i)+1, &__rt_spim[i]);
1c008dc8:	4515                	li	a0,5
}
1c008dca:	0141                	addi	sp,sp,16
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_SPIM_ID(0) + i)+1, &__rt_spim[i]);
1c008dcc:	a631                	j	1c0090d8 <__rt_udma_channel_reg_data>

1c008dce <__pi_gpio_handler>:
  pin = (pin & PI_GPIO_NUM_MASK);
  uint32_t mask = (1 << pin);

  gpio->event_task[pin] = NULL;
  return 0;
}
1c008dce:	1141                	addi	sp,sp,-16
1c008dd0:	1a1017b7          	lui	a5,0x1a101
1c008dd4:	1c00c6b7          	lui	a3,0x1c00c
1c008dd8:	c422                	sw	s0,8(sp)
1c008dda:	4f80                	lw	s0,24(a5)
1c008ddc:	22068793          	addi	a5,a3,544 # 1c00c220 <__rt_gpio>
1c008de0:	c226                	sw	s1,4(sp)
1c008de2:	4bc4                	lw	s1,20(a5)
1c008de4:	c606                	sw	ra,12(sp)
1c008de6:	c780                	sw	s0,8(a5)
1c008de8:	cc91                	beqz	s1,1c008e04 <__pi_gpio_handler+0x36>
1c008dea:	409c                	lw	a5,0(s1)
1c008dec:	8fe1                	and	a5,a5,s0
1c008dee:	c781                	beqz	a5,1c008df6 <__pi_gpio_handler+0x28>
1c008df0:	40dc                	lw	a5,4(s1)
1c008df2:	4488                	lw	a0,8(s1)
1c008df4:	9782                	jalr	a5
1c008df6:	44c4                	lw	s1,12(s1)
1c008df8:	f8ed                	bnez	s1,1c008dea <__pi_gpio_handler+0x1c>
1c008dfa:	40b2                	lw	ra,12(sp)
1c008dfc:	4422                	lw	s0,8(sp)
1c008dfe:	4492                	lw	s1,4(sp)
1c008e00:	0141                	addi	sp,sp,16
1c008e02:	8082                	ret
1c008e04:	22068693          	addi	a3,a3,544
1c008e08:	46dc                	lw	a5,12(a3)
1c008e0a:	4701                	li	a4,0
1c008e0c:	8fe1                	and	a5,a5,s0
1c008e0e:	01c00513          	li	a0,28
1c008e12:	d7e5                	beqz	a5,1c008dfa <__pi_gpio_handler+0x2c>
1c008e14:	fc17b633          	p.bclr	a2,a5,30,1
1c008e18:	c615                	beqz	a2,1c008e44 <__pi_gpio_handler+0x76>
1c008e1a:	00470613          	addi	a2,a4,4
1c008e1e:	060a                	slli	a2,a2,0x2
1c008e20:	9636                	add	a2,a2,a3
1c008e22:	4610                	lw	a2,8(a2)
1c008e24:	c205                	beqz	a2,1c008e44 <__pi_gpio_handler+0x76>
1c008e26:	30047873          	csrrci	a6,mstatus,8
1c008e2a:	01c02883          	lw	a7,28(zero) # 1c <_l1_preload_size>
1c008e2e:	00062023          	sw	zero,0(a2)
1c008e32:	00088e63          	beqz	a7,1c008e4e <__pi_gpio_handler+0x80>
1c008e36:	00452883          	lw	a7,4(a0)
1c008e3a:	00c8a023          	sw	a2,0(a7)
1c008e3e:	c150                	sw	a2,4(a0)
1c008e40:	30081073          	csrw	mstatus,a6
1c008e44:	0705                	addi	a4,a4,1
1c008e46:	8385                	srli	a5,a5,0x1
1c008e48:	0ff77713          	andi	a4,a4,255
1c008e4c:	b7d9                	j	1c008e12 <__pi_gpio_handler+0x44>
1c008e4e:	00c02e23          	sw	a2,28(zero) # 1c <_l1_preload_size>
1c008e52:	b7f5                	j	1c008e3e <__pi_gpio_handler+0x70>

1c008e54 <pi_gpio_conf_init>:
1c008e54:	00052223          	sw	zero,4(a0)
1c008e58:	8082                	ret

1c008e5a <pi_gpio_open>:
1c008e5a:	415c                	lw	a5,4(a0)
1c008e5c:	43cc                	lw	a1,4(a5)
1c008e5e:	04b04e63          	bgtz	a1,1c008eba <pi_gpio_open+0x60>
1c008e62:	09800693          	li	a3,152
1c008e66:	02d586b3          	mul	a3,a1,a3
1c008e6a:	1c00c737          	lui	a4,0x1c00c
1c008e6e:	22070713          	addi	a4,a4,544 # 1c00c220 <__rt_gpio>
1c008e72:	00d707b3          	add	a5,a4,a3
1c008e76:	43d0                	lw	a2,4(a5)
1c008e78:	ee15                	bnez	a2,1c008eb4 <pi_gpio_open+0x5a>
1c008e7a:	06e1                	addi	a3,a3,24
1c008e7c:	4605                	li	a2,1
1c008e7e:	9736                	add	a4,a4,a3
1c008e80:	c38c                	sw	a1,0(a5)
1c008e82:	c3d0                	sw	a2,4(a5)
1c008e84:	0007a423          	sw	zero,8(a5) # 1a101008 <__l1_end+0xa100fe8>
1c008e88:	0007a623          	sw	zero,12(a5)
1c008e8c:	0007a823          	sw	zero,16(a5)
1c008e90:	0007aa23          	sw	zero,20(a5)
1c008e94:	020250fb          	lp.setupi	x1,32,1c008e9c <pi_gpio_open+0x42>
1c008e98:	0007222b          	p.sw	zero,4(a4!)
1c008e9c:	0001                	nop
1c008e9e:	1a1066b7          	lui	a3,0x1a106
1c008ea2:	0046a703          	lw	a4,4(a3) # 1a106004 <__l1_end+0xa105fe4>
1c008ea6:	c0a73733          	p.bclr	a4,a4,0,10
1c008eaa:	00e6a223          	sw	a4,4(a3)
1c008eae:	c51c                	sw	a5,8(a0)
1c008eb0:	4501                	li	a0,0
1c008eb2:	8082                	ret
1c008eb4:	0605                	addi	a2,a2,1
1c008eb6:	c3d0                	sw	a2,4(a5)
1c008eb8:	bfdd                	j	1c008eae <pi_gpio_open+0x54>
1c008eba:	557d                	li	a0,-1
1c008ebc:	8082                	ret

1c008ebe <pi_gpio_pin_write>:
1c008ebe:	4785                	li	a5,1
1c008ec0:	00b795b3          	sll	a1,a5,a1
1c008ec4:	451c                	lw	a5,8(a0)
1c008ec6:	4b9c                	lw	a5,16(a5)
1c008ec8:	8fed                	and	a5,a5,a1
1c008eca:	02b79163          	bne	a5,a1,1c008eec <pi_gpio_pin_write+0x2e>
1c008ece:	1a1016b7          	lui	a3,0x1a101
1c008ed2:	06a1                	addi	a3,a3,8
1c008ed4:	4298                	lw	a4,0(a3)
1c008ed6:	0ff67613          	andi	a2,a2,255
1c008eda:	c609                	beqz	a2,1c008ee4 <pi_gpio_pin_write+0x26>
1c008edc:	8fd9                	or	a5,a5,a4
1c008ede:	c29c                	sw	a5,0(a3)
1c008ee0:	4501                	li	a0,0
1c008ee2:	8082                	ret
1c008ee4:	fff7c793          	not	a5,a5
1c008ee8:	8ff9                	and	a5,a5,a4
1c008eea:	bfd5                	j	1c008ede <pi_gpio_pin_write+0x20>
1c008eec:	5555                	li	a0,-11
1c008eee:	8082                	ret

1c008ef0 <pi_gpio_pin_read>:
1c008ef0:	4508                	lw	a0,8(a0)
1c008ef2:	0ff5f693          	andi	a3,a1,255
1c008ef6:	4785                	li	a5,1
1c008ef8:	4558                	lw	a4,12(a0)
1c008efa:	00d797b3          	sll	a5,a5,a3
1c008efe:	8f7d                	and	a4,a4,a5
1c008f00:	00f70763          	beq	a4,a5,1c008f0e <pi_gpio_pin_read+0x1e>
1c008f04:	490c                	lw	a1,16(a0)
1c008f06:	5555                	li	a0,-11
1c008f08:	8dfd                	and	a1,a1,a5
1c008f0a:	00f59c63          	bne	a1,a5,1c008f22 <pi_gpio_pin_read+0x32>
1c008f0e:	1a1017b7          	lui	a5,0x1a101
1c008f12:	cb09                	beqz	a4,1c008f24 <pi_gpio_pin_read+0x34>
1c008f14:	43cc                	lw	a1,4(a5)
1c008f16:	00d5d5b3          	srl	a1,a1,a3
1c008f1a:	fc15b5b3          	p.bclr	a1,a1,30,1
1c008f1e:	c20c                	sw	a1,0(a2)
1c008f20:	4501                	li	a0,0
1c008f22:	8082                	ret
1c008f24:	438c                	lw	a1,0(a5)
1c008f26:	bfc5                	j	1c008f16 <pi_gpio_pin_read+0x26>

1c008f28 <pi_gpio_pin_notif_configure>:
1c008f28:	451c                	lw	a5,8(a0)
1c008f2a:	0ff5f593          	andi	a1,a1,255
1c008f2e:	4705                	li	a4,1
1c008f30:	47dc                	lw	a5,12(a5)
1c008f32:	00b71733          	sll	a4,a4,a1
1c008f36:	8ff9                	and	a5,a5,a4
1c008f38:	00e79c63          	bne	a5,a4,1c008f50 <pi_gpio_pin_notif_configure+0x28>
1c008f3c:	1a101737          	lui	a4,0x1a101
1c008f40:	0731                	addi	a4,a4,12
1c008f42:	4314                	lw	a3,0(a4)
1c008f44:	00363763          	p.bneimm	a2,3,1c008f52 <pi_gpio_pin_notif_configure+0x2a>
1c008f48:	fff7c793          	not	a5,a5
1c008f4c:	8ff5                	and	a5,a5,a3
1c008f4e:	c31c                	sw	a5,0(a4)
1c008f50:	8082                	ret
1c008f52:	8fd5                	or	a5,a5,a3
1c008f54:	c31c                	sw	a5,0(a4)
1c008f56:	4685                	li	a3,1
1c008f58:	0045d713          	srli	a4,a1,0x4
1c008f5c:	00162563          	p.beqimm	a2,1,1c008f66 <pi_gpio_pin_notif_configure+0x3e>
1c008f60:	00c036b3          	snez	a3,a2
1c008f64:	0686                	slli	a3,a3,0x1
1c008f66:	068407b7          	lui	a5,0x6840
1c008f6a:	40478793          	addi	a5,a5,1028 # 6840404 <__L2+0x67c0404>
1c008f6e:	973e                	add	a4,a4,a5
1c008f70:	070a                	slli	a4,a4,0x2
1c008f72:	0586                	slli	a1,a1,0x1
1c008f74:	89f9                	andi	a1,a1,30
1c008f76:	4310                	lw	a2,0(a4)
1c008f78:	478d                	li	a5,3
1c008f7a:	00b797b3          	sll	a5,a5,a1
1c008f7e:	fff7c793          	not	a5,a5
1c008f82:	8ff1                	and	a5,a5,a2
1c008f84:	00b695b3          	sll	a1,a3,a1
1c008f88:	8fcd                	or	a5,a5,a1
1c008f8a:	b7d1                	j	1c008f4e <pi_gpio_pin_notif_configure+0x26>

1c008f8c <pi_gpio_pin_notif_clear>:
1c008f8c:	300477f3          	csrrci	a5,mstatus,8
1c008f90:	4518                	lw	a4,8(a0)
1c008f92:	4785                	li	a5,1
1c008f94:	00b795b3          	sll	a1,a5,a1
1c008f98:	471c                	lw	a5,8(a4)
1c008f9a:	fff5c593          	not	a1,a1
1c008f9e:	8dfd                	and	a1,a1,a5
1c008fa0:	c70c                	sw	a1,8(a4)
1c008fa2:	8082                	ret

1c008fa4 <pi_gpio_pin_notif_get>:
1c008fa4:	451c                	lw	a5,8(a0)
1c008fa6:	4788                	lw	a0,8(a5)
1c008fa8:	00b55533          	srl	a0,a0,a1
1c008fac:	fc153533          	p.bclr	a0,a0,30,1
1c008fb0:	8082                	ret

1c008fb2 <pi_gpio_mask_configure>:
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
}

static inline unsigned int hal_gpio_paddir_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR);
1c008fb2:	1a1017b7          	lui	a5,0x1a101
1c008fb6:	439c                	lw	a5,0(a5)
1c008fb8:	fff5c713          	not	a4,a1

int pi_gpio_mask_configure(struct pi_device *device, uint32_t mask, pi_gpio_flags_e flags)
{
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
  int is_out = flags & PI_GPIO_OUTPUT;
1c008fbc:	8a11                	andi	a2,a2,4
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
1c008fbe:	4514                	lw	a3,8(a0)
  {
    current |= mask;
  }
  else
  {
    current &= ~mask;
1c008fc0:	00f77533          	and	a0,a4,a5
  if (is_out)
1c008fc4:	c219                	beqz	a2,1c008fca <pi_gpio_mask_configure+0x18>
    current |= mask;
1c008fc6:	00f5e533          	or	a0,a1,a5
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
1c008fca:	1a1017b7          	lui	a5,0x1a101
1c008fce:	c388                	sw	a0,0(a5)
1c008fd0:	0106a803          	lw	a6,16(a3) # 1a101010 <__l1_end+0xa100ff0>
1c008fd4:	46c8                	lw	a0,12(a3)
  hal_gpio_set_dir(mask, is_out);

  if (is_out)
1c008fd6:	ce01                	beqz	a2,1c008fee <pi_gpio_mask_configure+0x3c>
  {
    gpio->input_mask &= ~mask;
    gpio->output_mask |= mask;
1c008fd8:	0105e5b3          	or	a1,a1,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c008fdc:	07f1                	addi	a5,a5,28
1c008fde:	ca8c                	sw	a1,16(a3)
1c008fe0:	438c                	lw	a1,0(a5)
    gpio->input_mask &= ~mask;
1c008fe2:	8d79                	and	a0,a0,a4
1c008fe4:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() & ~mask);
1c008fe6:	8f6d                	and	a4,a4,a1
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c008fe8:	c398                	sw	a4,0(a5)
    gpio->output_mask &= ~mask;
    hal_gpio_en_set(hal_gpio_en_get() | mask);
  }

  return 0;
}
1c008fea:	4501                	li	a0,0
1c008fec:	8082                	ret
    gpio->output_mask &= ~mask;
1c008fee:	01077733          	and	a4,a4,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c008ff2:	07f1                	addi	a5,a5,28
1c008ff4:	ca98                	sw	a4,16(a3)
1c008ff6:	4398                	lw	a4,0(a5)
    gpio->input_mask |= mask;
1c008ff8:	8d4d                	or	a0,a0,a1
1c008ffa:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() | mask);
1c008ffc:	8dd9                	or	a1,a1,a4
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c008ffe:	c38c                	sw	a1,0(a5)
1c009000:	b7ed                	j	1c008fea <pi_gpio_mask_configure+0x38>

1c009002 <pi_gpio_pin_configure>:
{
1c009002:	1101                	addi	sp,sp,-32
1c009004:	cc22                	sw	s0,24(sp)
1c009006:	ca26                	sw	s1,20(sp)
1c009008:	ce06                	sw	ra,28(sp)
1c00900a:	84aa                	mv	s1,a0
1c00900c:	842e                	mv	s0,a1
  if (pin & PI_GPIO_IS_GPIO_MASK)
1c00900e:	0005db63          	bgez	a1,1c009024 <pi_gpio_pin_configure+0x22>
    pi_pad_e pad = ((pin & PI_GPIO_PAD_MASK) >> PI_GPIO_PAD_SHIFT);
1c009012:	4085d513          	srai	a0,a1,0x8
    pi_pad_set_function(pad, PI_PAD_FUNC1);
1c009016:	0ff57513          	andi	a0,a0,255
1c00901a:	4585                	li	a1,1
1c00901c:	c632                	sw	a2,12(sp)
1c00901e:	873fe0ef          	jal	ra,1c007890 <pi_pad_set_function>
1c009022:	4632                	lw	a2,12(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c009024:	4585                	li	a1,1
1c009026:	008595b3          	sll	a1,a1,s0
}
1c00902a:	4462                	lw	s0,24(sp)
1c00902c:	40f2                	lw	ra,28(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c00902e:	8526                	mv	a0,s1
}
1c009030:	44d2                	lw	s1,20(sp)
1c009032:	6105                	addi	sp,sp,32
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c009034:	f7fff06f          	j	1c008fb2 <pi_gpio_mask_configure>

1c009038 <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009038:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c00903c:	4158                	lw	a4,4(a0)
1c00903e:	1a1047b7          	lui	a5,0x1a104
1c009042:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa104120>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c009046:	430c                	lw	a1,0(a4)
1c009048:	c20c                	sw	a1,0(a2)
1c00904a:	434c                	lw	a1,4(a4)
1c00904c:	14478613          	addi	a2,a5,324
1c009050:	14878793          	addi	a5,a5,328
1c009054:	c20c                	sw	a1,0(a2)
1c009056:	4718                	lw	a4,8(a4)
1c009058:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c00905a:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c00905e:	8082                	ret

1c009060 <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c009060:	1c00b537          	lui	a0,0x1c00b
1c009064:	48850513          	addi	a0,a0,1160 # 1c00b488 <__rt_padframe_profiles>
1c009068:	fd1ff06f          	j	1c009038 <rt_padframe_set>

1c00906c <__rt_udma_copy_enqueue>:
1c00906c:	4015d813          	srai	a6,a1,0x1
1c009070:	081e                	slli	a6,a6,0x7
1c009072:	1a1028b7          	lui	a7,0x1a102
1c009076:	0592                	slli	a1,a1,0x4
1c009078:	9846                	add	a6,a6,a7
1c00907a:	89c1                	andi	a1,a1,16
1c00907c:	95c2                	add	a1,a1,a6
{
  unsigned int base = hal_udma_channel_base(channel_id);

  // A UDMA channel has 2 slots, enqueue the copy to the UDMA if one of them is available, otherwise
  // put the transfer on hold.
  if (channel->pendings[0] == NULL)
1c00907e:	00062803          	lw	a6,0(a2)
1c009082:	00081c63          	bnez	a6,1c00909a <__rt_udma_copy_enqueue+0x2e>
  {
    channel->pendings[0] = task;
1c009086:	c208                	sw	a0,0(a2)
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_SADDR_OFFSET, l2Addr);
1c009088:	00d5a023          	sw	a3,0(a1)
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_SIZE_OFFSET, size);
1c00908c:	00e5a223          	sw	a4,4(a1)
    plp_udma_enqueue(base, buffer, size, UDMA_CHANNEL_CFG_EN | cfg);
  }
  else if (channel->pendings[1] == NULL)
  {
    channel->pendings[1] = task;
    plp_udma_enqueue(base, buffer, size, UDMA_CHANNEL_CFG_EN | cfg);
1c009090:	c047c7b3          	p.bset	a5,a5,0,4
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_CFG_OFFSET, cfg | UDMA_CHANNEL_CFG_EN);
1c009094:	00f5a423          	sw	a5,8(a1)
1c009098:	8082                	ret
  else if (channel->pendings[1] == NULL)
1c00909a:	00462803          	lw	a6,4(a2)
1c00909e:	00081463          	bnez	a6,1c0090a6 <__rt_udma_copy_enqueue+0x3a>
    channel->pendings[1] = task;
1c0090a2:	c248                	sw	a0,4(a2)
1c0090a4:	b7d5                	j	1c009088 <__rt_udma_copy_enqueue+0x1c>
  }
  else
  {
    task->implem.data[0] = buffer;
    task->implem.data[1] = size;
    task->implem.data[2] = cfg;
1c0090a6:	c13c                	sw	a5,64(a0)

    if (channel->waitings_first == NULL)
1c0090a8:	461c                	lw	a5,8(a2)
    task->implem.data[0] = buffer;
1c0090aa:	dd14                	sw	a3,56(a0)
    task->implem.data[1] = size;
1c0090ac:	dd58                	sw	a4,60(a0)
    if (channel->waitings_first == NULL)
1c0090ae:	e791                	bnez	a5,1c0090ba <__rt_udma_copy_enqueue+0x4e>
      channel->waitings_first = task;
1c0090b0:	c608                	sw	a0,8(a2)
    else
      channel->waitings_last->implem.next = task;

    channel->waitings_last = task;
1c0090b2:	c648                	sw	a0,12(a2)
    task->implem.next = NULL;
1c0090b4:	00052e23          	sw	zero,28(a0)
  }
}
1c0090b8:	8082                	ret
      channel->waitings_last->implem.next = task;
1c0090ba:	465c                	lw	a5,12(a2)
1c0090bc:	cfc8                	sw	a0,28(a5)
1c0090be:	bfd5                	j	1c0090b2 <__rt_udma_copy_enqueue+0x46>

1c0090c0 <__rt_udma_channel_init>:



void __rt_udma_channel_init(int channel_id, rt_udma_channel_t *channel)
{
  channel->pendings[0] = NULL;
1c0090c0:	0005a023          	sw	zero,0(a1)
  channel->pendings[1] = NULL;
1c0090c4:	0005a223          	sw	zero,4(a1)
  channel->waitings_first = NULL;
1c0090c8:	0005a423          	sw	zero,8(a1)
  __rt_udma_channels[channel_id] = channel;
1c0090cc:	050a                	slli	a0,a0,0x2
1c0090ce:	30800793          	li	a5,776
1c0090d2:	00b7e523          	p.sw	a1,a0(a5)
}
1c0090d6:	8082                	ret

1c0090d8 <__rt_udma_channel_reg_data>:

#ifndef __ZEPHYR__

void __rt_udma_channel_reg_data(int channel_id, void *data)
{
  __rt_udma_channels[channel_id] = data;
1c0090d8:	050a                	slli	a0,a0,0x2
1c0090da:	30800793          	li	a5,776
1c0090de:	00b7e523          	p.sw	a1,a0(a5)
}
1c0090e2:	8082                	ret

1c0090e4 <__rt_hyper_init>:
static void __attribute__((constructor)) __rt_hyper_init()
{
  __rt_hyper_end_task = NULL;
  __rt_hyper_current_task = NULL;
  __rt_hyper_pending_tasks = NULL;
  __pi_hyper_cluster_reqs_first = NULL;
1c0090e4:	1c00c737          	lui	a4,0x1c00c
  __rt_hyper_end_task = NULL;
1c0090e8:	35800793          	li	a5,856
  __pi_hyper_cluster_reqs_first = NULL;
1c0090ec:	36072623          	sw	zero,876(a4) # 1c00c36c <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c0090f0:	577d                	li	a4,-1
1c0090f2:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c0090f4:	1c00c737          	lui	a4,0x1c00c
  __rt_hyper_end_task = NULL;
1c0090f8:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c0090fc:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c009100:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c009104:	36072823          	sw	zero,880(a4) # 1c00c370 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c009108:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c00910c:	0407a023          	sw	zero,64(a5)
#if PULP_CHIP == CHIP_GAP8_REVC
  rt_irq_set_handler(ARCHI_FC_IRQ_HYPER_RX, __rt_hyper_handler);
  rt_irq_set_handler(ARCHI_FC_IRQ_HYPER_TX, __rt_hyper_handler);
#endif
}
1c009110:	8082                	ret

1c009112 <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c009112:	1c00c7b7          	lui	a5,0x1c00c
1c009116:	4d18                	lw	a4,24(a0)
1c009118:	3a07a783          	lw	a5,928(a5) # 1c00c3a0 <__rt_freq_domains>
1c00911c:	068416b7          	lui	a3,0x6841
1c009120:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c009124:	02e7c7b3          	div	a5,a5,a4
1c009128:	02954703          	lbu	a4,41(a0)
1c00912c:	177d                	addi	a4,a4,-1
1c00912e:	c0874733          	p.bset	a4,a4,0,8
1c009132:	17fd                	addi	a5,a5,-1
1c009134:	8785                	srai	a5,a5,0x1
1c009136:	07c2                	slli	a5,a5,0x10
1c009138:	8fd9                	or	a5,a5,a4
1c00913a:	02554703          	lbu	a4,37(a0)
1c00913e:	9736                	add	a4,a4,a3
1c009140:	070a                	slli	a4,a4,0x2
1c009142:	c31c                	sw	a5,0(a4)
1c009144:	8082                	ret

1c009146 <__rt_i2s_setfreq_after>:
1c009146:	1141                	addi	sp,sp,-16
1c009148:	1c00c7b7          	lui	a5,0x1c00c
1c00914c:	c422                	sw	s0,8(sp)
1c00914e:	3747a403          	lw	s0,884(a5) # 1c00c374 <__rt_i2s_first>
1c009152:	c606                	sw	ra,12(sp)
1c009154:	e411                	bnez	s0,1c009160 <__rt_i2s_setfreq_after+0x1a>
1c009156:	40b2                	lw	ra,12(sp)
1c009158:	4422                	lw	s0,8(sp)
1c00915a:	4501                	li	a0,0
1c00915c:	0141                	addi	sp,sp,16
1c00915e:	8082                	ret
1c009160:	02844783          	lbu	a5,40(s0)
1c009164:	c781                	beqz	a5,1c00916c <__rt_i2s_setfreq_after+0x26>
1c009166:	8522                	mv	a0,s0
1c009168:	fabff0ef          	jal	ra,1c009112 <__rt_i2s_resume>
1c00916c:	4c40                	lw	s0,28(s0)
1c00916e:	b7dd                	j	1c009154 <__rt_i2s_setfreq_after+0xe>

1c009170 <__rt_i2s_setfreq_before>:
1c009170:	1c00c7b7          	lui	a5,0x1c00c
1c009174:	3747a783          	lw	a5,884(a5) # 1c00c374 <__rt_i2s_first>
1c009178:	068416b7          	lui	a3,0x6841
1c00917c:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c009180:	e399                	bnez	a5,1c009186 <__rt_i2s_setfreq_before+0x16>
1c009182:	4501                	li	a0,0
1c009184:	8082                	ret
1c009186:	0287c703          	lbu	a4,40(a5)
1c00918a:	c719                	beqz	a4,1c009198 <__rt_i2s_setfreq_before+0x28>
1c00918c:	0257c703          	lbu	a4,37(a5)
1c009190:	9736                	add	a4,a4,a3
1c009192:	070a                	slli	a4,a4,0x2
1c009194:	00072023          	sw	zero,0(a4)
1c009198:	4fdc                	lw	a5,28(a5)
1c00919a:	b7dd                	j	1c009180 <__rt_i2s_setfreq_before+0x10>

1c00919c <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00919c:	1c0095b7          	lui	a1,0x1c009
{
1c0091a0:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c0091a2:	4601                	li	a2,0
1c0091a4:	17058593          	addi	a1,a1,368 # 1c009170 <__rt_i2s_setfreq_before>
1c0091a8:	4511                	li	a0,4
{
1c0091aa:	c606                	sw	ra,12(sp)
1c0091ac:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c0091ae:	f31fc0ef          	jal	ra,1c0060de <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c0091b2:	1c0095b7          	lui	a1,0x1c009
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c0091b6:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c0091b8:	4601                	li	a2,0
1c0091ba:	14658593          	addi	a1,a1,326 # 1c009146 <__rt_i2s_setfreq_after>
1c0091be:	4515                	li	a0,5
1c0091c0:	f1ffc0ef          	jal	ra,1c0060de <__rt_cbsys_add>
1c0091c4:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c0091c6:	c105                	beqz	a0,1c0091e6 <__rt_i2s_init+0x4a>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0091c8:	01402673          	csrr	a2,uhartid
1c0091cc:	1c00b537          	lui	a0,0x1c00b
  return (hart_id >> 5) & 0x3f;
1c0091d0:	40565593          	srai	a1,a2,0x5
1c0091d4:	f265b5b3          	p.bclr	a1,a1,25,6
1c0091d8:	f4563633          	p.bclr	a2,a2,26,5
1c0091dc:	26c50513          	addi	a0,a0,620 # 1c00b26c <__himax_reg_init+0x288>
1c0091e0:	72c000ef          	jal	ra,1c00990c <printf>
1c0091e4:	2575                	jal	1c009890 <abort>
}
1c0091e6:	40b2                	lw	ra,12(sp)
1c0091e8:	4422                	lw	s0,8(sp)
1c0091ea:	0141                	addi	sp,sp,16
1c0091ec:	8082                	ret

1c0091ee <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c0091ee:	1b0017b7          	lui	a5,0x1b001
1c0091f2:	c0078423          	sb	zero,-1016(a5) # 1b000c08 <camera_isAwaked>
}
1c0091f6:	8082                	ret

1c0091f8 <__rt_i2c_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_i2c_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c0091f8:	1c00c7b7          	lui	a5,0x1c00c
1c0091fc:	fec78793          	addi	a5,a5,-20 # 1c00bfec <__rt_i2c>
1c009200:	00078223          	sb	zero,4(a5)
1c009204:	00078a23          	sb	zero,20(a5)
  }
}
1c009208:	8082                	ret

1c00920a <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c00920a:	3a800793          	li	a5,936
1c00920e:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c009212:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c009216:	0207aa23          	sw	zero,52(a5)
}
1c00921a:	8082                	ret

1c00921c <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c00921c:	1c00c7b7          	lui	a5,0x1c00c
1c009220:	37878793          	addi	a5,a5,888 # 1c00c378 <__rt_spim_open_count>
1c009224:	0007a023          	sw	zero,0(a5)
1c009228:	0007a223          	sw	zero,4(a5)
  }
}
1c00922c:	8082                	ret

1c00922e <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c00922e:	1c00c7b7          	lui	a5,0x1c00c
1c009232:	3807a223          	sw	zero,900(a5) # 1c00c384 <__rt_io_pending_flush>
1c009236:	00052c23          	sw	zero,24(a0)
1c00923a:	8082                	ret

1c00923c <__rt_io_uart_wait_req>:
1c00923c:	1141                	addi	sp,sp,-16
1c00923e:	c226                	sw	s1,4(sp)
1c009240:	84aa                	mv	s1,a0
1c009242:	c606                	sw	ra,12(sp)
1c009244:	c422                	sw	s0,8(sp)
1c009246:	c04a                	sw	s2,0(sp)
1c009248:	30047973          	csrrci	s2,mstatus,8
1c00924c:	1c00c437          	lui	s0,0x1c00c
1c009250:	38040413          	addi	s0,s0,896 # 1c00c380 <__rt_io_event_current>
1c009254:	4008                	lw	a0,0(s0)
1c009256:	c509                	beqz	a0,1c009260 <__rt_io_uart_wait_req+0x24>
1c009258:	c0afd0ef          	jal	ra,1c006662 <rt_event_wait>
1c00925c:	00042023          	sw	zero,0(s0)
1c009260:	4785                	li	a5,1
1c009262:	08f48023          	sb	a5,128(s1)
1c009266:	0814c783          	lbu	a5,129(s1)
1c00926a:	00201737          	lui	a4,0x201
1c00926e:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c009272:	04078793          	addi	a5,a5,64
1c009276:	07da                	slli	a5,a5,0x16
1c009278:	0007e723          	p.sw	zero,a4(a5)
1c00927c:	30091073          	csrw	mstatus,s2
1c009280:	40b2                	lw	ra,12(sp)
1c009282:	4422                	lw	s0,8(sp)
1c009284:	4492                	lw	s1,4(sp)
1c009286:	4902                	lw	s2,0(sp)
1c009288:	0141                	addi	sp,sp,16
1c00928a:	8082                	ret

1c00928c <__rt_do_putc_host>:
1c00928c:	1c00c737          	lui	a4,0x1c00c
1c009290:	38870793          	addi	a5,a4,904 # 1c00c388 <__rt_putc_host_buffer_index>
1c009294:	4390                	lw	a2,0(a5)
1c009296:	38870713          	addi	a4,a4,904
1c00929a:	00160693          	addi	a3,a2,1
1c00929e:	c394                	sw	a3,0(a5)
1c0092a0:	1c00c7b7          	lui	a5,0x1c00c
1c0092a4:	00c78593          	addi	a1,a5,12 # 1c00c00c <__rt_putc_host_buffer>
1c0092a8:	00a5c623          	p.sb	a0,a2(a1)
1c0092ac:	07f00593          	li	a1,127
1c0092b0:	00c78613          	addi	a2,a5,12
1c0092b4:	00b68463          	beq	a3,a1,1c0092bc <__rt_do_putc_host+0x30>
1c0092b8:	00a53a63          	p.bneimm	a0,10,1c0092cc <__rt_do_putc_host+0x40>
1c0092bc:	00c78513          	addi	a0,a5,12
1c0092c0:	000646a3          	p.sb	zero,a3(a2)
1c0092c4:	00072023          	sw	zero,0(a4)
1c0092c8:	a7bfc06f          	j	1c005d42 <semihost_write0>
1c0092cc:	8082                	ret

1c0092ce <__rt_io_start>:
1c0092ce:	1101                	addi	sp,sp,-32
1c0092d0:	0028                	addi	a0,sp,8
1c0092d2:	ce06                	sw	ra,28(sp)
1c0092d4:	cc22                	sw	s0,24(sp)
1c0092d6:	384010ef          	jal	ra,1c00a65a <rt_uart_conf_init>
1c0092da:	4585                	li	a1,1
1c0092dc:	4501                	li	a0,0
1c0092de:	a22fd0ef          	jal	ra,1c006500 <rt_event_alloc>
1c0092e2:	547d                	li	s0,-1
1c0092e4:	ed0d                	bnez	a0,1c00931e <__rt_io_start+0x50>
1c0092e6:	1c00b7b7          	lui	a5,0x1c00b
1c0092ea:	5687a783          	lw	a5,1384(a5) # 1c00b568 <__rt_iodev_uart_baudrate>
1c0092ee:	842a                	mv	s0,a0
1c0092f0:	1c00c537          	lui	a0,0x1c00c
1c0092f4:	01c00593          	li	a1,28
1c0092f8:	2b850513          	addi	a0,a0,696 # 1c00c2b8 <__rt_io_event>
1c0092fc:	c43e                	sw	a5,8(sp)
1c0092fe:	9c2fd0ef          	jal	ra,1c0064c0 <__rt_event_init>
1c009302:	1c00c7b7          	lui	a5,0x1c00c
1c009306:	35c7a503          	lw	a0,860(a5) # 1c00c35c <__rt_iodev_uart_channel>
1c00930a:	4681                	li	a3,0
1c00930c:	4601                	li	a2,0
1c00930e:	002c                	addi	a1,sp,8
1c009310:	0511                	addi	a0,a0,4
1c009312:	358010ef          	jal	ra,1c00a66a <__rt_uart_open>
1c009316:	1c00c7b7          	lui	a5,0x1c00c
1c00931a:	38a7a623          	sw	a0,908(a5) # 1c00c38c <_rt_io_uart>
1c00931e:	8522                	mv	a0,s0
1c009320:	40f2                	lw	ra,28(sp)
1c009322:	4462                	lw	s0,24(sp)
1c009324:	6105                	addi	sp,sp,32
1c009326:	8082                	ret

1c009328 <rt_event_execute.isra.4.constprop.12>:
1c009328:	1141                	addi	sp,sp,-16
1c00932a:	c606                	sw	ra,12(sp)
1c00932c:	c422                	sw	s0,8(sp)
1c00932e:	30047473          	csrrci	s0,mstatus,8
1c009332:	4585                	li	a1,1
1c009334:	01c00513          	li	a0,28
1c009338:	a9cfd0ef          	jal	ra,1c0065d4 <__rt_event_execute>
1c00933c:	30041073          	csrw	mstatus,s0
1c009340:	40b2                	lw	ra,12(sp)
1c009342:	4422                	lw	s0,8(sp)
1c009344:	0141                	addi	sp,sp,16
1c009346:	8082                	ret

1c009348 <__rt_io_lock>:
1c009348:	1c00b7b7          	lui	a5,0x1c00b
1c00934c:	4b07a783          	lw	a5,1200(a5) # 1c00b4b0 <__hal_debug_struct+0x10>
1c009350:	cf81                	beqz	a5,1c009368 <__rt_io_lock+0x20>
1c009352:	1c00c7b7          	lui	a5,0x1c00c
1c009356:	38c7a783          	lw	a5,908(a5) # 1c00c38c <_rt_io_uart>
1c00935a:	e799                	bnez	a5,1c009368 <__rt_io_lock+0x20>
1c00935c:	1c00b7b7          	lui	a5,0x1c00b
1c009360:	5647a783          	lw	a5,1380(a5) # 1c00b564 <__rt_iodev>
1c009364:	0427b963          	p.bneimm	a5,2,1c0093b6 <__rt_io_lock+0x6e>
1c009368:	7135                	addi	sp,sp,-160
1c00936a:	014027f3          	csrr	a5,uhartid
1c00936e:	cf06                	sw	ra,156(sp)
1c009370:	ca5797b3          	p.extractu	a5,a5,5,5
1c009374:	02000713          	li	a4,32
1c009378:	1b001537          	lui	a0,0x1b001
1c00937c:	00e79963          	bne	a5,a4,1c00938e <__rt_io_lock+0x46>
1c009380:	c0c50513          	addi	a0,a0,-1012 # 1b000c0c <__rt_io_fc_lock>
1c009384:	debfc0ef          	jal	ra,1c00616e <__rt_fc_lock>
1c009388:	40fa                	lw	ra,156(sp)
1c00938a:	610d                	addi	sp,sp,160
1c00938c:	8082                	ret
1c00938e:	004c                	addi	a1,sp,4
1c009390:	c0c50513          	addi	a0,a0,-1012
1c009394:	e41fc0ef          	jal	ra,1c0061d4 <__rt_fc_cluster_lock>
1c009398:	4689                	li	a3,2
1c00939a:	00204737          	lui	a4,0x204
1c00939e:	08c14783          	lbu	a5,140(sp)
1c0093a2:	0ff7f793          	andi	a5,a5,255
1c0093a6:	f3ed                	bnez	a5,1c009388 <__rt_io_lock+0x40>
1c0093a8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0093ac:	03c76783          	p.elw	a5,60(a4)
1c0093b0:	00d72223          	sw	a3,4(a4)
1c0093b4:	b7ed                	j	1c00939e <__rt_io_lock+0x56>
1c0093b6:	8082                	ret

1c0093b8 <__rt_putc_host_cluster_req>:
1c0093b8:	1141                	addi	sp,sp,-16
1c0093ba:	c422                	sw	s0,8(sp)
1c0093bc:	c606                	sw	ra,12(sp)
1c0093be:	842a                	mv	s0,a0
1c0093c0:	08954503          	lbu	a0,137(a0)
1c0093c4:	ec9ff0ef          	jal	ra,1c00928c <__rt_do_putc_host>
1c0093c8:	08844783          	lbu	a5,136(s0)
1c0093cc:	4705                	li	a4,1
1c0093ce:	08e42223          	sw	a4,132(s0)
1c0093d2:	00201737          	lui	a4,0x201
1c0093d6:	40b2                	lw	ra,12(sp)
1c0093d8:	4422                	lw	s0,8(sp)
1c0093da:	04078793          	addi	a5,a5,64
1c0093de:	07da                	slli	a5,a5,0x16
1c0093e0:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0093e4:	0007e723          	p.sw	zero,a4(a5)
1c0093e8:	0141                	addi	sp,sp,16
1c0093ea:	8082                	ret

1c0093ec <__rt_io_unlock>:
1c0093ec:	1c00b7b7          	lui	a5,0x1c00b
1c0093f0:	4b07a783          	lw	a5,1200(a5) # 1c00b4b0 <__hal_debug_struct+0x10>
1c0093f4:	cf81                	beqz	a5,1c00940c <__rt_io_unlock+0x20>
1c0093f6:	1c00c7b7          	lui	a5,0x1c00c
1c0093fa:	38c7a783          	lw	a5,908(a5) # 1c00c38c <_rt_io_uart>
1c0093fe:	e799                	bnez	a5,1c00940c <__rt_io_unlock+0x20>
1c009400:	1c00b7b7          	lui	a5,0x1c00b
1c009404:	5647a783          	lw	a5,1380(a5) # 1c00b564 <__rt_iodev>
1c009408:	0427b963          	p.bneimm	a5,2,1c00945a <__rt_io_unlock+0x6e>
1c00940c:	7135                	addi	sp,sp,-160
1c00940e:	014027f3          	csrr	a5,uhartid
1c009412:	cf06                	sw	ra,156(sp)
1c009414:	ca5797b3          	p.extractu	a5,a5,5,5
1c009418:	02000713          	li	a4,32
1c00941c:	1b001537          	lui	a0,0x1b001
1c009420:	00e79963          	bne	a5,a4,1c009432 <__rt_io_unlock+0x46>
1c009424:	c0c50513          	addi	a0,a0,-1012 # 1b000c0c <__rt_io_fc_lock>
1c009428:	d79fc0ef          	jal	ra,1c0061a0 <__rt_fc_unlock>
1c00942c:	40fa                	lw	ra,156(sp)
1c00942e:	610d                	addi	sp,sp,160
1c009430:	8082                	ret
1c009432:	004c                	addi	a1,sp,4
1c009434:	c0c50513          	addi	a0,a0,-1012
1c009438:	dd5fc0ef          	jal	ra,1c00620c <__rt_fc_cluster_unlock>
1c00943c:	4689                	li	a3,2
1c00943e:	00204737          	lui	a4,0x204
1c009442:	08c14783          	lbu	a5,140(sp)
1c009446:	0ff7f793          	andi	a5,a5,255
1c00944a:	f3ed                	bnez	a5,1c00942c <__rt_io_unlock+0x40>
1c00944c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c009450:	03c76783          	p.elw	a5,60(a4)
1c009454:	00d72223          	sw	a3,4(a4)
1c009458:	b7ed                	j	1c009442 <__rt_io_unlock+0x56>
1c00945a:	8082                	ret

1c00945c <__rt_io_uart_flush.constprop.11>:
1c00945c:	7171                	addi	sp,sp,-176
1c00945e:	d522                	sw	s0,168(sp)
1c009460:	d706                	sw	ra,172(sp)
1c009462:	d326                	sw	s1,164(sp)
1c009464:	d14a                	sw	s2,160(sp)
1c009466:	cf4e                	sw	s3,156(sp)
1c009468:	cd52                	sw	s4,152(sp)
1c00946a:	1c00c437          	lui	s0,0x1c00c
1c00946e:	38442783          	lw	a5,900(s0) # 1c00c384 <__rt_io_pending_flush>
1c009472:	38440993          	addi	s3,s0,900
1c009476:	efad                	bnez	a5,1c0094f0 <__rt_io_uart_flush.constprop.11+0x94>
1c009478:	1c00b637          	lui	a2,0x1c00b
1c00947c:	4a060793          	addi	a5,a2,1184 # 1c00b4a0 <__hal_debug_struct>
1c009480:	4f80                	lw	s0,24(a5)
1c009482:	4a060a13          	addi	s4,a2,1184
1c009486:	cc29                	beqz	s0,1c0094e0 <__rt_io_uart_flush.constprop.11+0x84>
1c009488:	1c00c737          	lui	a4,0x1c00c
1c00948c:	014027f3          	csrr	a5,uhartid
1c009490:	38c72483          	lw	s1,908(a4) # 1c00c38c <_rt_io_uart>
1c009494:	ca5797b3          	p.extractu	a5,a5,5,5
1c009498:	02000713          	li	a4,32
1c00949c:	1c00b937          	lui	s2,0x1c00b
1c0094a0:	06e79263          	bne	a5,a4,1c009504 <__rt_io_uart_flush.constprop.11+0xa8>
1c0094a4:	1c0095b7          	lui	a1,0x1c009
1c0094a8:	4785                	li	a5,1
1c0094aa:	4a060613          	addi	a2,a2,1184
1c0094ae:	22e58593          	addi	a1,a1,558 # 1c00922e <__rt_io_end_of_flush>
1c0094b2:	4501                	li	a0,0
1c0094b4:	00f9a023          	sw	a5,0(s3)
1c0094b8:	8bcfd0ef          	jal	ra,1c006574 <rt_event_get>
1c0094bc:	40cc                	lw	a1,4(s1)
1c0094be:	87aa                	mv	a5,a0
1c0094c0:	4701                	li	a4,0
1c0094c2:	0586                	slli	a1,a1,0x1
1c0094c4:	86a2                	mv	a3,s0
1c0094c6:	4bc90613          	addi	a2,s2,1212 # 1c00b4bc <__hal_debug_struct+0x1c>
1c0094ca:	0585                	addi	a1,a1,1
1c0094cc:	4501                	li	a0,0
1c0094ce:	eeefd0ef          	jal	ra,1c006bbc <rt_periph_copy>
1c0094d2:	f1bff0ef          	jal	ra,1c0093ec <__rt_io_unlock>
1c0094d6:	0009a783          	lw	a5,0(s3)
1c0094da:	e395                	bnez	a5,1c0094fe <__rt_io_uart_flush.constprop.11+0xa2>
1c0094dc:	e6dff0ef          	jal	ra,1c009348 <__rt_io_lock>
1c0094e0:	50ba                	lw	ra,172(sp)
1c0094e2:	542a                	lw	s0,168(sp)
1c0094e4:	549a                	lw	s1,164(sp)
1c0094e6:	590a                	lw	s2,160(sp)
1c0094e8:	49fa                	lw	s3,156(sp)
1c0094ea:	4a6a                	lw	s4,152(sp)
1c0094ec:	614d                	addi	sp,sp,176
1c0094ee:	8082                	ret
1c0094f0:	efdff0ef          	jal	ra,1c0093ec <__rt_io_unlock>
1c0094f4:	e35ff0ef          	jal	ra,1c009328 <rt_event_execute.isra.4.constprop.12>
1c0094f8:	e51ff0ef          	jal	ra,1c009348 <__rt_io_lock>
1c0094fc:	bf8d                	j	1c00946e <__rt_io_uart_flush.constprop.11+0x12>
1c0094fe:	e2bff0ef          	jal	ra,1c009328 <rt_event_execute.isra.4.constprop.12>
1c009502:	bfd1                	j	1c0094d6 <__rt_io_uart_flush.constprop.11+0x7a>
1c009504:	868a                	mv	a3,sp
1c009506:	8622                	mv	a2,s0
1c009508:	4bc90593          	addi	a1,s2,1212
1c00950c:	8526                	mv	a0,s1
1c00950e:	238010ef          	jal	ra,1c00a746 <rt_uart_cluster_write>
1c009512:	4689                	li	a3,2
1c009514:	00204737          	lui	a4,0x204
1c009518:	08c14783          	lbu	a5,140(sp)
1c00951c:	0ff7f793          	andi	a5,a5,255
1c009520:	c781                	beqz	a5,1c009528 <__rt_io_uart_flush.constprop.11+0xcc>
1c009522:	000a2c23          	sw	zero,24(s4)
1c009526:	bf6d                	j	1c0094e0 <__rt_io_uart_flush.constprop.11+0x84>
1c009528:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00952c:	03c76783          	p.elw	a5,60(a4)
1c009530:	00d72223          	sw	a3,4(a4)
1c009534:	b7d5                	j	1c009518 <__rt_io_uart_flush.constprop.11+0xbc>

1c009536 <__rt_io_uart_wait_pending>:
1c009536:	7135                	addi	sp,sp,-160
1c009538:	cd22                	sw	s0,152(sp)
1c00953a:	cf06                	sw	ra,156(sp)
1c00953c:	1c00c437          	lui	s0,0x1c00c
1c009540:	38442783          	lw	a5,900(s0) # 1c00c384 <__rt_io_pending_flush>
1c009544:	eb85                	bnez	a5,1c009574 <__rt_io_uart_wait_pending+0x3e>
1c009546:	1c00c437          	lui	s0,0x1c00c
1c00954a:	38040413          	addi	s0,s0,896 # 1c00c380 <__rt_io_event_current>
1c00954e:	4008                	lw	a0,0(s0)
1c009550:	cd11                	beqz	a0,1c00956c <__rt_io_uart_wait_pending+0x36>
1c009552:	014027f3          	csrr	a5,uhartid
1c009556:	8795                	srai	a5,a5,0x5
1c009558:	f267b7b3          	p.bclr	a5,a5,25,6
1c00955c:	02000713          	li	a4,32
1c009560:	02e79163          	bne	a5,a4,1c009582 <__rt_io_uart_wait_pending+0x4c>
1c009564:	8fefd0ef          	jal	ra,1c006662 <rt_event_wait>
1c009568:	00042023          	sw	zero,0(s0)
1c00956c:	40fa                	lw	ra,156(sp)
1c00956e:	446a                	lw	s0,152(sp)
1c009570:	610d                	addi	sp,sp,160
1c009572:	8082                	ret
1c009574:	e79ff0ef          	jal	ra,1c0093ec <__rt_io_unlock>
1c009578:	db1ff0ef          	jal	ra,1c009328 <rt_event_execute.isra.4.constprop.12>
1c00957c:	dcdff0ef          	jal	ra,1c009348 <__rt_io_lock>
1c009580:	b7c1                	j	1c009540 <__rt_io_uart_wait_pending+0xa>
1c009582:	08f106a3          	sb	a5,141(sp)
1c009586:	1c0097b7          	lui	a5,0x1c009
1c00958a:	23c78793          	addi	a5,a5,572 # 1c00923c <__rt_io_uart_wait_req>
1c00958e:	4705                	li	a4,1
1c009590:	c83e                	sw	a5,16(sp)
1c009592:	0068                	addi	a0,sp,12
1c009594:	1c00c7b7          	lui	a5,0x1c00c
1c009598:	2ce7ae23          	sw	a4,732(a5) # 1c00c2dc <__rt_io_event+0x24>
1c00959c:	08010623          	sb	zero,140(sp)
1c0095a0:	d802                	sw	zero,48(sp)
1c0095a2:	da02                	sw	zero,52(sp)
1c0095a4:	ca2a                	sw	a0,20(sp)
1c0095a6:	fd3fd0ef          	jal	ra,1c007578 <__rt_cluster_push_fc_event>
1c0095aa:	4689                	li	a3,2
1c0095ac:	00204737          	lui	a4,0x204
1c0095b0:	08c14783          	lbu	a5,140(sp)
1c0095b4:	0ff7f793          	andi	a5,a5,255
1c0095b8:	fbd5                	bnez	a5,1c00956c <__rt_io_uart_wait_pending+0x36>
1c0095ba:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0095be:	03c76783          	p.elw	a5,60(a4)
1c0095c2:	00d72223          	sw	a3,4(a4)
1c0095c6:	b7ed                	j	1c0095b0 <__rt_io_uart_wait_pending+0x7a>

1c0095c8 <__rt_io_stop>:
1c0095c8:	1141                	addi	sp,sp,-16
1c0095ca:	c422                	sw	s0,8(sp)
1c0095cc:	1c00c437          	lui	s0,0x1c00c
1c0095d0:	c606                	sw	ra,12(sp)
1c0095d2:	38c40413          	addi	s0,s0,908 # 1c00c38c <_rt_io_uart>
1c0095d6:	f61ff0ef          	jal	ra,1c009536 <__rt_io_uart_wait_pending>
1c0095da:	4008                	lw	a0,0(s0)
1c0095dc:	4581                	li	a1,0
1c0095de:	11a010ef          	jal	ra,1c00a6f8 <rt_uart_close>
1c0095e2:	40b2                	lw	ra,12(sp)
1c0095e4:	00042023          	sw	zero,0(s0)
1c0095e8:	4422                	lw	s0,8(sp)
1c0095ea:	4501                	li	a0,0
1c0095ec:	0141                	addi	sp,sp,16
1c0095ee:	8082                	ret

1c0095f0 <strlen>:
1c0095f0:	87aa                	mv	a5,a0
1c0095f2:	0007c703          	lbu	a4,0(a5)
1c0095f6:	00178693          	addi	a3,a5,1
1c0095fa:	e701                	bnez	a4,1c009602 <strlen+0x12>
1c0095fc:	40a78533          	sub	a0,a5,a0
1c009600:	8082                	ret
1c009602:	87b6                	mv	a5,a3
1c009604:	b7fd                	j	1c0095f2 <strlen+0x2>

1c009606 <memset>:
1c009606:	962a                	add	a2,a2,a0
1c009608:	87aa                	mv	a5,a0
1c00960a:	00c79363          	bne	a5,a2,1c009610 <memset+0xa>
1c00960e:	8082                	ret
1c009610:	00b780ab          	p.sb	a1,1(a5!)
1c009614:	bfdd                	j	1c00960a <memset+0x4>

1c009616 <memcpy>:
1c009616:	00a5e733          	or	a4,a1,a0
1c00961a:	fa273733          	p.bclr	a4,a4,29,2
1c00961e:	87aa                	mv	a5,a0
1c009620:	c709                	beqz	a4,1c00962a <memcpy+0x14>
1c009622:	962e                	add	a2,a2,a1
1c009624:	00c59f63          	bne	a1,a2,1c009642 <memcpy+0x2c>
1c009628:	8082                	ret
1c00962a:	fa263733          	p.bclr	a4,a2,29,2
1c00962e:	fb75                	bnez	a4,1c009622 <memcpy+0xc>
1c009630:	962e                	add	a2,a2,a1
1c009632:	00c59363          	bne	a1,a2,1c009638 <memcpy+0x22>
1c009636:	8082                	ret
1c009638:	0045a70b          	p.lw	a4,4(a1!)
1c00963c:	00e7a22b          	p.sw	a4,4(a5!)
1c009640:	bfcd                	j	1c009632 <memcpy+0x1c>
1c009642:	0015c70b          	p.lbu	a4,1(a1!)
1c009646:	00e780ab          	p.sb	a4,1(a5!)
1c00964a:	bfe9                	j	1c009624 <memcpy+0xe>

1c00964c <strchr>:
1c00964c:	0ff5f593          	andi	a1,a1,255
1c009650:	00054703          	lbu	a4,0(a0)
1c009654:	87aa                	mv	a5,a0
1c009656:	0505                	addi	a0,a0,1
1c009658:	00b70563          	beq	a4,a1,1c009662 <strchr+0x16>
1c00965c:	fb75                	bnez	a4,1c009650 <strchr+0x4>
1c00965e:	c191                	beqz	a1,1c009662 <strchr+0x16>
1c009660:	4781                	li	a5,0
1c009662:	853e                	mv	a0,a5
1c009664:	8082                	ret

1c009666 <__rt_putc_debug_bridge>:
1c009666:	1141                	addi	sp,sp,-16
1c009668:	c422                	sw	s0,8(sp)
1c00966a:	1c00b437          	lui	s0,0x1c00b
1c00966e:	c226                	sw	s1,4(sp)
1c009670:	c606                	sw	ra,12(sp)
1c009672:	84aa                	mv	s1,a0
1c009674:	4a040413          	addi	s0,s0,1184 # 1c00b4a0 <__hal_debug_struct>
1c009678:	485c                	lw	a5,20(s0)
1c00967a:	c791                	beqz	a5,1c009686 <__rt_putc_debug_bridge+0x20>
1c00967c:	06400513          	li	a0,100
1c009680:	b98fd0ef          	jal	ra,1c006a18 <rt_time_wait_us>
1c009684:	bfd5                	j	1c009678 <__rt_putc_debug_bridge+0x12>
1c009686:	4c1c                	lw	a5,24(s0)
1c009688:	00178713          	addi	a4,a5,1
1c00968c:	97a2                	add	a5,a5,s0
1c00968e:	00978e23          	sb	s1,28(a5)
1c009692:	cc18                	sw	a4,24(s0)
1c009694:	4c14                	lw	a3,24(s0)
1c009696:	08000793          	li	a5,128
1c00969a:	00f68463          	beq	a3,a5,1c0096a2 <__rt_putc_debug_bridge+0x3c>
1c00969e:	00a4b663          	p.bneimm	s1,10,1c0096aa <__rt_putc_debug_bridge+0x44>
1c0096a2:	c701                	beqz	a4,1c0096aa <__rt_putc_debug_bridge+0x44>
1c0096a4:	c858                	sw	a4,20(s0)
1c0096a6:	00042c23          	sw	zero,24(s0)
1c0096aa:	4c1c                	lw	a5,24(s0)
1c0096ac:	e799                	bnez	a5,1c0096ba <__rt_putc_debug_bridge+0x54>
1c0096ae:	4422                	lw	s0,8(sp)
1c0096b0:	40b2                	lw	ra,12(sp)
1c0096b2:	4492                	lw	s1,4(sp)
1c0096b4:	0141                	addi	sp,sp,16
1c0096b6:	d27fc06f          	j	1c0063dc <__rt_bridge_printf_flush>
1c0096ba:	40b2                	lw	ra,12(sp)
1c0096bc:	4422                	lw	s0,8(sp)
1c0096be:	4492                	lw	s1,4(sp)
1c0096c0:	0141                	addi	sp,sp,16
1c0096c2:	8082                	ret

1c0096c4 <__rt_putc_uart>:
1c0096c4:	1101                	addi	sp,sp,-32
1c0096c6:	c62a                	sw	a0,12(sp)
1c0096c8:	ce06                	sw	ra,28(sp)
1c0096ca:	e6dff0ef          	jal	ra,1c009536 <__rt_io_uart_wait_pending>
1c0096ce:	1c00b7b7          	lui	a5,0x1c00b
1c0096d2:	4a078793          	addi	a5,a5,1184 # 1c00b4a0 <__hal_debug_struct>
1c0096d6:	4f94                	lw	a3,24(a5)
1c0096d8:	4532                	lw	a0,12(sp)
1c0096da:	00168713          	addi	a4,a3,1
1c0096de:	cf98                	sw	a4,24(a5)
1c0096e0:	97b6                	add	a5,a5,a3
1c0096e2:	00a78e23          	sb	a0,28(a5)
1c0096e6:	08000793          	li	a5,128
1c0096ea:	00f70463          	beq	a4,a5,1c0096f2 <__rt_putc_uart+0x2e>
1c0096ee:	00a53663          	p.bneimm	a0,10,1c0096fa <__rt_putc_uart+0x36>
1c0096f2:	40f2                	lw	ra,28(sp)
1c0096f4:	6105                	addi	sp,sp,32
1c0096f6:	d67ff06f          	j	1c00945c <__rt_io_uart_flush.constprop.11>
1c0096fa:	40f2                	lw	ra,28(sp)
1c0096fc:	6105                	addi	sp,sp,32
1c0096fe:	8082                	ret

1c009700 <tfp_putc.isra.9>:
1c009700:	1c00b7b7          	lui	a5,0x1c00b
1c009704:	5647a783          	lw	a5,1380(a5) # 1c00b564 <__rt_iodev>
1c009708:	7135                	addi	sp,sp,-160
1c00970a:	cf06                	sw	ra,156(sp)
1c00970c:	0427bf63          	p.bneimm	a5,2,1c00976a <tfp_putc.isra.9+0x6a>
1c009710:	014027f3          	csrr	a5,uhartid
1c009714:	8795                	srai	a5,a5,0x5
1c009716:	f267b7b3          	p.bclr	a5,a5,25,6
1c00971a:	02000713          	li	a4,32
1c00971e:	00e79763          	bne	a5,a4,1c00972c <tfp_putc.isra.9+0x2c>
1c009722:	b6bff0ef          	jal	ra,1c00928c <__rt_do_putc_host>
1c009726:	40fa                	lw	ra,156(sp)
1c009728:	610d                	addi	sp,sp,160
1c00972a:	8082                	ret
1c00972c:	08f10623          	sb	a5,140(sp)
1c009730:	1c0097b7          	lui	a5,0x1c009
1c009734:	4705                	li	a4,1
1c009736:	3b878793          	addi	a5,a5,952 # 1c0093b8 <__rt_putc_host_cluster_req>
1c00973a:	08a106a3          	sb	a0,141(sp)
1c00973e:	0048                	addi	a0,sp,4
1c009740:	d63a                	sw	a4,44(sp)
1c009742:	c43e                	sw	a5,8(sp)
1c009744:	c502                	sw	zero,136(sp)
1c009746:	ce02                	sw	zero,28(sp)
1c009748:	c62a                	sw	a0,12(sp)
1c00974a:	00010c23          	sb	zero,24(sp)
1c00974e:	e2bfd0ef          	jal	ra,1c007578 <__rt_cluster_push_fc_event>
1c009752:	4709                	li	a4,2
1c009754:	002047b7          	lui	a5,0x204
1c009758:	46aa                	lw	a3,136(sp)
1c00975a:	f6f1                	bnez	a3,1c009726 <tfp_putc.isra.9+0x26>
1c00975c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c009760:	03c7e683          	p.elw	a3,60(a5)
1c009764:	00e7a223          	sw	a4,4(a5)
1c009768:	bfc5                	j	1c009758 <tfp_putc.isra.9+0x58>
1c00976a:	1c00c7b7          	lui	a5,0x1c00c
1c00976e:	38c7a783          	lw	a5,908(a5) # 1c00c38c <_rt_io_uart>
1c009772:	c781                	beqz	a5,1c00977a <tfp_putc.isra.9+0x7a>
1c009774:	f51ff0ef          	jal	ra,1c0096c4 <__rt_putc_uart>
1c009778:	b77d                	j	1c009726 <tfp_putc.isra.9+0x26>
1c00977a:	1c00b7b7          	lui	a5,0x1c00b
1c00977e:	4b07a783          	lw	a5,1200(a5) # 1c00b4b0 <__hal_debug_struct+0x10>
1c009782:	c395                	beqz	a5,1c0097a6 <tfp_putc.isra.9+0xa6>
1c009784:	014027f3          	csrr	a5,uhartid
1c009788:	00379713          	slli	a4,a5,0x3
1c00978c:	1a1106b7          	lui	a3,0x1a110
1c009790:	ee873733          	p.bclr	a4,a4,23,8
1c009794:	9736                	add	a4,a4,a3
1c009796:	6689                	lui	a3,0x2
1c009798:	078a                	slli	a5,a5,0x2
1c00979a:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c00979e:	8ff5                	and	a5,a5,a3
1c0097a0:	00a767a3          	p.sw	a0,a5(a4)
1c0097a4:	b749                	j	1c009726 <tfp_putc.isra.9+0x26>
1c0097a6:	ec1ff0ef          	jal	ra,1c009666 <__rt_putc_debug_bridge>
1c0097aa:	bfb5                	j	1c009726 <tfp_putc.isra.9+0x26>

1c0097ac <puts>:
1c0097ac:	1141                	addi	sp,sp,-16
1c0097ae:	c422                	sw	s0,8(sp)
1c0097b0:	c606                	sw	ra,12(sp)
1c0097b2:	842a                	mv	s0,a0
1c0097b4:	b95ff0ef          	jal	ra,1c009348 <__rt_io_lock>
1c0097b8:	0014450b          	p.lbu	a0,1(s0!)
1c0097bc:	c501                	beqz	a0,1c0097c4 <puts+0x18>
1c0097be:	f43ff0ef          	jal	ra,1c009700 <tfp_putc.isra.9>
1c0097c2:	bfdd                	j	1c0097b8 <puts+0xc>
1c0097c4:	4529                	li	a0,10
1c0097c6:	f3bff0ef          	jal	ra,1c009700 <tfp_putc.isra.9>
1c0097ca:	c23ff0ef          	jal	ra,1c0093ec <__rt_io_unlock>
1c0097ce:	40b2                	lw	ra,12(sp)
1c0097d0:	4422                	lw	s0,8(sp)
1c0097d2:	4501                	li	a0,0
1c0097d4:	0141                	addi	sp,sp,16
1c0097d6:	8082                	ret

1c0097d8 <fputc_locked>:
1c0097d8:	1141                	addi	sp,sp,-16
1c0097da:	c422                	sw	s0,8(sp)
1c0097dc:	842a                	mv	s0,a0
1c0097de:	0ff57513          	andi	a0,a0,255
1c0097e2:	c606                	sw	ra,12(sp)
1c0097e4:	f1dff0ef          	jal	ra,1c009700 <tfp_putc.isra.9>
1c0097e8:	8522                	mv	a0,s0
1c0097ea:	40b2                	lw	ra,12(sp)
1c0097ec:	4422                	lw	s0,8(sp)
1c0097ee:	0141                	addi	sp,sp,16
1c0097f0:	8082                	ret

1c0097f2 <_prf_locked>:
1c0097f2:	1101                	addi	sp,sp,-32
1c0097f4:	ce06                	sw	ra,28(sp)
1c0097f6:	c02a                	sw	a0,0(sp)
1c0097f8:	c62e                	sw	a1,12(sp)
1c0097fa:	c432                	sw	a2,8(sp)
1c0097fc:	c236                	sw	a3,4(sp)
1c0097fe:	b4bff0ef          	jal	ra,1c009348 <__rt_io_lock>
1c009802:	4692                	lw	a3,4(sp)
1c009804:	4622                	lw	a2,8(sp)
1c009806:	45b2                	lw	a1,12(sp)
1c009808:	4502                	lw	a0,0(sp)
1c00980a:	2ca1                	jal	1c009a62 <_prf>
1c00980c:	c02a                	sw	a0,0(sp)
1c00980e:	bdfff0ef          	jal	ra,1c0093ec <__rt_io_unlock>
1c009812:	40f2                	lw	ra,28(sp)
1c009814:	4502                	lw	a0,0(sp)
1c009816:	6105                	addi	sp,sp,32
1c009818:	8082                	ret

1c00981a <exit>:
1c00981a:	1101                	addi	sp,sp,-32
1c00981c:	cc22                	sw	s0,24(sp)
1c00981e:	c84a                	sw	s2,16(sp)
1c009820:	c62a                	sw	a0,12(sp)
1c009822:	ce06                	sw	ra,28(sp)
1c009824:	ca26                	sw	s1,20(sp)
1c009826:	f20fc0ef          	jal	ra,1c005f46 <__rt_deinit>
1c00982a:	4532                	lw	a0,12(sp)
1c00982c:	1a104437          	lui	s0,0x1a104
1c009830:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa104080>
1c009834:	c1f54933          	p.bset	s2,a0,0,31
1c009838:	0127a023          	sw	s2,0(a5)
1c00983c:	1c00b7b7          	lui	a5,0x1c00b
1c009840:	5647a783          	lw	a5,1380(a5) # 1c00b564 <__rt_iodev>
1c009844:	0027bf63          	p.bneimm	a5,2,1c009862 <exit+0x48>
1c009848:	c901                	beqz	a0,1c009858 <exit+0x3e>
1c00984a:	00020537          	lui	a0,0x20
1c00984e:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c009852:	cf6fc0ef          	jal	ra,1c005d48 <semihost_exit>
1c009856:	a001                	j	1c009856 <exit+0x3c>
1c009858:	00020537          	lui	a0,0x20
1c00985c:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c009860:	bfcd                	j	1c009852 <exit+0x38>
1c009862:	1c00b4b7          	lui	s1,0x1c00b
1c009866:	4a048493          	addi	s1,s1,1184 # 1c00b4a0 <__hal_debug_struct>
1c00986a:	b73fc0ef          	jal	ra,1c0063dc <__rt_bridge_printf_flush>
1c00986e:	0124a623          	sw	s2,12(s1)
1c009872:	b2dfc0ef          	jal	ra,1c00639e <__rt_bridge_send_notif>
1c009876:	449c                	lw	a5,8(s1)
1c009878:	dff9                	beqz	a5,1c009856 <exit+0x3c>
1c00987a:	07440413          	addi	s0,s0,116
1c00987e:	401c                	lw	a5,0(s0)
1c009880:	83a5                	srli	a5,a5,0x9
1c009882:	f837b7b3          	p.bclr	a5,a5,28,3
1c009886:	fe77bce3          	p.bneimm	a5,7,1c00987e <exit+0x64>
1c00988a:	b35fc0ef          	jal	ra,1c0063be <__rt_bridge_clear_notif>
1c00988e:	b7e1                	j	1c009856 <exit+0x3c>

1c009890 <abort>:
1c009890:	1141                	addi	sp,sp,-16
1c009892:	557d                	li	a0,-1
1c009894:	c606                	sw	ra,12(sp)
1c009896:	f85ff0ef          	jal	ra,1c00981a <exit>

1c00989a <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c00989a:	1c00c7b7          	lui	a5,0x1c00c
1c00989e:	3807a423          	sw	zero,904(a5) # 1c00c388 <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c0098a2:	1b0017b7          	lui	a5,0x1b001
1c0098a6:	c0c78793          	addi	a5,a5,-1012 # 1b000c0c <__rt_io_fc_lock>
1c0098aa:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c0098ae:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c0098b2:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c0098b6:	1c00c7b7          	lui	a5,0x1c00c
1c0098ba:	3807a623          	sw	zero,908(a5) # 1c00c38c <_rt_io_uart>
  __rt_io_event_current = NULL;
1c0098be:	1c00c7b7          	lui	a5,0x1c00c
1c0098c2:	3807a023          	sw	zero,896(a5) # 1c00c380 <__rt_io_event_current>
  return __rt_iodev;
1c0098c6:	1c00b7b7          	lui	a5,0x1c00b

  if (rt_iodev() == RT_IODEV_UART)
1c0098ca:	5647a783          	lw	a5,1380(a5) # 1c00b564 <__rt_iodev>
1c0098ce:	0217be63          	p.bneimm	a5,1,1c00990a <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c0098d2:	1c0095b7          	lui	a1,0x1c009
{
1c0098d6:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c0098d8:	4601                	li	a2,0
1c0098da:	2ce58593          	addi	a1,a1,718 # 1c0092ce <__rt_io_start>
1c0098de:	4501                	li	a0,0
{
1c0098e0:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c0098e2:	ffcfc0ef          	jal	ra,1c0060de <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c0098e6:	1c0095b7          	lui	a1,0x1c009
1c0098ea:	5c858593          	addi	a1,a1,1480 # 1c0095c8 <__rt_io_stop>
1c0098ee:	4601                	li	a2,0
1c0098f0:	4505                	li	a0,1
1c0098f2:	fecfc0ef          	jal	ra,1c0060de <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c0098f6:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c0098f8:	1c00c7b7          	lui	a5,0x1c00c
1c0098fc:	3807a223          	sw	zero,900(a5) # 1c00c384 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c009900:	4585                	li	a1,1
1c009902:	4501                	li	a0,0
}
1c009904:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c009906:	bfbfc06f          	j	1c006500 <rt_event_alloc>
1c00990a:	8082                	ret

1c00990c <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c00990c:	7139                	addi	sp,sp,-64
1c00990e:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c009910:	862a                	mv	a2,a0
1c009912:	1c009537          	lui	a0,0x1c009
{
1c009916:	d22e                	sw	a1,36(sp)
1c009918:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00991a:	4589                	li	a1,2
	va_start(vargs, format);
1c00991c:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00991e:	7d850513          	addi	a0,a0,2008 # 1c0097d8 <fputc_locked>
{
1c009922:	ce06                	sw	ra,28(sp)
1c009924:	d83a                	sw	a4,48(sp)
1c009926:	da3e                	sw	a5,52(sp)
1c009928:	dc42                	sw	a6,56(sp)
1c00992a:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c00992c:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00992e:	ec5ff0ef          	jal	ra,1c0097f2 <_prf_locked>
	va_end(vargs);

	return r;
}
1c009932:	40f2                	lw	ra,28(sp)
1c009934:	6121                	addi	sp,sp,64
1c009936:	8082                	ret

1c009938 <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c009938:	7179                	addi	sp,sp,-48
1c00993a:	d422                	sw	s0,40(sp)
1c00993c:	d226                	sw	s1,36(sp)
1c00993e:	ce4e                	sw	s3,28(sp)
1c009940:	cc52                	sw	s4,24(sp)
1c009942:	ca56                	sw	s5,20(sp)
1c009944:	c85a                	sw	s6,16(sp)
1c009946:	d606                	sw	ra,44(sp)
1c009948:	d04a                	sw	s2,32(sp)
1c00994a:	c65e                	sw	s7,12(sp)
1c00994c:	84aa                	mv	s1,a0
1c00994e:	89ae                	mv	s3,a1
1c009950:	8a32                	mv	s4,a2
1c009952:	8ab6                	mv	s5,a3
1c009954:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c009956:	4b25                	li	s6,9
		unsigned int d = n % base;
1c009958:	8656                	mv	a2,s5
1c00995a:	4681                	li	a3,0
1c00995c:	854e                	mv	a0,s3
1c00995e:	85d2                	mv	a1,s4
1c009960:	d61f80ef          	jal	ra,1c0026c0 <__umoddi3>
		n /= base;
1c009964:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c009966:	892a                	mv	s2,a0
		n /= base;
1c009968:	8656                	mv	a2,s5
1c00996a:	854e                	mv	a0,s3
1c00996c:	4681                	li	a3,0
1c00996e:	a17f80ef          	jal	ra,1c002384 <__udivdi3>
1c009972:	89aa                	mv	s3,a0
1c009974:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c009976:	02700713          	li	a4,39
1c00997a:	012b6363          	bltu	s6,s2,1c009980 <_to_x+0x48>
1c00997e:	4701                	li	a4,0
1c009980:	03090913          	addi	s2,s2,48
1c009984:	974a                	add	a4,a4,s2
1c009986:	00e40023          	sb	a4,0(s0)
	} while (n);
1c00998a:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00998c:	00140793          	addi	a5,s0,1
	} while (n);
1c009990:	e195                	bnez	a1,1c0099b4 <_to_x+0x7c>

	*buf = 0;
1c009992:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c009996:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c00999a:	0084ef63          	bltu	s1,s0,1c0099b8 <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c00999e:	50b2                	lw	ra,44(sp)
1c0099a0:	5422                	lw	s0,40(sp)
1c0099a2:	5492                	lw	s1,36(sp)
1c0099a4:	5902                	lw	s2,32(sp)
1c0099a6:	49f2                	lw	s3,28(sp)
1c0099a8:	4a62                	lw	s4,24(sp)
1c0099aa:	4ad2                	lw	s5,20(sp)
1c0099ac:	4b42                	lw	s6,16(sp)
1c0099ae:	4bb2                	lw	s7,12(sp)
1c0099b0:	6145                	addi	sp,sp,48
1c0099b2:	8082                	ret
1c0099b4:	843e                	mv	s0,a5
1c0099b6:	b74d                	j	1c009958 <_to_x+0x20>
		*buf = *start;
1c0099b8:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c0099bc:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c0099c0:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c0099c4:	00f480ab          	p.sb	a5,1(s1!)
1c0099c8:	bfc9                	j	1c00999a <_to_x+0x62>

1c0099ca <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c0099ca:	411c                	lw	a5,0(a0)
1c0099cc:	4154                	lw	a3,4(a0)
1c0099ce:	fc17b733          	p.bclr	a4,a5,30,1
1c0099d2:	01f69613          	slli	a2,a3,0x1f
1c0099d6:	8385                	srli	a5,a5,0x1
1c0099d8:	8fd1                	or	a5,a5,a2
1c0099da:	97ba                	add	a5,a5,a4
1c0099dc:	8285                	srli	a3,a3,0x1
1c0099de:	00e7b733          	sltu	a4,a5,a4
1c0099e2:	9736                	add	a4,a4,a3
1c0099e4:	c11c                	sw	a5,0(a0)
1c0099e6:	c158                	sw	a4,4(a0)
}
1c0099e8:	8082                	ret

1c0099ea <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c0099ea:	4118                	lw	a4,0(a0)
1c0099ec:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c0099ee:	4615                	li	a2,5
	rem += 2U;
1c0099f0:	00270793          	addi	a5,a4,2
1c0099f4:	00e7b733          	sltu	a4,a5,a4
1c0099f8:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c0099fa:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c0099fe:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c009a02:	01d71693          	slli	a3,a4,0x1d
1c009a06:	0037d713          	srli	a4,a5,0x3
1c009a0a:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c009a0c:	02c75733          	divu	a4,a4,a2
1c009a10:	01d75693          	srli	a3,a4,0x1d
1c009a14:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c009a16:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c009a1a:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c009a1c:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c009a20:	973e                	add	a4,a4,a5
1c009a22:	00f737b3          	sltu	a5,a4,a5
1c009a26:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c009a28:	c118                	sw	a4,0(a0)
1c009a2a:	c15c                	sw	a5,4(a0)
}
1c009a2c:	8082                	ret

1c009a2e <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c009a2e:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c009a30:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c009a34:	02f05563          	blez	a5,1c009a5e <_get_digit+0x30>
		*digit_count -= 1;
1c009a38:	17fd                	addi	a5,a5,-1
1c009a3a:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c009a3c:	411c                	lw	a5,0(a0)
1c009a3e:	4729                	li	a4,10
1c009a40:	4150                	lw	a2,4(a0)
1c009a42:	02f706b3          	mul	a3,a4,a5
1c009a46:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c009a4a:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c009a4c:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c009a50:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c009a54:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c009a58:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c009a5c:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c009a5e:	853a                	mv	a0,a4
1c009a60:	8082                	ret

1c009a62 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c009a62:	7135                	addi	sp,sp,-160
1c009a64:	c94a                	sw	s2,144(sp)
1c009a66:	c74e                	sw	s3,140(sp)
1c009a68:	c15a                	sw	s6,128(sp)
1c009a6a:	dede                	sw	s7,124(sp)
1c009a6c:	cf06                	sw	ra,156(sp)
1c009a6e:	cd22                	sw	s0,152(sp)
1c009a70:	cb26                	sw	s1,148(sp)
1c009a72:	c552                	sw	s4,136(sp)
1c009a74:	c356                	sw	s5,132(sp)
1c009a76:	dce2                	sw	s8,120(sp)
1c009a78:	dae6                	sw	s9,116(sp)
1c009a7a:	d8ea                	sw	s10,112(sp)
1c009a7c:	d6ee                	sw	s11,108(sp)
1c009a7e:	8b2a                	mv	s6,a0
1c009a80:	8bae                	mv	s7,a1
1c009a82:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c009a84:	4981                	li	s3,0

	while ((c = *format++)) {
1c009a86:	00064503          	lbu	a0,0(a2)
1c009a8a:	00160c13          	addi	s8,a2,1
1c009a8e:	c911                	beqz	a0,1c009aa2 <_prf+0x40>
		if (c != '%') {
1c009a90:	02500793          	li	a5,37
1c009a94:	14f50563          	beq	a0,a5,1c009bde <_prf+0x17c>
			PUTC(c);
1c009a98:	85de                	mv	a1,s7
1c009a9a:	9b02                	jalr	s6
1c009a9c:	13f53fe3          	p.bneimm	a0,-1,1c00a3da <_prf+0x978>
1c009aa0:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c009aa2:	40fa                	lw	ra,156(sp)
1c009aa4:	446a                	lw	s0,152(sp)
1c009aa6:	854e                	mv	a0,s3
1c009aa8:	44da                	lw	s1,148(sp)
1c009aaa:	494a                	lw	s2,144(sp)
1c009aac:	49ba                	lw	s3,140(sp)
1c009aae:	4a2a                	lw	s4,136(sp)
1c009ab0:	4a9a                	lw	s5,132(sp)
1c009ab2:	4b0a                	lw	s6,128(sp)
1c009ab4:	5bf6                	lw	s7,124(sp)
1c009ab6:	5c66                	lw	s8,120(sp)
1c009ab8:	5cd6                	lw	s9,116(sp)
1c009aba:	5d46                	lw	s10,112(sp)
1c009abc:	5db6                	lw	s11,108(sp)
1c009abe:	610d                	addi	sp,sp,160
1c009ac0:	8082                	ret
				switch (c) {
1c009ac2:	108d8663          	beq	s11,s0,1c009bce <_prf+0x16c>
1c009ac6:	0fb46863          	bltu	s0,s11,1c009bb6 <_prf+0x154>
1c009aca:	fc0d8ce3          	beqz	s11,1c009aa2 <_prf+0x40>
1c009ace:	0ecd8d63          	beq	s11,a2,1c009bc8 <_prf+0x166>
					fplus = true;
1c009ad2:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c009ad4:	000c4d83          	lbu	s11,0(s8)
1c009ad8:	1c00b737          	lui	a4,0x1c00b
1c009adc:	2b470513          	addi	a0,a4,692 # 1c00b2b4 <__himax_reg_init+0x2d0>
1c009ae0:	85ee                	mv	a1,s11
1c009ae2:	c232                	sw	a2,4(sp)
1c009ae4:	b69ff0ef          	jal	ra,1c00964c <strchr>
1c009ae8:	001c0a13          	addi	s4,s8,1
1c009aec:	4612                	lw	a2,4(sp)
1c009aee:	f971                	bnez	a0,1c009ac2 <_prf+0x60>
			if (c == '*') {
1c009af0:	02a00713          	li	a4,42
1c009af4:	10ed9563          	bne	s11,a4,1c009bfe <_prf+0x19c>
				width = va_arg(vargs, int);
1c009af8:	00092c83          	lw	s9,0(s2)
1c009afc:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c009b00:	000cd663          	bgez	s9,1c009b0c <_prf+0xaa>
					fminus = true;
1c009b04:	4785                	li	a5,1
					width = -width;
1c009b06:	41900cb3          	neg	s9,s9
					fminus = true;
1c009b0a:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c009b0c:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c009b10:	893a                	mv	s2,a4
				c = *format++;
1c009b12:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c009b16:	02e00713          	li	a4,46
			precision = -1;
1c009b1a:	547d                	li	s0,-1
			if (c == '.') {
1c009b1c:	00ed9f63          	bne	s11,a4,1c009b3a <_prf+0xd8>
				if (c == '*') {
1c009b20:	000a4703          	lbu	a4,0(s4)
1c009b24:	02a00793          	li	a5,42
1c009b28:	10f71e63          	bne	a4,a5,1c009c44 <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c009b2c:	00092403          	lw	s0,0(s2)
				c = *format++;
1c009b30:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c009b32:	0911                	addi	s2,s2,4
				c = *format++;
1c009b34:	000a4d83          	lbu	s11,0(s4)
1c009b38:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c009b3a:	1c00b737          	lui	a4,0x1c00b
1c009b3e:	85ee                	mv	a1,s11
1c009b40:	2bc70513          	addi	a0,a4,700 # 1c00b2bc <__himax_reg_init+0x2d8>
1c009b44:	84ee                	mv	s1,s11
1c009b46:	b07ff0ef          	jal	ra,1c00964c <strchr>
1c009b4a:	10050e63          	beqz	a0,1c009c66 <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c009b4e:	06c00693          	li	a3,108
				c = *format++;
1c009b52:	001a0c13          	addi	s8,s4,1
1c009b56:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c009b5a:	0ed49963          	bne	s1,a3,1c009c4c <_prf+0x1ea>
1c009b5e:	009d9863          	bne	s11,s1,1c009b6e <_prf+0x10c>
					c = *format++;
1c009b62:	001a4d83          	lbu	s11,1(s4)
1c009b66:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c009b6a:	04c00493          	li	s1,76
			switch (c) {
1c009b6e:	06700693          	li	a3,103
1c009b72:	17b6e263          	bltu	a3,s11,1c009cd6 <_prf+0x274>
1c009b76:	06500693          	li	a3,101
1c009b7a:	32ddfc63          	bleu	a3,s11,1c009eb2 <_prf+0x450>
1c009b7e:	04700693          	li	a3,71
1c009b82:	0fb6e563          	bltu	a3,s11,1c009c6c <_prf+0x20a>
1c009b86:	04500713          	li	a4,69
1c009b8a:	32edf463          	bleu	a4,s11,1c009eb2 <_prf+0x450>
1c009b8e:	f00d8ae3          	beqz	s11,1c009aa2 <_prf+0x40>
1c009b92:	02500713          	li	a4,37
1c009b96:	02ed8de3          	beq	s11,a4,1c00a3d0 <_prf+0x96e>
				PUTC('%');
1c009b9a:	85de                	mv	a1,s7
1c009b9c:	02500513          	li	a0,37
1c009ba0:	9b02                	jalr	s6
1c009ba2:	eff52fe3          	p.beqimm	a0,-1,1c009aa0 <_prf+0x3e>
				PUTC(c);
1c009ba6:	85de                	mv	a1,s7
1c009ba8:	856e                	mv	a0,s11
1c009baa:	9b02                	jalr	s6
1c009bac:	eff52ae3          	p.beqimm	a0,-1,1c009aa0 <_prf+0x3e>
				count += 2;
1c009bb0:	0989                	addi	s3,s3,2
1c009bb2:	02b0006f          	j	1c00a3dc <_prf+0x97a>
				switch (c) {
1c009bb6:	039d8163          	beq	s11,s9,1c009bd8 <_prf+0x176>
1c009bba:	009d8c63          	beq	s11,s1,1c009bd2 <_prf+0x170>
1c009bbe:	f1ad9ae3          	bne	s11,s10,1c009ad2 <_prf+0x70>
					fplus = true;
1c009bc2:	4705                	li	a4,1
1c009bc4:	c63a                	sw	a4,12(sp)
					break;
1c009bc6:	b731                	j	1c009ad2 <_prf+0x70>
					fspace = true;
1c009bc8:	4785                	li	a5,1
1c009bca:	c83e                	sw	a5,16(sp)
					break;
1c009bcc:	b719                	j	1c009ad2 <_prf+0x70>
					falt = true;
1c009bce:	4a85                	li	s5,1
					break;
1c009bd0:	b709                	j	1c009ad2 <_prf+0x70>
					fzero = true;
1c009bd2:	4705                	li	a4,1
1c009bd4:	ce3a                	sw	a4,28(sp)
					break;
1c009bd6:	bdf5                	j	1c009ad2 <_prf+0x70>
					fminus = true;
1c009bd8:	4785                	li	a5,1
1c009bda:	cc3e                	sw	a5,24(sp)
1c009bdc:	bddd                	j	1c009ad2 <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c009bde:	ce02                	sw	zero,28(sp)
1c009be0:	c802                	sw	zero,16(sp)
1c009be2:	c602                	sw	zero,12(sp)
1c009be4:	cc02                	sw	zero,24(sp)
1c009be6:	4a81                	li	s5,0
				switch (c) {
1c009be8:	02300413          	li	s0,35
1c009bec:	02d00c93          	li	s9,45
1c009bf0:	03000493          	li	s1,48
1c009bf4:	02b00d13          	li	s10,43
1c009bf8:	02000613          	li	a2,32
1c009bfc:	bde1                	j	1c009ad4 <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c009bfe:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c009c02:	46a5                	li	a3,9
				width = 0;
1c009c04:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c009c06:	f0e6e8e3          	bltu	a3,a4,1c009b16 <_prf+0xb4>
	while (isdigit(*p)) {
1c009c0a:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c009c0c:	4629                	li	a2,10
	while (isdigit(*p)) {
1c009c0e:	8a62                	mv	s4,s8
1c009c10:	001a4d8b          	p.lbu	s11,1(s4!)
1c009c14:	fd0d8693          	addi	a3,s11,-48
1c009c18:	eed76fe3          	bltu	a4,a3,1c009b16 <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c009c1c:	87ee                	mv	a5,s11
1c009c1e:	42cc87b3          	p.mac	a5,s9,a2
1c009c22:	8c52                	mv	s8,s4
1c009c24:	fd078c93          	addi	s9,a5,-48
1c009c28:	b7dd                	j	1c009c0e <_prf+0x1ac>
1c009c2a:	42b407b3          	p.mac	a5,s0,a1
1c009c2e:	8a3a                	mv	s4,a4
1c009c30:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c009c34:	8752                	mv	a4,s4
1c009c36:	0017478b          	p.lbu	a5,1(a4!)
1c009c3a:	fd078613          	addi	a2,a5,-48
1c009c3e:	fec6f6e3          	bleu	a2,a3,1c009c2a <_prf+0x1c8>
1c009c42:	bdcd                	j	1c009b34 <_prf+0xd2>
	int i = 0;
1c009c44:	4401                	li	s0,0
	while (isdigit(*p)) {
1c009c46:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c009c48:	45a9                	li	a1,10
1c009c4a:	b7ed                	j	1c009c34 <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c009c4c:	06800693          	li	a3,104
1c009c50:	f0d49fe3          	bne	s1,a3,1c009b6e <_prf+0x10c>
1c009c54:	f09d9de3          	bne	s11,s1,1c009b6e <_prf+0x10c>
					c = *format++;
1c009c58:	002a0c13          	addi	s8,s4,2
1c009c5c:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c009c60:	04800493          	li	s1,72
1c009c64:	b729                	j	1c009b6e <_prf+0x10c>
1c009c66:	8c52                	mv	s8,s4
			i = 0;
1c009c68:	4481                	li	s1,0
1c009c6a:	b711                	j	1c009b6e <_prf+0x10c>
			switch (c) {
1c009c6c:	06300693          	li	a3,99
1c009c70:	12dd8a63          	beq	s11,a3,1c009da4 <_prf+0x342>
1c009c74:	09b6e163          	bltu	a3,s11,1c009cf6 <_prf+0x294>
1c009c78:	05800693          	li	a3,88
1c009c7c:	f0dd9fe3          	bne	s11,a3,1c009b9a <_prf+0x138>
				switch (i) {
1c009c80:	06c00693          	li	a3,108
1c009c84:	6cd48363          	beq	s1,a3,1c00a34a <_prf+0x8e8>
1c009c88:	07a00693          	li	a3,122
1c009c8c:	6ad48f63          	beq	s1,a3,1c00a34a <_prf+0x8e8>
1c009c90:	04c00693          	li	a3,76
1c009c94:	6ad49b63          	bne	s1,a3,1c00a34a <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c009c98:	091d                	addi	s2,s2,7
1c009c9a:	c4093933          	p.bclr	s2,s2,2,0
1c009c9e:	00092583          	lw	a1,0(s2)
1c009ca2:	00492603          	lw	a2,4(s2)
1c009ca6:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c009caa:	06f00713          	li	a4,111
1c009cae:	00c4                	addi	s1,sp,68
1c009cb0:	6aed9d63          	bne	s11,a4,1c00a36a <_prf+0x908>
	if (alt_form) {
1c009cb4:	6a0a8163          	beqz	s5,1c00a356 <_prf+0x8f4>
		*buf++ = '0';
1c009cb8:	03000793          	li	a5,48
1c009cbc:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c009cc0:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c009cc4:	04510513          	addi	a0,sp,69
		if (!value) {
1c009cc8:	68079863          	bnez	a5,1c00a358 <_prf+0x8f6>
			*buf++ = 0;
1c009ccc:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c009cd0:	4901                	li	s2,0
			return 1;
1c009cd2:	4d85                	li	s11,1
1c009cd4:	a069                	j	1c009d5e <_prf+0x2fc>
			switch (c) {
1c009cd6:	07000693          	li	a3,112
1c009cda:	62dd8f63          	beq	s11,a3,1c00a318 <_prf+0x8b6>
1c009cde:	09b6e663          	bltu	a3,s11,1c009d6a <_prf+0x308>
1c009ce2:	06e00693          	li	a3,110
1c009ce6:	5edd8463          	beq	s11,a3,1c00a2ce <_prf+0x86c>
1c009cea:	f9b6ebe3          	bltu	a3,s11,1c009c80 <_prf+0x21e>
1c009cee:	06900693          	li	a3,105
1c009cf2:	eadd94e3          	bne	s11,a3,1c009b9a <_prf+0x138>
				switch (i) {
1c009cf6:	06c00793          	li	a5,108
1c009cfa:	18f48563          	beq	s1,a5,1c009e84 <_prf+0x422>
1c009cfe:	07a00793          	li	a5,122
1c009d02:	18f48163          	beq	s1,a5,1c009e84 <_prf+0x422>
1c009d06:	04c00793          	li	a5,76
1c009d0a:	16f49d63          	bne	s1,a5,1c009e84 <_prf+0x422>
					val = va_arg(vargs, long long);
1c009d0e:	091d                	addi	s2,s2,7
1c009d10:	c4093933          	p.bclr	s2,s2,2,0
1c009d14:	00092583          	lw	a1,0(s2)
1c009d18:	00492a83          	lw	s5,4(s2)
1c009d1c:	00890a13          	addi	s4,s2,8
1c009d20:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c009d24:	160ad763          	bgez	s5,1c009e92 <_prf+0x430>
		*buf++ = '-';
1c009d28:	02d00793          	li	a5,45
		value = -value;
1c009d2c:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c009d30:	04f10223          	sb	a5,68(sp)
		value = -value;
1c009d34:	41500633          	neg	a2,s5
1c009d38:	00b037b3          	snez	a5,a1
1c009d3c:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c009d3e:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c009d42:	854a                	mv	a0,s2
1c009d44:	46a9                	li	a3,10
1c009d46:	bf3ff0ef          	jal	ra,1c009938 <_to_x>
				if (fplus || fspace || val < 0) {
1c009d4a:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c009d4c:	954a                	add	a0,a0,s2
1c009d4e:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c009d52:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c009d54:	e789                	bnez	a5,1c009d5e <_prf+0x2fc>
1c009d56:	4742                	lw	a4,16(sp)
1c009d58:	e319                	bnez	a4,1c009d5e <_prf+0x2fc>
1c009d5a:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c009d5e:	04045c63          	bgez	s0,1c009db6 <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c009d62:	4401                	li	s0,0
1c009d64:	4a81                	li	s5,0
1c009d66:	4681                	li	a3,0
1c009d68:	a401                	j	1c009f68 <_prf+0x506>
			switch (c) {
1c009d6a:	07500693          	li	a3,117
1c009d6e:	f0dd89e3          	beq	s11,a3,1c009c80 <_prf+0x21e>
1c009d72:	07800693          	li	a3,120
1c009d76:	f0dd85e3          	beq	s11,a3,1c009c80 <_prf+0x21e>
1c009d7a:	07300713          	li	a4,115
1c009d7e:	e0ed9ee3          	bne	s11,a4,1c009b9a <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c009d82:	00490a13          	addi	s4,s2,4
1c009d86:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c009d8a:	00045663          	bgez	s0,1c009d96 <_prf+0x334>
					precision = INT_MAX;
1c009d8e:	80000737          	lui	a4,0x80000
1c009d92:	fff74413          	not	s0,a4
1c009d96:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c009d98:	4d81                	li	s11,0
1c009d9a:	5bb41263          	bne	s0,s11,1c00a33e <_prf+0x8dc>
1c009d9e:	4901                	li	s2,0
1c009da0:	4401                	li	s0,0
1c009da2:	a819                	j	1c009db8 <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c009da4:	00092783          	lw	a5,0(s2)
1c009da8:	00490a13          	addi	s4,s2,4
				clen = 1;
1c009dac:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c009dae:	04f10223          	sb	a5,68(sp)
				break;
1c009db2:	4901                	li	s2,0
1c009db4:	4401                	li	s0,0
1c009db6:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c009db8:	41b40d33          	sub	s10,s0,s11
1c009dbc:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c009dbe:	4401                	li	s0,0
1c009dc0:	4a81                	li	s5,0
1c009dc2:	4681                	li	a3,0
1c009dc4:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c009dc8:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c009dca:	01bd0633          	add	a2,s10,s11
1c009dce:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c009dd2:	e701                	bnez	a4,1c009dda <_prf+0x378>
1c009dd4:	84e6                	mv	s1,s9
1c009dd6:	63904263          	bgtz	s9,1c00a3fa <_prf+0x998>
1c009dda:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c009dde:	62979463          	bne	a5,s1,1c00a406 <_prf+0x9a4>
1c009de2:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c009de4:	14fd                	addi	s1,s1,-1
1c009de6:	63f4bc63          	p.bneimm	s1,-1,1c00a41e <_prf+0x9bc>
			clen -= prefix;
1c009dea:	412d84b3          	sub	s1,s11,s2
1c009dee:	8726                	mv	a4,s1
			if (zero.predot) {
1c009df0:	c295                	beqz	a3,1c009e14 <_prf+0x3b2>
				c = *cptr;
1c009df2:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c009df6:	8dbe                	mv	s11,a5
1c009df8:	00978833          	add	a6,a5,s1
1c009dfc:	4625                	li	a2,9
1c009dfe:	fd050593          	addi	a1,a0,-48
1c009e02:	41b80733          	sub	a4,a6,s11
1c009e06:	62b67863          	bleu	a1,a2,1c00a436 <_prf+0x9d4>
1c009e0a:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c009e0c:	64061363          	bnez	a2,1c00a452 <_prf+0x9f0>
				clen -= zero.predot;
1c009e10:	8f15                	sub	a4,a4,a3
1c009e12:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c009e14:	020a8e63          	beqz	s5,1c009e50 <_prf+0x3ee>
1c009e18:	8dbe                	mv	s11,a5
1c009e1a:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c009e1e:	02e00613          	li	a2,46
					c = *cptr++;
1c009e22:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c009e26:	85de                	mv	a1,s7
1c009e28:	c232                	sw	a2,4(sp)
1c009e2a:	8536                	mv	a0,a3
1c009e2c:	c036                	sw	a3,0(sp)
1c009e2e:	c442                	sw	a6,8(sp)
1c009e30:	9b02                	jalr	s6
1c009e32:	4612                	lw	a2,4(sp)
1c009e34:	4682                	lw	a3,0(sp)
1c009e36:	4822                	lw	a6,8(sp)
1c009e38:	c7f524e3          	p.beqimm	a0,-1,1c009aa0 <_prf+0x3e>
1c009e3c:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c009e40:	fec691e3          	bne	a3,a2,1c009e22 <_prf+0x3c0>
1c009e44:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c009e46:	62d04563          	bgtz	a3,1c00a470 <_prf+0xa0e>
				clen -= zero.postdot;
1c009e4a:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c009e4e:	87ee                	mv	a5,s11
			if (zero.trail) {
1c009e50:	c415                	beqz	s0,1c009e7c <_prf+0x41a>
				c = *cptr;
1c009e52:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c009e56:	8dbe                	mv	s11,a5
1c009e58:	973e                	add	a4,a4,a5
1c009e5a:	4625                	li	a2,9
1c009e5c:	02e00693          	li	a3,46
1c009e60:	fd050593          	addi	a1,a0,-48
1c009e64:	41b70ab3          	sub	s5,a4,s11
1c009e68:	62b67163          	bleu	a1,a2,1c00a48a <_prf+0xa28>
1c009e6c:	60d50f63          	beq	a0,a3,1c00a48a <_prf+0xa28>
1c009e70:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c009e72:	62e04a63          	bgtz	a4,1c00a4a6 <_prf+0xa44>
				clen -= zero.trail;
1c009e76:	408a8733          	sub	a4,s5,s0
1c009e7a:	87ee                	mv	a5,s11
1c009e7c:	843e                	mv	s0,a5
1c009e7e:	00e78ab3          	add	s5,a5,a4
1c009e82:	a599                	j	1c00a4c8 <_prf+0xa66>
					val = va_arg(vargs, int);
1c009e84:	00092583          	lw	a1,0(s2)
1c009e88:	00490a13          	addi	s4,s2,4
1c009e8c:	41f5da93          	srai	s5,a1,0x1f
					break;
1c009e90:	bd41                	j	1c009d20 <_prf+0x2be>
	} else if (fplus) {
1c009e92:	47b2                	lw	a5,12(sp)
1c009e94:	c799                	beqz	a5,1c009ea2 <_prf+0x440>
		*buf++ = '+';
1c009e96:	02b00793          	li	a5,43
		*buf++ = ' ';
1c009e9a:	04f10223          	sb	a5,68(sp)
1c009e9e:	8656                	mv	a2,s5
1c009ea0:	bd79                	j	1c009d3e <_prf+0x2dc>
	} else if (fspace) {
1c009ea2:	4742                	lw	a4,16(sp)
1c009ea4:	c701                	beqz	a4,1c009eac <_prf+0x44a>
		*buf++ = ' ';
1c009ea6:	02000793          	li	a5,32
1c009eaa:	bfc5                	j	1c009e9a <_prf+0x438>
	} else if (fspace) {
1c009eac:	8656                	mv	a2,s5
1c009eae:	896e                	mv	s2,s11
1c009eb0:	bd49                	j	1c009d42 <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c009eb2:	091d                	addi	s2,s2,7
1c009eb4:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c009eb8:	00092583          	lw	a1,0(s2)
1c009ebc:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c009ec0:	800007b7          	lui	a5,0x80000
1c009ec4:	0155d613          	srli	a2,a1,0x15
1c009ec8:	00b69713          	slli	a4,a3,0xb
1c009ecc:	8f51                	or	a4,a4,a2
1c009ece:	fff7c793          	not	a5,a5
1c009ed2:	05ae                	slli	a1,a1,0xb
1c009ed4:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c009ed6:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c009eda:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c009edc:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c009ee0:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c009ee2:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c009ee6:	0806d863          	bgez	a3,1c009f76 <_prf+0x514>
		*buf++ = '-';
1c009eea:	02d00693          	li	a3,45
		*buf++ = ' ';
1c009eee:	04d10223          	sb	a3,68(sp)
1c009ef2:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c009ef6:	7ff00693          	li	a3,2047
1c009efa:	0cd91363          	bne	s2,a3,1c009fc0 <_prf+0x55e>
		if (!fract) {
1c009efe:	8f4d                	or	a4,a4,a1
1c009f00:	fbfd8793          	addi	a5,s11,-65
1c009f04:	00348513          	addi	a0,s1,3
1c009f08:	eb49                	bnez	a4,1c009f9a <_prf+0x538>
			if (isupper(c)) {
1c009f0a:	4765                	li	a4,25
1c009f0c:	06f76f63          	bltu	a4,a5,1c009f8a <_prf+0x528>
				*buf++ = 'I';
1c009f10:	6795                	lui	a5,0x5
1c009f12:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c009f16:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c009f1a:	04600793          	li	a5,70
		return buf - start;
1c009f1e:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c009f22:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c009f26:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c009f2a:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c009f2e:	4401                	li	s0,0
1c009f30:	4a81                	li	s5,0
1c009f32:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c009f34:	4732                	lw	a4,12(sp)
					prefix = 1;
1c009f36:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c009f38:	eb09                	bnez	a4,1c009f4a <_prf+0x4e8>
1c009f3a:	47c2                	lw	a5,16(sp)
1c009f3c:	e799                	bnez	a5,1c009f4a <_prf+0x4e8>
1c009f3e:	04414903          	lbu	s2,68(sp)
1c009f42:	fd390913          	addi	s2,s2,-45
1c009f46:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c009f4a:	1098                	addi	a4,sp,96
1c009f4c:	012707b3          	add	a5,a4,s2
1c009f50:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c009f54:	015684b3          	add	s1,a3,s5
1c009f58:	94a2                	add	s1,s1,s0
1c009f5a:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c009f5e:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c009f60:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c009f64:	46f66e63          	bltu	a2,a5,1c00a3e0 <_prf+0x97e>
			} else if (fzero) {
1c009f68:	47f2                	lw	a5,28(sp)
1c009f6a:	46078b63          	beqz	a5,1c00a3e0 <_prf+0x97e>
				zero_head = width - clen;
1c009f6e:	41bc8d33          	sub	s10,s9,s11
1c009f72:	00dc                	addi	a5,sp,68
1c009f74:	bd81                	j	1c009dc4 <_prf+0x362>
	} else if (fplus) {
1c009f76:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c009f78:	02b00693          	li	a3,43
	} else if (fplus) {
1c009f7c:	fbad                	bnez	a5,1c009eee <_prf+0x48c>
	} else if (fspace) {
1c009f7e:	47c2                	lw	a5,16(sp)
1c009f80:	00c4                	addi	s1,sp,68
1c009f82:	dbb5                	beqz	a5,1c009ef6 <_prf+0x494>
		*buf++ = ' ';
1c009f84:	02000693          	li	a3,32
1c009f88:	b79d                	j	1c009eee <_prf+0x48c>
				*buf++ = 'i';
1c009f8a:	679d                	lui	a5,0x7
1c009f8c:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c009f90:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c009f94:	06600793          	li	a5,102
1c009f98:	b759                	j	1c009f1e <_prf+0x4bc>
			if (isupper(c)) {
1c009f9a:	4765                	li	a4,25
1c009f9c:	00f76a63          	bltu	a4,a5,1c009fb0 <_prf+0x54e>
				*buf++ = 'N';
1c009fa0:	6791                	lui	a5,0x4
1c009fa2:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c009fa6:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c009faa:	04e00793          	li	a5,78
1c009fae:	bf85                	j	1c009f1e <_prf+0x4bc>
				*buf++ = 'n';
1c009fb0:	6799                	lui	a5,0x6
1c009fb2:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c009fb6:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c009fba:	06e00793          	li	a5,110
1c009fbe:	b785                	j	1c009f1e <_prf+0x4bc>
	if (c == 'F') {
1c009fc0:	04600693          	li	a3,70
1c009fc4:	00dd9463          	bne	s11,a3,1c009fcc <_prf+0x56a>
		c = 'f';
1c009fc8:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c009fcc:	41f95613          	srai	a2,s2,0x1f
1c009fd0:	00b966b3          	or	a3,s2,a1
1c009fd4:	8e59                	or	a2,a2,a4
1c009fd6:	8ed1                	or	a3,a3,a2
1c009fd8:	1c068263          	beqz	a3,1c00a19c <_prf+0x73a>
		if (exp == 0) {
1c009fdc:	10090d63          	beqz	s2,1c00a0f6 <_prf+0x694>
		fract |= HIGHBIT64;
1c009fe0:	5752                	lw	a4,52(sp)
1c009fe2:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c009fe6:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c009fea:	8f5d                	or	a4,a4,a5
1c009fec:	da3a                	sw	a4,52(sp)
1c009fee:	4d01                	li	s10,0
	while (exp <= -3) {
1c009ff0:	5779                	li	a4,-2
1c009ff2:	10e94f63          	blt	s2,a4,1c00a110 <_prf+0x6ae>
	while (exp > 0) {
1c009ff6:	17204663          	bgtz	s2,1c00a162 <_prf+0x700>
		_rlrshift(&fract);
1c009ffa:	1808                	addi	a0,sp,48
		exp++;
1c009ffc:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c009ffe:	9cdff0ef          	jal	ra,1c0099ca <_rlrshift>
	while (exp < (0 + 4)) {
1c00a002:	fe493ce3          	p.bneimm	s2,4,1c009ffa <_prf+0x598>
	if (precision < 0) {
1c00a006:	00045363          	bgez	s0,1c00a00c <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c00a00a:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c00a00c:	0dfdf713          	andi	a4,s11,223
1c00a010:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00a014:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c00a016:	02d71563          	bne	a4,a3,1c00a040 <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c00a01a:	5775                	li	a4,-3
1c00a01c:	00ed4463          	blt	s10,a4,1c00a024 <_prf+0x5c2>
1c00a020:	19a45163          	ble	s10,s0,1c00a1a2 <_prf+0x740>
			c += 'e' - 'g';
1c00a024:	ffed8793          	addi	a5,s11,-2
1c00a028:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c00a02c:	4c040e63          	beqz	s0,1c00a508 <_prf+0xaa6>
				precision--;
1c00a030:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c00a032:	4c0a9b63          	bnez	s5,1c00a508 <_prf+0xaa6>
1c00a036:	00802933          	sgtz	s2,s0
1c00a03a:	0ff97913          	andi	s2,s2,255
1c00a03e:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c00a040:	06600713          	li	a4,102
1c00a044:	4ced9363          	bne	s11,a4,1c00a50a <_prf+0xaa8>
		exp = precision + decexp;
1c00a048:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c00a04c:	06600d93          	li	s11,102
1c00a050:	4a075f63          	bgez	a4,1c00a50e <_prf+0xaac>
	digit_count = 16;
1c00a054:	4741                	li	a4,16
1c00a056:	d63a                	sw	a4,44(sp)
			exp = 0;
1c00a058:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c00a05a:	4601                	li	a2,0
1c00a05c:	080006b7          	lui	a3,0x8000
1c00a060:	dc32                	sw	a2,56(sp)
1c00a062:	de36                	sw	a3,60(sp)
	while (exp--) {
1c00a064:	197d                	addi	s2,s2,-1
1c00a066:	15f93563          	p.bneimm	s2,-1,1c00a1b0 <_prf+0x74e>
	fract += ltemp;
1c00a06a:	5742                	lw	a4,48(sp)
1c00a06c:	56e2                	lw	a3,56(sp)
1c00a06e:	5652                	lw	a2,52(sp)
1c00a070:	55f2                	lw	a1,60(sp)
1c00a072:	96ba                	add	a3,a3,a4
1c00a074:	00e6b733          	sltu	a4,a3,a4
1c00a078:	962e                	add	a2,a2,a1
1c00a07a:	9732                	add	a4,a4,a2
1c00a07c:	da3a                	sw	a4,52(sp)
1c00a07e:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c00a080:	f6073733          	p.bclr	a4,a4,27,0
1c00a084:	cb01                	beqz	a4,1c00a094 <_prf+0x632>
		_ldiv5(&fract);
1c00a086:	1808                	addi	a0,sp,48
1c00a088:	963ff0ef          	jal	ra,1c0099ea <_ldiv5>
		_rlrshift(&fract);
1c00a08c:	1808                	addi	a0,sp,48
1c00a08e:	93dff0ef          	jal	ra,1c0099ca <_rlrshift>
		decexp++;
1c00a092:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c00a094:	06600713          	li	a4,102
1c00a098:	16ed9163          	bne	s11,a4,1c00a1fa <_prf+0x798>
		if (decexp > 0) {
1c00a09c:	8926                	mv	s2,s1
1c00a09e:	13a04963          	bgtz	s10,1c00a1d0 <_prf+0x76e>
			*buf++ = '0';
1c00a0a2:	03000713          	li	a4,48
1c00a0a6:	00e48023          	sb	a4,0(s1)
1c00a0aa:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c00a0ae:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c00a0b0:	120a8763          	beqz	s5,1c00a1de <_prf+0x77c>
			*buf++ = '.';
1c00a0b4:	02e00593          	li	a1,46
1c00a0b8:	00b90023          	sb	a1,0(s2)
1c00a0bc:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c00a0c0:	440d0263          	beqz	s10,1c00a504 <_prf+0xaa2>
1c00a0c4:	12805863          	blez	s0,1c00a1f4 <_prf+0x792>
			zp->postdot = -decexp;
1c00a0c8:	41a00ab3          	neg	s5,s10
1c00a0cc:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c00a0d0:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c00a0d4:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c00a0d6:	10805763          	blez	s0,1c00a1e4 <_prf+0x782>
1c00a0da:	5732                	lw	a4,44(sp)
1c00a0dc:	10e05463          	blez	a4,1c00a1e4 <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c00a0e0:	106c                	addi	a1,sp,44
1c00a0e2:	1808                	addi	a0,sp,48
1c00a0e4:	c036                	sw	a3,0(sp)
1c00a0e6:	949ff0ef          	jal	ra,1c009a2e <_get_digit>
1c00a0ea:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00a0ee:	147d                	addi	s0,s0,-1
1c00a0f0:	4682                	lw	a3,0(sp)
1c00a0f2:	b7d5                	j	1c00a0d6 <_prf+0x674>
				exp--;
1c00a0f4:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c00a0f6:	01f5d693          	srli	a3,a1,0x1f
1c00a0fa:	0706                	slli	a4,a4,0x1
1c00a0fc:	8f55                	or	a4,a4,a3
1c00a0fe:	0586                	slli	a1,a1,0x1
1c00a100:	fe075ae3          	bgez	a4,1c00a0f4 <_prf+0x692>
1c00a104:	d82e                	sw	a1,48(sp)
1c00a106:	da3a                	sw	a4,52(sp)
1c00a108:	bde1                	j	1c009fe0 <_prf+0x57e>
			_rlrshift(&fract);
1c00a10a:	1808                	addi	a0,sp,48
1c00a10c:	8bfff0ef          	jal	ra,1c0099ca <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c00a110:	55d2                	lw	a1,52(sp)
1c00a112:	33333737          	lui	a4,0x33333
1c00a116:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x17326f3e>
1c00a11a:	5642                	lw	a2,48(sp)
1c00a11c:	0905                	addi	s2,s2,1
1c00a11e:	feb766e3          	bltu	a4,a1,1c00a10a <_prf+0x6a8>
		fract *= 5U;
1c00a122:	4695                	li	a3,5
1c00a124:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c00a128:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c00a12a:	02c68633          	mul	a2,a3,a2
1c00a12e:	42b68733          	p.mac	a4,a3,a1
1c00a132:	d832                	sw	a2,48(sp)
		decexp--;
1c00a134:	4681                	li	a3,0
		fract *= 5U;
1c00a136:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00a138:	800007b7          	lui	a5,0x80000
1c00a13c:	fff7c793          	not	a5,a5
1c00a140:	00e7f763          	bleu	a4,a5,1c00a14e <_prf+0x6ec>
1c00a144:	ea0686e3          	beqz	a3,1c009ff0 <_prf+0x58e>
1c00a148:	d832                	sw	a2,48(sp)
1c00a14a:	da3a                	sw	a4,52(sp)
1c00a14c:	b555                	j	1c009ff0 <_prf+0x58e>
			fract <<= 1;
1c00a14e:	01f65593          	srli	a1,a2,0x1f
1c00a152:	00171693          	slli	a3,a4,0x1
1c00a156:	00d5e733          	or	a4,a1,a3
1c00a15a:	0606                	slli	a2,a2,0x1
			exp--;
1c00a15c:	197d                	addi	s2,s2,-1
1c00a15e:	4685                	li	a3,1
1c00a160:	bfe1                	j	1c00a138 <_prf+0x6d6>
		_ldiv5(&fract);
1c00a162:	1808                	addi	a0,sp,48
1c00a164:	887ff0ef          	jal	ra,1c0099ea <_ldiv5>
1c00a168:	5642                	lw	a2,48(sp)
1c00a16a:	5752                	lw	a4,52(sp)
		exp--;
1c00a16c:	197d                	addi	s2,s2,-1
		decexp++;
1c00a16e:	0d05                	addi	s10,s10,1
1c00a170:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00a172:	800007b7          	lui	a5,0x80000
1c00a176:	fff7c793          	not	a5,a5
1c00a17a:	00e7f763          	bleu	a4,a5,1c00a188 <_prf+0x726>
1c00a17e:	e6068ce3          	beqz	a3,1c009ff6 <_prf+0x594>
1c00a182:	d832                	sw	a2,48(sp)
1c00a184:	da3a                	sw	a4,52(sp)
1c00a186:	bd85                	j	1c009ff6 <_prf+0x594>
			fract <<= 1;
1c00a188:	01f65593          	srli	a1,a2,0x1f
1c00a18c:	00171693          	slli	a3,a4,0x1
1c00a190:	00d5e733          	or	a4,a1,a3
1c00a194:	0606                	slli	a2,a2,0x1
			exp--;
1c00a196:	197d                	addi	s2,s2,-1
1c00a198:	4685                	li	a3,1
1c00a19a:	bfe1                	j	1c00a172 <_prf+0x710>
	if ((exp | fract) != 0) {
1c00a19c:	4d01                	li	s10,0
1c00a19e:	4901                	li	s2,0
1c00a1a0:	bda9                	j	1c009ffa <_prf+0x598>
			precision -= decexp;
1c00a1a2:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c00a1a6:	ea0a91e3          	bnez	s5,1c00a048 <_prf+0x5e6>
			c = 'f';
1c00a1aa:	06600d93          	li	s11,102
1c00a1ae:	b561                	j	1c00a036 <_prf+0x5d4>
		_ldiv5(&ltemp);
1c00a1b0:	1828                	addi	a0,sp,56
1c00a1b2:	839ff0ef          	jal	ra,1c0099ea <_ldiv5>
		_rlrshift(&ltemp);
1c00a1b6:	1828                	addi	a0,sp,56
1c00a1b8:	813ff0ef          	jal	ra,1c0099ca <_rlrshift>
1c00a1bc:	b565                	j	1c00a064 <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c00a1be:	106c                	addi	a1,sp,44
1c00a1c0:	1808                	addi	a0,sp,48
1c00a1c2:	86dff0ef          	jal	ra,1c009a2e <_get_digit>
1c00a1c6:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c00a1ca:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c00a1cc:	000d0563          	beqz	s10,1c00a1d6 <_prf+0x774>
1c00a1d0:	5732                	lw	a4,44(sp)
1c00a1d2:	fee046e3          	bgtz	a4,1c00a1be <_prf+0x75c>
		if (falt || (precision > 0)) {
1c00a1d6:	300a9f63          	bnez	s5,1c00a4f4 <_prf+0xa92>
			zp->predot = decexp;
1c00a1da:	86ea                	mv	a3,s10
			decexp = 0;
1c00a1dc:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00a1de:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c00a1e0:	ec804ae3          	bgtz	s0,1c00a0b4 <_prf+0x652>
	if (prune_zero) {
1c00a1e4:	4752                	lw	a4,20(sp)
1c00a1e6:	eb31                	bnez	a4,1c00a23a <_prf+0x7d8>
	return buf - start;
1c00a1e8:	00c8                	addi	a0,sp,68
	*buf = 0;
1c00a1ea:	00090023          	sb	zero,0(s2)
	return buf - start;
1c00a1ee:	40a90533          	sub	a0,s2,a0
1c00a1f2:	b389                	j	1c009f34 <_prf+0x4d2>
			*buf++ = '.';
1c00a1f4:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c00a1f6:	4a81                	li	s5,0
1c00a1f8:	b7f5                	j	1c00a1e4 <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c00a1fa:	106c                	addi	a1,sp,44
1c00a1fc:	1808                	addi	a0,sp,48
1c00a1fe:	831ff0ef          	jal	ra,1c009a2e <_get_digit>
1c00a202:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c00a206:	03000713          	li	a4,48
1c00a20a:	00e50363          	beq	a0,a4,1c00a210 <_prf+0x7ae>
			decexp--;
1c00a20e:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c00a210:	000a9663          	bnez	s5,1c00a21c <_prf+0x7ba>
		if (*buf++ != '0') {
1c00a214:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c00a218:	00805d63          	blez	s0,1c00a232 <_prf+0x7d0>
			*buf++ = '.';
1c00a21c:	02e00713          	li	a4,46
1c00a220:	00248913          	addi	s2,s1,2
1c00a224:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c00a228:	00805563          	blez	s0,1c00a232 <_prf+0x7d0>
1c00a22c:	5732                	lw	a4,44(sp)
1c00a22e:	08e04663          	bgtz	a4,1c00a2ba <_prf+0x858>
	if (prune_zero) {
1c00a232:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c00a234:	4a81                	li	s5,0
1c00a236:	4681                	li	a3,0
	if (prune_zero) {
1c00a238:	cf99                	beqz	a5,1c00a256 <_prf+0x7f4>
		while (*--buf == '0')
1c00a23a:	03000513          	li	a0,48
1c00a23e:	fff90713          	addi	a4,s2,-1
1c00a242:	00074583          	lbu	a1,0(a4)
1c00a246:	08a58263          	beq	a1,a0,1c00a2ca <_prf+0x868>
		if (*buf != '.') {
1c00a24a:	02e00513          	li	a0,46
		zp->trail = 0;
1c00a24e:	4401                	li	s0,0
		if (*buf != '.') {
1c00a250:	00a59363          	bne	a1,a0,1c00a256 <_prf+0x7f4>
		while (*--buf == '0')
1c00a254:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c00a256:	0dfdf713          	andi	a4,s11,223
1c00a25a:	04500593          	li	a1,69
1c00a25e:	f8b715e3          	bne	a4,a1,1c00a1e8 <_prf+0x786>
		*buf++ = c;
1c00a262:	85ca                	mv	a1,s2
1c00a264:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c00a268:	02b00793          	li	a5,43
		if (decexp < 0) {
1c00a26c:	000d5663          	bgez	s10,1c00a278 <_prf+0x816>
			decexp = -decexp;
1c00a270:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c00a274:	02d00793          	li	a5,45
			*buf++ = '+';
1c00a278:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c00a27c:	06300793          	li	a5,99
1c00a280:	01a7de63          	ble	s10,a5,1c00a29c <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c00a284:	06400713          	li	a4,100
1c00a288:	02ed47b3          	div	a5,s10,a4
1c00a28c:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c00a290:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c00a294:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c00a298:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c00a29c:	47a9                	li	a5,10
1c00a29e:	892e                	mv	s2,a1
1c00a2a0:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c00a2a4:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c00a2a8:	03070713          	addi	a4,a4,48
1c00a2ac:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c00a2b0:	03088893          	addi	a7,a7,48 # 1a102030 <__l1_end+0xa102010>
1c00a2b4:	011580a3          	sb	a7,1(a1)
1c00a2b8:	bf05                	j	1c00a1e8 <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c00a2ba:	106c                	addi	a1,sp,44
1c00a2bc:	1808                	addi	a0,sp,48
1c00a2be:	f70ff0ef          	jal	ra,1c009a2e <_get_digit>
1c00a2c2:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00a2c6:	147d                	addi	s0,s0,-1
1c00a2c8:	b785                	j	1c00a228 <_prf+0x7c6>
		while (*--buf == '0')
1c00a2ca:	893a                	mv	s2,a4
1c00a2cc:	bf8d                	j	1c00a23e <_prf+0x7dc>
1c00a2ce:	8a4a                	mv	s4,s2
				switch (i) {
1c00a2d0:	04c00693          	li	a3,76
1c00a2d4:	004a278b          	p.lw	a5,4(s4!)
1c00a2d8:	02d48a63          	beq	s1,a3,1c00a30c <_prf+0x8aa>
1c00a2dc:	0096c963          	blt	a3,s1,1c00a2ee <_prf+0x88c>
1c00a2e0:	04800693          	li	a3,72
1c00a2e4:	02d48063          	beq	s1,a3,1c00a304 <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c00a2e8:	0137a023          	sw	s3,0(a5)
					break;
1c00a2ec:	a801                	j	1c00a2fc <_prf+0x89a>
				switch (i) {
1c00a2ee:	06800693          	li	a3,104
1c00a2f2:	fed49be3          	bne	s1,a3,1c00a2e8 <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c00a2f6:	874e                	mv	a4,s3
1c00a2f8:	00e79023          	sh	a4,0(a5)
				continue;
1c00a2fc:	8952                	mv	s2,s4
1c00a2fe:	8662                	mv	a2,s8
1c00a300:	f86ff06f          	j	1c009a86 <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c00a304:	874e                	mv	a4,s3
1c00a306:	00e78023          	sb	a4,0(a5)
					break;
1c00a30a:	bfcd                	j	1c00a2fc <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c00a30c:	41f9d713          	srai	a4,s3,0x1f
1c00a310:	0137a023          	sw	s3,0(a5)
1c00a314:	c3d8                	sw	a4,4(a5)
					break;
1c00a316:	b7dd                	j	1c00a2fc <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c00a318:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c00a31c:	77e1                	lui	a5,0xffff8
1c00a31e:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c00a322:	46c1                	li	a3,16
1c00a324:	4601                	li	a2,0
1c00a326:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c00a32a:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c00a32e:	e0aff0ef          	jal	ra,1c009938 <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c00a332:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c00a336:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c00a33a:	4909                	li	s2,2
				break;
1c00a33c:	b40d                	j	1c009d5e <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c00a33e:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c00a342:	a4060ee3          	beqz	a2,1c009d9e <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c00a346:	0d85                	addi	s11,s11,1
1c00a348:	bc89                	j	1c009d9a <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c00a34a:	00490a13          	addi	s4,s2,4
1c00a34e:	00092583          	lw	a1,0(s2)
1c00a352:	4601                	li	a2,0
					break;
1c00a354:	ba99                	j	1c009caa <_prf+0x248>
	if (alt_form) {
1c00a356:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c00a358:	46a1                	li	a3,8
1c00a35a:	409504b3          	sub	s1,a0,s1
1c00a35e:	ddaff0ef          	jal	ra,1c009938 <_to_x>
1c00a362:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c00a366:	4901                	li	s2,0
1c00a368:	badd                	j	1c009d5e <_prf+0x2fc>
				} else if (c == 'u') {
1c00a36a:	07500713          	li	a4,117
1c00a36e:	00ed9863          	bne	s11,a4,1c00a37e <_prf+0x91c>
	return _to_x(buf, value, 10);
1c00a372:	46a9                	li	a3,10
1c00a374:	8526                	mv	a0,s1
1c00a376:	dc2ff0ef          	jal	ra,1c009938 <_to_x>
1c00a37a:	8daa                	mv	s11,a0
1c00a37c:	b7ed                	j	1c00a366 <_prf+0x904>
	if (alt_form) {
1c00a37e:	8d26                	mv	s10,s1
1c00a380:	000a8963          	beqz	s5,1c00a392 <_prf+0x930>
		*buf++ = '0';
1c00a384:	7761                	lui	a4,0xffff8
1c00a386:	83074713          	xori	a4,a4,-2000
1c00a38a:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c00a38e:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c00a392:	46c1                	li	a3,16
1c00a394:	856a                	mv	a0,s10
1c00a396:	da2ff0ef          	jal	ra,1c009938 <_to_x>
	if (prefix == 'X') {
1c00a39a:	05800713          	li	a4,88
1c00a39e:	02ed9263          	bne	s11,a4,1c00a3c2 <_prf+0x960>
1c00a3a2:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c00a3a4:	45e5                	li	a1,25
1c00a3a6:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c00a3aa:	f9f68613          	addi	a2,a3,-97
1c00a3ae:	0ff67613          	andi	a2,a2,255
1c00a3b2:	00c5e563          	bltu	a1,a2,1c00a3bc <_prf+0x95a>
			*buf += 'A' - 'a';
1c00a3b6:	1681                	addi	a3,a3,-32
1c00a3b8:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c00a3bc:	fff7c703          	lbu	a4,-1(a5)
1c00a3c0:	f37d                	bnez	a4,1c00a3a6 <_prf+0x944>
	return len + (buf - buf0);
1c00a3c2:	409d0733          	sub	a4,s10,s1
1c00a3c6:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c00a3ca:	001a9913          	slli	s2,s5,0x1
1c00a3ce:	ba41                	j	1c009d5e <_prf+0x2fc>
				PUTC('%');
1c00a3d0:	85de                	mv	a1,s7
1c00a3d2:	02500513          	li	a0,37
1c00a3d6:	ec4ff06f          	j	1c009a9a <_prf+0x38>
				count++;
1c00a3da:	0985                	addi	s3,s3,1
				continue;
1c00a3dc:	8a4a                	mv	s4,s2
1c00a3de:	bf39                	j	1c00a2fc <_prf+0x89a>
1c00a3e0:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c00a3e2:	4d01                	li	s10,0
1c00a3e4:	b2d5                	j	1c009dc8 <_prf+0x366>
					PUTC(' ');
1c00a3e6:	85de                	mv	a1,s7
1c00a3e8:	02000513          	li	a0,32
1c00a3ec:	c036                	sw	a3,0(sp)
1c00a3ee:	c43e                	sw	a5,8(sp)
1c00a3f0:	9b02                	jalr	s6
1c00a3f2:	4682                	lw	a3,0(sp)
1c00a3f4:	47a2                	lw	a5,8(sp)
1c00a3f6:	ebf52563          	p.beqimm	a0,-1,1c009aa0 <_prf+0x3e>
				while (width-- > 0) {
1c00a3fa:	14fd                	addi	s1,s1,-1
1c00a3fc:	fff4b5e3          	p.bneimm	s1,-1,1c00a3e6 <_prf+0x984>
				count += width;
1c00a400:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00a402:	5cfd                	li	s9,-1
1c00a404:	bad9                	j	1c009dda <_prf+0x378>
				PUTC(*cptr++);
1c00a406:	0017c50b          	p.lbu	a0,1(a5!)
1c00a40a:	85de                	mv	a1,s7
1c00a40c:	c036                	sw	a3,0(sp)
1c00a40e:	c43e                	sw	a5,8(sp)
1c00a410:	9b02                	jalr	s6
1c00a412:	4682                	lw	a3,0(sp)
1c00a414:	47a2                	lw	a5,8(sp)
1c00a416:	9df534e3          	p.bneimm	a0,-1,1c009dde <_prf+0x37c>
1c00a41a:	e86ff06f          	j	1c009aa0 <_prf+0x3e>
				PUTC('0');
1c00a41e:	85de                	mv	a1,s7
1c00a420:	03000513          	li	a0,48
1c00a424:	c036                	sw	a3,0(sp)
1c00a426:	c43e                	sw	a5,8(sp)
1c00a428:	9b02                	jalr	s6
1c00a42a:	4682                	lw	a3,0(sp)
1c00a42c:	47a2                	lw	a5,8(sp)
1c00a42e:	9bf53be3          	p.bneimm	a0,-1,1c009de4 <_prf+0x382>
1c00a432:	e6eff06f          	j	1c009aa0 <_prf+0x3e>
					PUTC(c);
1c00a436:	85de                	mv	a1,s7
1c00a438:	c232                	sw	a2,4(sp)
1c00a43a:	c036                	sw	a3,0(sp)
1c00a43c:	c442                	sw	a6,8(sp)
1c00a43e:	9b02                	jalr	s6
1c00a440:	4612                	lw	a2,4(sp)
1c00a442:	4682                	lw	a3,0(sp)
1c00a444:	4822                	lw	a6,8(sp)
1c00a446:	e5f52d63          	p.beqimm	a0,-1,1c009aa0 <_prf+0x3e>
					c = *++cptr;
1c00a44a:	0d85                	addi	s11,s11,1
1c00a44c:	000dc503          	lbu	a0,0(s11)
1c00a450:	b27d                	j	1c009dfe <_prf+0x39c>
					PUTC('0');
1c00a452:	85de                	mv	a1,s7
1c00a454:	03000513          	li	a0,48
1c00a458:	c232                	sw	a2,4(sp)
1c00a45a:	c036                	sw	a3,0(sp)
1c00a45c:	c43a                	sw	a4,8(sp)
1c00a45e:	9b02                	jalr	s6
1c00a460:	4612                	lw	a2,4(sp)
1c00a462:	4682                	lw	a3,0(sp)
1c00a464:	4722                	lw	a4,8(sp)
1c00a466:	167d                	addi	a2,a2,-1
1c00a468:	9bf532e3          	p.bneimm	a0,-1,1c009e0c <_prf+0x3aa>
1c00a46c:	e34ff06f          	j	1c009aa0 <_prf+0x3e>
					PUTC('0');
1c00a470:	85de                	mv	a1,s7
1c00a472:	03000513          	li	a0,48
1c00a476:	c036                	sw	a3,0(sp)
1c00a478:	c43a                	sw	a4,8(sp)
1c00a47a:	9b02                	jalr	s6
1c00a47c:	4682                	lw	a3,0(sp)
1c00a47e:	4722                	lw	a4,8(sp)
1c00a480:	16fd                	addi	a3,a3,-1
1c00a482:	9df532e3          	p.bneimm	a0,-1,1c009e46 <_prf+0x3e4>
1c00a486:	e1aff06f          	j	1c009aa0 <_prf+0x3e>
					PUTC(c);
1c00a48a:	85de                	mv	a1,s7
1c00a48c:	c232                	sw	a2,4(sp)
1c00a48e:	c036                	sw	a3,0(sp)
1c00a490:	c43a                	sw	a4,8(sp)
1c00a492:	9b02                	jalr	s6
1c00a494:	4612                	lw	a2,4(sp)
1c00a496:	4682                	lw	a3,0(sp)
1c00a498:	4722                	lw	a4,8(sp)
1c00a49a:	e1f52363          	p.beqimm	a0,-1,1c009aa0 <_prf+0x3e>
					c = *++cptr;
1c00a49e:	0d85                	addi	s11,s11,1
1c00a4a0:	000dc503          	lbu	a0,0(s11)
1c00a4a4:	ba75                	j	1c009e60 <_prf+0x3fe>
					PUTC('0');
1c00a4a6:	85de                	mv	a1,s7
1c00a4a8:	03000513          	li	a0,48
1c00a4ac:	c43a                	sw	a4,8(sp)
1c00a4ae:	9b02                	jalr	s6
1c00a4b0:	4722                	lw	a4,8(sp)
1c00a4b2:	177d                	addi	a4,a4,-1
1c00a4b4:	9bf53fe3          	p.bneimm	a0,-1,1c009e72 <_prf+0x410>
1c00a4b8:	de8ff06f          	j	1c009aa0 <_prf+0x3e>
				PUTC(*cptr++);
1c00a4bc:	0014450b          	p.lbu	a0,1(s0!)
1c00a4c0:	85de                	mv	a1,s7
1c00a4c2:	9b02                	jalr	s6
1c00a4c4:	ddf52e63          	p.beqimm	a0,-1,1c009aa0 <_prf+0x3e>
1c00a4c8:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c00a4cc:	fef048e3          	bgtz	a5,1c00a4bc <_prf+0xa5a>
			count += prefix;
1c00a4d0:	994e                	add	s2,s2,s3
			count += zero_head;
1c00a4d2:	012d09b3          	add	s3,s10,s2
			count += clen;
1c00a4d6:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c00a4d8:	e39052e3          	blez	s9,1c00a2fc <_prf+0x89a>
				count += width;
1c00a4dc:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00a4de:	1cfd                	addi	s9,s9,-1
1c00a4e0:	e1fcaee3          	p.beqimm	s9,-1,1c00a2fc <_prf+0x89a>
					PUTC(' ');
1c00a4e4:	85de                	mv	a1,s7
1c00a4e6:	02000513          	li	a0,32
1c00a4ea:	9b02                	jalr	s6
1c00a4ec:	fff539e3          	p.bneimm	a0,-1,1c00a4de <_prf+0xa7c>
1c00a4f0:	db0ff06f          	j	1c009aa0 <_prf+0x3e>
			*buf++ = '.';
1c00a4f4:	02e00693          	li	a3,46
1c00a4f8:	00d90023          	sb	a3,0(s2)
1c00a4fc:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c00a500:	86ea                	mv	a3,s10
			decexp = 0;
1c00a502:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00a504:	4a81                	li	s5,0
1c00a506:	b6f9                	j	1c00a0d4 <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00a508:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c00a50a:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c00a50e:	46c1                	li	a3,16
1c00a510:	d636                	sw	a3,44(sp)
1c00a512:	04d74933          	p.min	s2,a4,a3
1c00a516:	b691                	j	1c00a05a <_prf+0x5f8>

1c00a518 <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c00a518:	300476f3          	csrrci	a3,mstatus,8
1c00a51c:	4785                	li	a5,1
1c00a51e:	08f50623          	sb	a5,140(a0)
1c00a522:	08d54783          	lbu	a5,141(a0)
1c00a526:	00201737          	lui	a4,0x201
1c00a52a:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00a52e:	04078793          	addi	a5,a5,64
1c00a532:	07da                	slli	a5,a5,0x16
1c00a534:	0007e723          	p.sw	zero,a4(a5)
1c00a538:	30069073          	csrw	mstatus,a3
1c00a53c:	8082                	ret

1c00a53e <__rt_uart_setup.isra.5>:
1c00a53e:	1c00c737          	lui	a4,0x1c00c
1c00a542:	3a072703          	lw	a4,928(a4) # 1c00c3a0 <__rt_freq_domains>
1c00a546:	00155793          	srli	a5,a0,0x1
1c00a54a:	97ba                	add	a5,a5,a4
1c00a54c:	02a7d7b3          	divu	a5,a5,a0
1c00a550:	1a102737          	lui	a4,0x1a102
1c00a554:	17fd                	addi	a5,a5,-1
1c00a556:	07c2                	slli	a5,a5,0x10
1c00a558:	3067e793          	ori	a5,a5,774
1c00a55c:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa102204>
1c00a560:	8082                	ret

1c00a562 <__rt_uart_setfreq_after>:
1c00a562:	1c00c7b7          	lui	a5,0x1c00c
1c00a566:	33878793          	addi	a5,a5,824 # 1c00c338 <__rt_uart>
1c00a56a:	4398                	lw	a4,0(a5)
1c00a56c:	cb11                	beqz	a4,1c00a580 <__rt_uart_setfreq_after+0x1e>
1c00a56e:	4788                	lw	a0,8(a5)
1c00a570:	1141                	addi	sp,sp,-16
1c00a572:	c606                	sw	ra,12(sp)
1c00a574:	fcbff0ef          	jal	ra,1c00a53e <__rt_uart_setup.isra.5>
1c00a578:	40b2                	lw	ra,12(sp)
1c00a57a:	4501                	li	a0,0
1c00a57c:	0141                	addi	sp,sp,16
1c00a57e:	8082                	ret
1c00a580:	4501                	li	a0,0
1c00a582:	8082                	ret

1c00a584 <__rt_uart_wait_tx_done.isra.6>:
1c00a584:	1a102737          	lui	a4,0x1a102
1c00a588:	1141                	addi	sp,sp,-16
1c00a58a:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021f8>
1c00a58e:	002046b7          	lui	a3,0x204
1c00a592:	431c                	lw	a5,0(a4)
1c00a594:	8bc1                	andi	a5,a5,16
1c00a596:	e38d                	bnez	a5,1c00a5b8 <__rt_uart_wait_tx_done.isra.6+0x34>
1c00a598:	1a102737          	lui	a4,0x1a102
1c00a59c:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa102200>
1c00a5a0:	431c                	lw	a5,0(a4)
1c00a5a2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a5a6:	ffed                	bnez	a5,1c00a5a0 <__rt_uart_wait_tx_done.isra.6+0x1c>
1c00a5a8:	c602                	sw	zero,12(sp)
1c00a5aa:	7cf00713          	li	a4,1999
1c00a5ae:	47b2                	lw	a5,12(sp)
1c00a5b0:	00f75763          	ble	a5,a4,1c00a5be <__rt_uart_wait_tx_done.isra.6+0x3a>
1c00a5b4:	0141                	addi	sp,sp,16
1c00a5b6:	8082                	ret
1c00a5b8:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00a5bc:	bfd9                	j	1c00a592 <__rt_uart_wait_tx_done.isra.6+0xe>
1c00a5be:	47b2                	lw	a5,12(sp)
1c00a5c0:	0785                	addi	a5,a5,1
1c00a5c2:	c63e                	sw	a5,12(sp)
1c00a5c4:	b7ed                	j	1c00a5ae <__rt_uart_wait_tx_done.isra.6+0x2a>

1c00a5c6 <__rt_uart_setfreq_before>:
1c00a5c6:	1c00c7b7          	lui	a5,0x1c00c
1c00a5ca:	3387a783          	lw	a5,824(a5) # 1c00c338 <__rt_uart>
1c00a5ce:	c385                	beqz	a5,1c00a5ee <__rt_uart_setfreq_before+0x28>
1c00a5d0:	1141                	addi	sp,sp,-16
1c00a5d2:	c606                	sw	ra,12(sp)
1c00a5d4:	fb1ff0ef          	jal	ra,1c00a584 <__rt_uart_wait_tx_done.isra.6>
1c00a5d8:	40b2                	lw	ra,12(sp)
1c00a5da:	005007b7          	lui	a5,0x500
1c00a5de:	1a102737          	lui	a4,0x1a102
1c00a5e2:	0799                	addi	a5,a5,6
1c00a5e4:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa102204>
1c00a5e8:	4501                	li	a0,0
1c00a5ea:	0141                	addi	sp,sp,16
1c00a5ec:	8082                	ret
1c00a5ee:	4501                	li	a0,0
1c00a5f0:	8082                	ret

1c00a5f2 <__rt_uart_cluster_req>:
1c00a5f2:	1141                	addi	sp,sp,-16
1c00a5f4:	c606                	sw	ra,12(sp)
1c00a5f6:	c422                	sw	s0,8(sp)
1c00a5f8:	30047473          	csrrci	s0,mstatus,8
1c00a5fc:	1c00a7b7          	lui	a5,0x1c00a
1c00a600:	51878793          	addi	a5,a5,1304 # 1c00a518 <__rt_uart_cluster_req_done>
1c00a604:	c91c                	sw	a5,16(a0)
1c00a606:	4785                	li	a5,1
1c00a608:	d91c                	sw	a5,48(a0)
1c00a60a:	411c                	lw	a5,0(a0)
1c00a60c:	02052a23          	sw	zero,52(a0)
1c00a610:	c948                	sw	a0,20(a0)
1c00a612:	43cc                	lw	a1,4(a5)
1c00a614:	4514                	lw	a3,8(a0)
1c00a616:	4150                	lw	a2,4(a0)
1c00a618:	0586                	slli	a1,a1,0x1
1c00a61a:	00c50793          	addi	a5,a0,12
1c00a61e:	4701                	li	a4,0
1c00a620:	0585                	addi	a1,a1,1
1c00a622:	4501                	li	a0,0
1c00a624:	d98fc0ef          	jal	ra,1c006bbc <rt_periph_copy>
1c00a628:	30041073          	csrw	mstatus,s0
1c00a62c:	40b2                	lw	ra,12(sp)
1c00a62e:	4422                	lw	s0,8(sp)
1c00a630:	0141                	addi	sp,sp,16
1c00a632:	8082                	ret

1c00a634 <soc_eu_fcEventMask_setEvent>:
1c00a634:	47fd                	li	a5,31
1c00a636:	4721                	li	a4,8
1c00a638:	00a7d463          	ble	a0,a5,1c00a640 <soc_eu_fcEventMask_setEvent+0xc>
1c00a63c:	1501                	addi	a0,a0,-32
1c00a63e:	4711                	li	a4,4
1c00a640:	1a1066b7          	lui	a3,0x1a106
1c00a644:	20e6f603          	p.lw	a2,a4(a3)
1c00a648:	4785                	li	a5,1
1c00a64a:	00a79533          	sll	a0,a5,a0
1c00a64e:	fff54513          	not	a0,a0
1c00a652:	8d71                	and	a0,a0,a2
1c00a654:	00a6e723          	p.sw	a0,a4(a3)
1c00a658:	8082                	ret

1c00a65a <rt_uart_conf_init>:
1c00a65a:	000997b7          	lui	a5,0x99
1c00a65e:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c00a662:	c11c                	sw	a5,0(a0)
1c00a664:	57fd                	li	a5,-1
1c00a666:	c15c                	sw	a5,4(a0)
1c00a668:	8082                	ret

1c00a66a <__rt_uart_open>:
1c00a66a:	1141                	addi	sp,sp,-16
1c00a66c:	c606                	sw	ra,12(sp)
1c00a66e:	c422                	sw	s0,8(sp)
1c00a670:	c226                	sw	s1,4(sp)
1c00a672:	c04a                	sw	s2,0(sp)
1c00a674:	30047973          	csrrci	s2,mstatus,8
1c00a678:	cd8d                	beqz	a1,1c00a6b2 <__rt_uart_open+0x48>
1c00a67a:	4198                	lw	a4,0(a1)
1c00a67c:	1c00c6b7          	lui	a3,0x1c00c
1c00a680:	ffc50793          	addi	a5,a0,-4
1c00a684:	33868413          	addi	s0,a3,824 # 1c00c338 <__rt_uart>
1c00a688:	0792                	slli	a5,a5,0x4
1c00a68a:	943e                	add	s0,s0,a5
1c00a68c:	4010                	lw	a2,0(s0)
1c00a68e:	33868693          	addi	a3,a3,824
1c00a692:	c60d                	beqz	a2,1c00a6bc <__rt_uart_open+0x52>
1c00a694:	c589                	beqz	a1,1c00a69e <__rt_uart_open+0x34>
1c00a696:	418c                	lw	a1,0(a1)
1c00a698:	4418                	lw	a4,8(s0)
1c00a69a:	04e59d63          	bne	a1,a4,1c00a6f4 <__rt_uart_open+0x8a>
1c00a69e:	0605                	addi	a2,a2,1
1c00a6a0:	00c6e7a3          	p.sw	a2,a5(a3)
1c00a6a4:	8522                	mv	a0,s0
1c00a6a6:	40b2                	lw	ra,12(sp)
1c00a6a8:	4422                	lw	s0,8(sp)
1c00a6aa:	4492                	lw	s1,4(sp)
1c00a6ac:	4902                	lw	s2,0(sp)
1c00a6ae:	0141                	addi	sp,sp,16
1c00a6b0:	8082                	ret
1c00a6b2:	00099737          	lui	a4,0x99
1c00a6b6:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c00a6ba:	b7c9                	j	1c00a67c <__rt_uart_open+0x12>
1c00a6bc:	c418                	sw	a4,8(s0)
1c00a6be:	4785                	li	a5,1
1c00a6c0:	1a102737          	lui	a4,0x1a102
1c00a6c4:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa102760>
1c00a6c8:	c01c                	sw	a5,0(s0)
1c00a6ca:	c048                	sw	a0,4(s0)
1c00a6cc:	4314                	lw	a3,0(a4)
1c00a6ce:	00a797b3          	sll	a5,a5,a0
1c00a6d2:	00151493          	slli	s1,a0,0x1
1c00a6d6:	8fd5                	or	a5,a5,a3
1c00a6d8:	c31c                	sw	a5,0(a4)
1c00a6da:	8526                	mv	a0,s1
1c00a6dc:	f59ff0ef          	jal	ra,1c00a634 <soc_eu_fcEventMask_setEvent>
1c00a6e0:	00148513          	addi	a0,s1,1
1c00a6e4:	f51ff0ef          	jal	ra,1c00a634 <soc_eu_fcEventMask_setEvent>
1c00a6e8:	4408                	lw	a0,8(s0)
1c00a6ea:	e55ff0ef          	jal	ra,1c00a53e <__rt_uart_setup.isra.5>
1c00a6ee:	30091073          	csrw	mstatus,s2
1c00a6f2:	bf4d                	j	1c00a6a4 <__rt_uart_open+0x3a>
1c00a6f4:	4401                	li	s0,0
1c00a6f6:	b77d                	j	1c00a6a4 <__rt_uart_open+0x3a>

1c00a6f8 <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c00a6f8:	1141                	addi	sp,sp,-16
1c00a6fa:	c606                	sw	ra,12(sp)
1c00a6fc:	c422                	sw	s0,8(sp)
1c00a6fe:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a700:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c00a704:	411c                	lw	a5,0(a0)
1c00a706:	17fd                	addi	a5,a5,-1
1c00a708:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c00a70a:	e79d                	bnez	a5,1c00a738 <rt_uart_close+0x40>
1c00a70c:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c00a70e:	e77ff0ef          	jal	ra,1c00a584 <__rt_uart_wait_tx_done.isra.6>

  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, val);
}

static inline void plp_uart_disable(int channel) {
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c00a712:	1a102737          	lui	a4,0x1a102
1c00a716:	005007b7          	lui	a5,0x500
1c00a71a:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa102204>
1c00a71e:	0799                	addi	a5,a5,6
1c00a720:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c00a722:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c00a724:	78070713          	addi	a4,a4,1920
1c00a728:	4314                	lw	a3,0(a4)
1c00a72a:	4785                	li	a5,1
1c00a72c:	00c797b3          	sll	a5,a5,a2
1c00a730:	fff7c793          	not	a5,a5
1c00a734:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c00a736:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c00a738:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c00a73c:	40b2                	lw	ra,12(sp)
1c00a73e:	4422                	lw	s0,8(sp)
1c00a740:	4492                	lw	s1,4(sp)
1c00a742:	0141                	addi	sp,sp,16
1c00a744:	8082                	ret

1c00a746 <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a746:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00a74a:	8795                	srai	a5,a5,0x5
1c00a74c:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c00a750:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c00a754:	1c00a7b7          	lui	a5,0x1c00a
1c00a758:	5f278793          	addi	a5,a5,1522 # 1c00a5f2 <__rt_uart_cluster_req>
1c00a75c:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c00a75e:	4785                	li	a5,1
  req->uart = handle;
1c00a760:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c00a762:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c00a764:	c690                	sw	a2,8(a3)
  req->done = 0;
1c00a766:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c00a76a:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c00a76e:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c00a770:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c00a772:	00c68513          	addi	a0,a3,12
1c00a776:	e03fc06f          	j	1c007578 <__rt_cluster_push_fc_event>

1c00a77a <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00a77a:	1c00a5b7          	lui	a1,0x1c00a
{
1c00a77e:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00a780:	4601                	li	a2,0
1c00a782:	5c658593          	addi	a1,a1,1478 # 1c00a5c6 <__rt_uart_setfreq_before>
1c00a786:	4511                	li	a0,4
{
1c00a788:	c606                	sw	ra,12(sp)
1c00a78a:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00a78c:	953fb0ef          	jal	ra,1c0060de <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00a790:	1c00a5b7          	lui	a1,0x1c00a
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00a794:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00a796:	4601                	li	a2,0
1c00a798:	56258593          	addi	a1,a1,1378 # 1c00a562 <__rt_uart_setfreq_after>
1c00a79c:	4515                	li	a0,5
1c00a79e:	941fb0ef          	jal	ra,1c0060de <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00a7a2:	1c00c7b7          	lui	a5,0x1c00c
1c00a7a6:	3207ac23          	sw	zero,824(a5) # 1c00c338 <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00a7aa:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00a7ac:	c10d                	beqz	a0,1c00a7ce <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a7ae:	01402673          	csrr	a2,uhartid
1c00a7b2:	1c00b537          	lui	a0,0x1c00b
  return (hart_id >> 5) & 0x3f;
1c00a7b6:	40565593          	srai	a1,a2,0x5
1c00a7ba:	f265b5b3          	p.bclr	a1,a1,25,6
1c00a7be:	f4563633          	p.bclr	a2,a2,26,5
1c00a7c2:	2c050513          	addi	a0,a0,704 # 1c00b2c0 <__himax_reg_init+0x2dc>
1c00a7c6:	946ff0ef          	jal	ra,1c00990c <printf>
1c00a7ca:	8c6ff0ef          	jal	ra,1c009890 <abort>
}
1c00a7ce:	40b2                	lw	ra,12(sp)
1c00a7d0:	4422                	lw	s0,8(sp)
1c00a7d2:	0141                	addi	sp,sp,16
1c00a7d4:	8082                	ret
	...

1c00a7d8 <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c00a7d8:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c00a7dc:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c00a7e0:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c00a7e2:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00a7e6:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c00a7ea:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c00a7ee:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c00a7f2:	10059063          	bnez	a1,1c00a8f2 <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c00a7f6:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00a7fa:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c00a7fe:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c00a802:	e3ff6417          	auipc	s0,0xe3ff6
1c00a806:	80240413          	addi	s0,s0,-2046 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c00a80a:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c00a80e:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c00a810:	00000a97          	auipc	s5,0x0
1c00a814:	038a8a93          	addi	s5,s5,56 # 1c00a848 <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c00a818:	00002b97          	auipc	s7,0x2
1c00a81c:	b98b8b93          	addi	s7,s7,-1128 # 1c00c3b0 <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00a820:	02800393          	li	t2,40
    mul     t2, t2, a0
1c00a824:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c00a828:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c00a82a:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c00a82c:	1b201cb7          	lui	s9,0x1b201
1c00a830:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ff9e4>
    li      s8, 1
1c00a834:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c00a836:	00000d17          	auipc	s10,0x0
1c00a83a:	0fad0d13          	addi	s10,s10,250 # 1c00a930 <__rt_set_slave_stack>
    ori     s10, s10, 1
1c00a83e:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c00a842:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c00a846:	a819                	j	1c00a85c <__rt_master_loop>

1c00a848 <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c00a848:	000b0a63          	beqz	s6,1c00a85c <__rt_master_loop>

1c00a84c <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c00a84c:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c00a850:	08029a63          	bnez	t0,1c00a8e4 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c00a854:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c00a858:	018ca023          	sw	s8,0(s9)

1c00a85c <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c00a85c:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c00a860:	060e0b63          	beqz	t3,1c00a8d6 <__rt_master_sleep>

1c00a864 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c00a864:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c00a868:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c00a86c:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c00a870:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c00a874:	ffee98e3          	bne	t4,t5,1c00a864 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00a878:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c00a87c:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c00a880:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c00a884:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c00a888:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c00a88c:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c00a890:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c00a894:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c00a898:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c00a89c:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c00a89e:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c00a8a0:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c00a8a4:	00030a63          	beqz	t1,1c00a8b8 <__rt_no_stack_check>
    sub     t4, sp, t1
1c00a8a8:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c00a8ac:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00a8b0:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00a8b4:	7d00d073          	csrwi	0x7d0,1

1c00a8b8 <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c00a8b8:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c00a8bc:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c00a8c0:	21e9a623          	sw	t5,524(s3)

1c00a8c4 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c00a8c4:	000f2863          	p.beqimm	t5,0,1c00a8d4 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00a8c8:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00a8cc:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00a8d0:	0829a023          	sw	sp,128(s3)

1c00a8d4 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c00a8d4:	8282                	jr	t0

1c00a8d6 <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c00a8d6:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00a8da:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00a8de:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c00a8e2:	bfad                	j	1c00a85c <__rt_master_loop>

1c00a8e4 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c00a8e4:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00a8e8:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00a8ec:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c00a8f0:	bfb1                	j	1c00a84c <__rt_push_event_to_fc_retry>

1c00a8f2 <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c00a8f2:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c00a8f6:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c00a8fa:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c00a8fe:	00000a17          	auipc	s4,0x0
1c00a902:	012a0a13          	addi	s4,s4,18 # 1c00a910 <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c00a906:	00000a97          	auipc	s5,0x0
1c00a90a:	00ea8a93          	addi	s5,s5,14 # 1c00a914 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c00a90e:	a019                	j	1c00a914 <__rt_wait_for_dispatch>

1c00a910 <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c00a910:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c00a914 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00a914:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00a918:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c00a91c:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c00a920:	00031563          	bnez	t1,1c00a92a <__rt_other_entry>

1c00a924 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c00a924:	000a00b3          	add	ra,s4,zero
    jr      t0
1c00a928:	8282                	jr	t0

1c00a92a <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c00a92a:	000a80b3          	add	ra,s5,zero
    jr      t0
1c00a92e:	8282                	jr	t0

1c00a930 <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00a930:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00a934:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c00a938:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c00a93c:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c00a940:	c909                	beqz	a0,1c00a952 <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c00a942:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c00a946:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00a94a:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00a94e:	7d00d073          	csrwi	0x7d0,1

1c00a952 <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c00a952:	8082                	ret

1c00a954 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c00a954:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c00a958:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00a95c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c00a960:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00a964:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c00a968:	00204637          	lui	a2,0x204
1c00a96c:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c00a970:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c00a974:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00a976:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c00a978:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c00a97c:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00a97e:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c00a980:	c131                	beqz	a0,1c00a9c4 <__rt_dma_2d_done>

1c00a982 <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c00a982:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c00a984:	00a5c363          	blt	a1,a0,1c00a98a <__rt_dma_2d_not_last>
    mv  a1, a0
1c00a988:	85aa                	mv	a1,a0

1c00a98a <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c00a98a:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c00a98c:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00a98e:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c00a990:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c00a994:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c00a996:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00a998:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00a99a:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c00a99c:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00a99e:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00a9a0:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00a9a2:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c00a9a4:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c00a9a6:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00a9a8:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00a9aa:	cc08                	sw	a0,24(s0)

1c00a9ac <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c00a9ac:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c00a9b0:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c00a9b4:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c00a9b8:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00a9bc:	fec12603          	lw	a2,-20(sp)

    mret
1c00a9c0:	30200073          	mret

1c00a9c4 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00a9c4:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c00a9c8:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c00a9ca:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c00a9ce:	00204437          	lui	s0,0x204
1c00a9d2:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c00a9d6:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c00a9da:	d8e9                	beqz	s1,1c00a9ac <__rt_dma_2d_exit>

    mv  x8, x9
1c00a9dc:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00a9de:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00a9e0:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c00a9e2:	b745                	j	1c00a982 <__rt_dma_2d_redo>
